{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nvar NumberAsAny = Number;\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\n\nexport var MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\n\nexport var MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\n\nexport var isInteger = NumberAsAny.isInteger || function (value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n/**\n * Returns whether a variable is either undefined or null.\n */\n\nexport function isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\n\nexport function isSafeInteger(value) {\n  return isInteger(value) && value <= MAX_SAFE_INTEGER && value >= MIN_SAFE_INTEGER;\n}\n/**\n * Safely checks if the number is NaN.\n */\n\nexport function safeIsNaN(value) {\n  if (NumberAsAny.IsNaN) {\n    return NumberAsAny.IsNaN(value);\n  } else {\n    return typeof value === 'number' && isNaN(value);\n  }\n}","map":{"version":3,"sources":["../src/util/types.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAIH;AACA;AACA,IAAM,WAAW,GAAG,MAApB;AAEA;;;AAGG;;AACH,OAAO,IAAI,gBAAgB,GACzB,WAAW,CAAC,gBAAZ,IAAgC,EAAE,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAApB,CAD3B;AAGP;;;AAGG;;AACH,OAAO,IAAI,gBAAgB,GACzB,WAAW,CAAC,gBAAZ,IAAgC,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAD7C;AAGP;;;;;AAKG;;AACH,OAAO,IAAI,SAAS,GAClB,WAAW,CAAC,SAAZ,IACC,UAAA,KAAA,EAAK;AACJ,SAAA,OAAO,KAAP,KAAiB,QAAjB,IACA,QAAQ,CAAC,KAAD,CADR,IAEA,IAAI,CAAC,KAAL,CAAW,KAAX,MAAsB,KAFtB;AAE2B,CALxB;AAOP;;AAEG;;AACH,OAAM,SAAA,iBAAA,CAA4B,KAA5B,EAAwC;AAC5C,SAAO,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAAnC;AACD;AAED;;;AAGG;;AACH,OAAM,SAAA,aAAA,CAAwB,KAAxB,EAAoC;AACxC,SACE,SAAS,CAAC,KAAD,CAAT,IACC,KAAgB,IAAI,gBADrB,IAEC,KAAgB,IAAI,gBAHvB;AAKD;AAED;;AAEG;;AACH,OAAM,SAAA,SAAA,CAAoB,KAApB,EAAgC;AACpC,MAAI,WAAW,CAAC,KAAhB,EAAuB;AACrB,WAAO,WAAW,CAAC,KAAZ,CAAkB,KAAlB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,CAAC,KAAD,CAAzC;AACD;AACF","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AnyJs } from './misc';\n\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nconst NumberAsAny = Number as any;\n\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport let MIN_SAFE_INTEGER: number =\n  NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport let MAX_SAFE_INTEGER: number =\n  NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nexport let isInteger: (value: AnyJs) => boolean =\n  NumberAsAny.isInteger ||\n  (value =>\n    typeof value === 'number' &&\n    isFinite(value) &&\n    Math.floor(value) === value);\n\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value: AnyJs): boolean {\n  return value === null || value === undefined;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value: AnyJs): boolean {\n  return (\n    isInteger(value) &&\n    (value as number) <= MAX_SAFE_INTEGER &&\n    (value as number) >= MIN_SAFE_INTEGER\n  );\n}\n\n/**\n * Safely checks if the number is NaN.\n */\nexport function safeIsNaN(value: AnyJs): boolean {\n  if (NumberAsAny.IsNaN) {\n    return NumberAsAny.IsNaN(value);\n  } else {\n    return typeof value === 'number' && isNaN(value);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}