{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { emptyByteString } from '../platform/platform';\n/** An enumeration of the different purposes we have for queries. */\n\nexport var QueryPurpose;\n\n(function (QueryPurpose) {\n  /** A regular, normal query. */\n  QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n  /**\n   * The query was used to refill a query after an existence filter mismatch.\n   */\n\n  QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n  /** The query was used to resolve a limbo document. */\n\n  QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\n\n\nvar QueryData =\n/** @class */\nfunction () {\n  function QueryData(\n  /** The query being listened to. */\n  query,\n  /**\n   * The target ID to which the query corresponds; Assigned by the\n   * LocalStore for user listens and by the SyncEngine for limbo watches.\n   */\n  targetId,\n  /** The purpose of the query. */\n  purpose,\n  /** The latest snapshot version seen for this target. */\n  snapshotVersion,\n  /**\n   * An opaque, server-assigned token that allows watching a query to be\n   * resumed after disconnecting without retransmitting all the data that\n   * matches the query. The resume token essentially identifies a point in\n   * time from which the server should resume sending results.\n   */\n  resumeToken) {\n    if (snapshotVersion === void 0) {\n      snapshotVersion = SnapshotVersion.MIN;\n    }\n\n    if (resumeToken === void 0) {\n      resumeToken = emptyByteString();\n    }\n\n    this.query = query;\n    this.targetId = targetId;\n    this.purpose = purpose;\n    this.snapshotVersion = snapshotVersion;\n    this.resumeToken = resumeToken;\n  }\n  /**\n   * Creates a new query data instance with an updated snapshot version and\n   * resume token.\n   */\n\n\n  QueryData.prototype.update = function (updated) {\n    return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n  };\n\n  QueryData.prototype.equals = function (other) {\n    return this.targetId === other.targetId && this.purpose === other.purpose && this.snapshotVersion.equals(other.snapshotVersion) && this.resumeToken === other.resumeToken && this.query.equals(other.query);\n  };\n\n  return QueryData;\n}();\n\nexport { QueryData };","map":{"version":3,"sources":["../src/local/query_data.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAGH,SAAS,eAAT,QAAgC,0BAAhC;AAEA,SAAS,eAAT,QAAgC,sBAAhC;AAEA;;AACA,OAAA,IAAY,YAAZ;;AAAA,CAAA,UAAY,YAAZ,EAAwB;AACtB;AACA,EAAA,YAAA,CAAA,YAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AAEA;;AAEG;;AACH,EAAA,YAAA,CAAA,YAAA,CAAA,yBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,yBAAA;AAEA;;AACA,EAAA,YAAA,CAAA,YAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA;AACD,CAXD,EAAY,YAAY,KAAZ,YAAY,GAAA,EAAA,CAAxB;AAaA;;AAEG;;;AACH,IAAA,SAAA;AAAA;AAAA,YAAA;AACE,WAAA,SAAA;AACE;AACO,EAAA,KAFT;AAGE;;;AAGG;AACI,EAAA,QAPT;AAQE;AACO,EAAA,OATT;AAUE;AACO,EAAA,eAXT;AAYE;;;;;AAKG;AACI,EAAA,WAlBT,EAkByD;AAPhD,QAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,eAAA,GAAmC,eAAe,CAAC,GAAnD;AAAsD;;AAOtD,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAA+B,eAAe,EAA9C;AAAgD;;AAhBhD,SAAA,KAAA,GAAA,KAAA;AAKA,SAAA,QAAA,GAAA,QAAA;AAEA,SAAA,OAAA,GAAA,OAAA;AAEA,SAAA,eAAA,GAAA,eAAA;AAOA,SAAA,WAAA,GAAA,WAAA;AACL;AAEJ;;;AAGG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,OAAP,EAGC;AACC,WAAO,IAAI,SAAJ,CACL,KAAK,KADA,EAEL,KAAK,QAFA,EAGL,KAAK,OAHA,EAIL,OAAO,CAAC,eAJH,EAKL,OAAO,CAAC,WALH,CAAP;AAOD,GAXD;;AAaA,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAAuB;AACrB,WACE,KAAK,QAAL,KAAkB,KAAK,CAAC,QAAxB,IACA,KAAK,OAAL,KAAiB,KAAK,CAAC,OADvB,IAEA,KAAK,eAAL,CAAqB,MAArB,CAA4B,KAAK,CAAC,eAAlC,CAFA,IAGA,KAAK,WAAL,KAAqB,KAAK,CAAC,WAH3B,IAIA,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,CAAC,KAAxB,CALF;AAOD,GARD;;AASF,SAAA,SAAA;AAAC,CAhDD,EAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ProtoByteString, TargetId } from '../core/types';\nimport { emptyByteString } from '../platform/platform';\n\n/** An enumeration of the different purposes we have for queries. */\nexport enum QueryPurpose {\n  /** A regular, normal query. */\n  Listen,\n\n  /**\n   * The query was used to refill a query after an existence filter mismatch.\n   */\n  ExistenceFilterMismatch,\n\n  /** The query was used to resolve a limbo document. */\n  LimboResolution\n}\n\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nexport class QueryData {\n  constructor(\n    /** The query being listened to. */\n    public query: Query,\n    /**\n     * The target ID to which the query corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    public targetId: TargetId,\n    /** The purpose of the query. */\n    public purpose: QueryPurpose,\n    /** The latest snapshot version seen for this target. */\n    public snapshotVersion: SnapshotVersion = SnapshotVersion.MIN,\n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the query. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    public resumeToken: ProtoByteString = emptyByteString()\n  ) {}\n\n  /**\n   * Creates a new query data instance with an updated snapshot version and\n   * resume token.\n   */\n  update(updated: {\n    resumeToken: ProtoByteString;\n    snapshotVersion: SnapshotVersion;\n  }): QueryData {\n    return new QueryData(\n      this.query,\n      this.targetId,\n      this.purpose,\n      updated.snapshotVersion,\n      updated.resumeToken\n    );\n  }\n\n  equals(other: QueryData): boolean {\n    return (\n      this.targetId === other.targetId &&\n      this.purpose === other.purpose &&\n      this.snapshotVersion.equals(other.snapshotVersion) &&\n      this.resumeToken === other.resumeToken &&\n      this.query.equals(other.query)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}