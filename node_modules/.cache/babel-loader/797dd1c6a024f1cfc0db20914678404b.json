{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Timestamp } from './timestamp';\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\n\nvar SnapshotVersion =\n/** @class */\nfunction () {\n  function SnapshotVersion(timestamp) {\n    this.timestamp = timestamp;\n  } // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n  // delete this constructor and use a timestamp-backed version everywhere.\n\n\n  SnapshotVersion.fromMicroseconds = function (value) {\n    var seconds = Math.floor(value / 1e6);\n    var nanos = value % 1e6 * 1e3;\n    return new SnapshotVersion(new Timestamp(seconds, nanos));\n  };\n\n  SnapshotVersion.fromTimestamp = function (value) {\n    return new SnapshotVersion(value);\n  };\n\n  SnapshotVersion.forDeletedDoc = function () {\n    return SnapshotVersion.MIN;\n  };\n\n  SnapshotVersion.prototype.compareTo = function (other) {\n    return this.timestamp.compareTo(other.timestamp);\n  };\n\n  SnapshotVersion.prototype.equals = function (other) {\n    return this.timestamp.equals(other.timestamp);\n  };\n  /** Returns a number representation of the version for use in spec tests. */\n\n\n  SnapshotVersion.prototype.toMicroseconds = function () {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n  };\n\n  SnapshotVersion.prototype.toString = function () {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  };\n\n  SnapshotVersion.prototype.toTimestamp = function () {\n    return this.timestamp;\n  };\n\n  SnapshotVersion.MIN = new SnapshotVersion(new Timestamp(0, 0));\n  return SnapshotVersion;\n}();\n\nexport { SnapshotVersion };","map":{"version":3,"sources":["../src/core/snapshot_version.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,SAAT,QAA0B,aAA1B;AAEA;;;AAGG;;AACH,IAAA,eAAA;AAAA;AAAA,YAAA;AAmBE,WAAA,eAAA,CAA4B,SAA5B,EAAgD;AAApB,SAAA,SAAA,GAAA,SAAA;AAAwB,GAnBtD,CAGE;AACA;;;AACO,EAAA,eAAA,CAAA,gBAAA,GAAP,UAAwB,KAAxB,EAAqC;AACnC,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,GAAnB,CAAhB;AACA,QAAM,KAAK,GAAI,KAAK,GAAG,GAAT,GAAgB,GAA9B;AACA,WAAO,IAAI,eAAJ,CAAoB,IAAI,SAAJ,CAAc,OAAd,EAAuB,KAAvB,CAApB,CAAP;AACD,GAJM;;AAMA,EAAA,eAAA,CAAA,aAAA,GAAP,UAAqB,KAArB,EAAqC;AACnC,WAAO,IAAI,eAAJ,CAAoB,KAApB,CAAP;AACD,GAFM;;AAIA,EAAA,eAAA,CAAA,aAAA,GAAP,YAAA;AACE,WAAO,eAAe,CAAC,GAAvB;AACD,GAFM;;AAMP,EAAA,eAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAAgC;AAC9B,WAAO,KAAK,SAAL,CAAe,SAAf,CAAyB,KAAK,CAAC,SAA/B,CAAP;AACD,GAFD;;AAIA,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAA6B;AAC3B,WAAO,KAAK,SAAL,CAAe,MAAf,CAAsB,KAAK,CAAC,SAA5B,CAAP;AACD,GAFD;AAIA;;;AACA,EAAA,eAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE;AACA,WAAO,KAAK,SAAL,CAAe,OAAf,GAAyB,GAAzB,GAA+B,KAAK,SAAL,CAAe,KAAf,GAAuB,IAA7D;AACD,GAHD;;AAKA,EAAA,eAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,qBAAqB,KAAK,SAAL,CAAe,QAAf,EAArB,GAAiD,GAAxD;AACD,GAFD;;AAIA,EAAA,eAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,WAAO,KAAK,SAAZ;AACD,GAFD;;AAtCgB,EAAA,eAAA,CAAA,GAAA,GAAM,IAAI,eAAJ,CAAoB,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAApB,CAAN;AAyClB,SAAA,eAAA;AAAC,CA1CD,EAAA;;SAAa,e","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from './timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static readonly MIN = new SnapshotVersion(new Timestamp(0, 0));\n\n  // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n  // delete this constructor and use a timestamp-backed version everywhere.\n  static fromMicroseconds(value: number): SnapshotVersion {\n    const seconds = Math.floor(value / 1e6);\n    const nanos = (value % 1e6) * 1e3;\n    return new SnapshotVersion(new Timestamp(seconds, nanos));\n  }\n\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static forDeletedDoc(): SnapshotVersion {\n    return SnapshotVersion.MIN;\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp.compareTo(other.timestamp);\n  }\n\n  equals(other: SnapshotVersion): boolean {\n    return this.timestamp.equals(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}