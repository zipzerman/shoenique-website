{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport * as obj from './obj';\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\n\nexport function validateExactNumberOfArgs(functionName, args, numberOfArgs) {\n  if (args.length !== numberOfArgs) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires \" + formatPlural(numberOfArgs, 'argument') + ', but was called with ' + formatPlural(args.length, 'argument') + '.');\n  }\n}\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\n\nexport function validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {\n  if (args.length < minNumberOfArgs) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires at least \" + formatPlural(minNumberOfArgs, 'argument') + ', but was called with ' + formatPlural(args.length, 'argument') + '.');\n  }\n}\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\n\nexport function validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {\n  if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires between \" + minNumberOfArgs + \" and \" + (maxNumberOfArgs + \" arguments, but was called with \") + formatPlural(args.length, 'argument') + '.');\n  }\n}\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\n\nexport function validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {\n  if (!(value instanceof Array) || value.length < minNumberOfElements) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + name + \" argument to be an \" + 'array with at least ' + (formatPlural(minNumberOfElements, 'element') + \".\"));\n  }\n}\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\n\nexport function validateArgType(functionName, type, position, argument) {\n  validateType(functionName, type, ordinal(position) + \" argument\", argument);\n}\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\n\nexport function validateOptionalArgType(functionName, type, position, argument) {\n  if (argument !== undefined) {\n    validateArgType(functionName, type, position, argument);\n  }\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\n\nexport function validateNamedType(functionName, type, optionName, argument) {\n  validateType(functionName, type, optionName + \" option\", argument);\n}\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\n\nexport function validateNamedOptionalType(functionName, type, optionName, argument) {\n  if (argument !== undefined) {\n    validateNamedType(functionName, type, optionName, argument);\n  }\n}\n/** Helper to validate the type of a provided input. */\n\nfunction validateType(functionName, type, inputName, input) {\n  if (typeof input !== type || type === 'object' && !isPlainObject(input)) {\n    var description = valueDescription(input);\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + inputName + \" \" + (\"to be of type \" + type + \", but it was: \" + description));\n  }\n}\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n\n\nexport function isPlainObject(input) {\n  return typeof input === 'object' && input !== null && Object.getPrototypeOf(input) === Object.prototype;\n}\n/** Returns a string describing the type / value of the provided input. */\n\nexport function valueDescription(input) {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = input.substring(0, 20) + \"...\";\n    }\n\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      var customObjectName = tryGetCustomObjectType(input);\n\n      if (customObjectName) {\n        return \"a custom \" + customObjectName + \" object\";\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n/** Hacky method to try to get the constructor name for an object. */\n\nexport function tryGetCustomObjectType(input) {\n  if (input.constructor) {\n    var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    var results = funcNameRegex.exec(input.constructor.toString());\n\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n\n  return null;\n}\n/** Validates the provided argument is defined. */\n\nexport function validateDefined(functionName, position, argument) {\n  if (argument === undefined) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a valid \" + ordinal(position) + \" \" + \"argument, but it was undefined.\");\n  }\n}\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\n\nexport function validateOptionNames(functionName, options, optionNames) {\n  obj.forEach(options, function (key, _) {\n    if (optionNames.indexOf(key) < 0) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, \"Unknown option '\" + key + \"' passed to function \" + functionName + \"(). \" + 'Available options: ' + optionNames.join(', '));\n    }\n  });\n}\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\n\nexport function invalidClassError(functionName, type, position, argument) {\n  var description = valueDescription(argument);\n  return new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires its \" + ordinal(position) + \" \" + (\"argument to be a \" + type + \", but it was: \" + description));\n}\n/** Converts a number to its english word representation */\n\nfunction ordinal(num) {\n  switch (num) {\n    case 1:\n      return 'first';\n\n    case 2:\n      return 'second';\n\n    case 3:\n      return 'third';\n\n    default:\n      return num + 'th';\n  }\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\n\n\nfunction formatPlural(num, str) {\n  return num + \" \" + str + (num === 1 ? '' : 's');\n}","map":{"version":3,"sources":["../src/util/input_validation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from './assert';\nimport { Code, FirestoreError } from './error';\nimport { AnyJs } from './misc';\nimport * as obj from './obj';\n\n/**\n * Validates the invocation of functionName has the exact number of arguments.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateExactNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateExactNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  numberOfArgs: number\n): void {\n  if (args.length !== numberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires ` +\n        formatPlural(numberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has at least the provided number of\n * arguments (but can have many more).\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateAtLeastNumberOfArgs('myFunction', arguments, 2);\n */\nexport function validateAtLeastNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires at least ` +\n        formatPlural(minNumberOfArgs, 'argument') +\n        ', but was called with ' +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the invocation of functionName has number of arguments between\n * the values provided.\n *\n * Forward the magic \"arguments\" variable as second parameter on which the\n * parameter validation is performed:\n * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);\n */\nexport function validateBetweenNumberOfArgs(\n  functionName: string,\n  args: IArguments,\n  minNumberOfArgs: number,\n  maxNumberOfArgs: number\n): void {\n  if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires between ${minNumberOfArgs} and ` +\n        `${maxNumberOfArgs} arguments, but was called with ` +\n        formatPlural(args.length, 'argument') +\n        '.'\n    );\n  }\n}\n\n/**\n * Validates the provided argument is an array and has as least the expected\n * number of elements.\n */\nexport function validateNamedArrayAtLeastNumberOfElements<T>(\n  functionName: string,\n  value: T[],\n  name: string,\n  minNumberOfElements: number\n): void {\n  if (!(value instanceof Array) || value.length < minNumberOfElements) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${name} argument to be an ` +\n        'array with at least ' +\n        `${formatPlural(minNumberOfElements, 'element')}.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument has the native JavaScript type\n * using typeof checks.\n */\nexport function validateArgType(\n  functionName: string,\n  type: string,\n  position: number,\n  argument: AnyJs\n): void {\n  validateType(functionName, type, `${ordinal(position)} argument`, argument);\n}\n\n/**\n * Validates the provided argument has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateOptionalArgType(\n  functionName: string,\n  type: string,\n  position: number,\n  argument: AnyJs\n): void {\n  if (argument !== undefined) {\n    validateArgType(functionName, type, position, argument);\n  }\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks.\n */\nexport function validateNamedType(\n  functionName: string,\n  type: string,\n  optionName: string,\n  argument: AnyJs\n) {\n  validateType(functionName, type, `${optionName} option`, argument);\n}\n\n/**\n * Validates the provided named option has the native JavaScript type using\n * typeof checks or is undefined.\n */\nexport function validateNamedOptionalType(\n  functionName: string,\n  type: string,\n  optionName: string,\n  argument: AnyJs\n) {\n  if (argument !== undefined) {\n    validateNamedType(functionName, type, optionName, argument);\n  }\n}\n\n/** Helper to validate the type of a provided input. */\nfunction validateType(\n  functionName: string,\n  type: string,\n  inputName: string,\n  input: AnyJs\n) {\n  if (typeof input !== type || (type === 'object' && !isPlainObject(input))) {\n    const description = valueDescription(input);\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires its ${inputName} ` +\n        `to be of type ${type}, but it was: ${description}`\n    );\n  }\n}\n\n/**\n * Returns true iff it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nexport function isPlainObject(input: AnyJs) {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    Object.getPrototypeOf(input) === Object.prototype\n  );\n}\n\n/** Returns a string describing the type / value of the provided input. */\nexport function valueDescription(input: AnyJs) {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail('Unknown wrong type: ' + typeof input);\n  }\n}\n\n/** Hacky method to try to get the constructor name for an object. */\nexport function tryGetCustomObjectType(input: object): string | null {\n  if (input.constructor) {\n    const funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    const results = funcNameRegex.exec(input.constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n  return null;\n}\n\n/** Validates the provided argument is defined. */\nexport function validateDefined(\n  functionName: string,\n  position: number,\n  argument: AnyJs\n): void {\n  if (argument === undefined) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Function ${functionName}() requires a valid ${ordinal(position)} ` +\n        `argument, but it was undefined.`\n    );\n  }\n}\n\n/**\n * Validates the provided positional argument is an object, and its keys and\n * values match the expected keys and types provided in optionTypes.\n */\nexport function validateOptionNames(\n  functionName: string,\n  options: object,\n  optionNames: string[]\n) {\n  obj.forEach(options as obj.Dict<AnyJs>, (key, _) => {\n    if (optionNames.indexOf(key) < 0) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        `Unknown option '${key}' passed to function ${functionName}(). ` +\n          'Available options: ' +\n          optionNames.join(', ')\n      );\n    }\n  });\n}\n\n/**\n * Helper method to throw an error that the provided argument did not pass\n * an instanceof check.\n */\nexport function invalidClassError(\n  functionName: string,\n  type: string,\n  position: number,\n  argument: AnyJs\n): Error {\n  const description = valueDescription(argument);\n  return new FirestoreError(\n    Code.INVALID_ARGUMENT,\n    `Function ${functionName}() requires its ${ordinal(position)} ` +\n      `argument to be a ${type}, but it was: ${description}`\n  );\n}\n\n/** Converts a number to its english word representation */\nfunction ordinal(num: number) {\n  switch (num) {\n    case 1:\n      return 'first';\n    case 2:\n      return 'second';\n    case 3:\n      return 'third';\n    default:\n      return num + 'th';\n  }\n}\n\n/**\n * Formats the given word as plural conditionally given the preceding number.\n */\nfunction formatPlural(num: number, str: string) {\n  return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n"]},"metadata":{},"sourceType":"module"}