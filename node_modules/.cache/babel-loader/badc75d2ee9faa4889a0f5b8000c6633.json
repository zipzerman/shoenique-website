{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-console */\nimport { SDK_VERSION } from '../core/version';\nimport { PlatformSupport } from '../platform/platform';\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\n\nvar logLevel = LogLevel.ERROR; // Helper methods are needed because variables can't be exported as read/write\n\nexport function getLogLevel() {\n  return logLevel;\n}\nexport function setLogLevel(newLevel) {\n  logLevel = newLevel;\n}\nexport function debug(tag, msg) {\n  var obj = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    obj[_i - 2] = arguments[_i];\n  }\n\n  if (logLevel <= LogLevel.DEBUG) {\n    var time = new Date().toISOString();\n    var args = obj.map(argToString);\n    console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\n  }\n}\nexport function error(msg) {\n  var obj = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    obj[_i - 1] = arguments[_i];\n  }\n\n  if (logLevel <= LogLevel.ERROR) {\n    var time = new Date().toISOString();\n    var args = obj.map(argToString);\n    console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\n  }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\n\nfunction argToString(obj) {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    var platform = PlatformSupport.getPlatform();\n\n    try {\n      return platform.formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}","map":{"version":3,"sources":["../src/util/log.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;AAEH;AAEA,SAAS,WAAT,QAA4B,iBAA5B;AAEA,SAAS,eAAT,QAAgC,sBAAhC;AAEA,OAAA,IAAY,QAAZ;;AAAA,CAAA,UAAY,QAAZ,EAAoB;AAClB,EAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAY,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAApB;;AAMA,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAxB,C,CAEA;;AACA,OAAM,SAAA,WAAA,GAAA;AACJ,SAAO,QAAP;AACD;AACD,OAAM,SAAA,WAAA,CAAsB,QAAtB,EAAwC;AAC5C,EAAA,QAAQ,GAAG,QAAX;AACD;AAED,OAAM,SAAA,KAAA,CAAgB,GAAhB,EAA6B,GAA7B,EAAwC;AAAE,MAAA,GAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAe;AAAf,IAAA,GAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC9C,MAAI,QAAQ,IAAI,QAAQ,CAAC,KAAzB,EAAgC;AAC9B,QAAM,IAAI,GAAG,IAAI,IAAJ,GAAW,WAAX,EAAb;AACA,QAAM,IAAI,GAAG,GAAG,CAAC,GAAJ,CAAQ,WAAR,CAAb;AACA,IAAA,OAAO,CAAC,GAAR,CAAW,KAAX,CAAA,OAAA,EAAO,CAAK,gBAAc,WAAd,GAAyB,IAAzB,GAA8B,IAA9B,GAAkC,IAAlC,GAAuC,GAAvC,GAA0C,KAA1C,GAAgD,GAArD,EAA0D,MAA1D,CAA+D,IAA/D,CAAP;AACD;AACF;AAED,OAAM,SAAA,KAAA,CAAgB,GAAhB,EAA2B;AAAE,MAAA,GAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAe;AAAf,IAAA,GAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACjC,MAAI,QAAQ,IAAI,QAAQ,CAAC,KAAzB,EAAgC;AAC9B,QAAM,IAAI,GAAG,IAAI,IAAJ,GAAW,WAAX,EAAb;AACA,QAAM,IAAI,GAAG,GAAG,CAAC,GAAJ,CAAQ,WAAR,CAAb;AACA,IAAA,OAAO,CAAC,KAAR,CAAa,KAAb,CAAA,OAAA,EAAO,CAAO,gBAAc,WAAd,GAAyB,IAAzB,GAA8B,IAA9B,GAAkC,IAAlC,GAAuC,GAA9C,EAAmD,MAAnD,CAAwD,IAAxD,CAAP;AACD;AACF;AAED;;AAEG;;AACH,SAAA,WAAA,CAAqB,GAArB,EAA+B;AAC7B,MAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAO,GAAP;AACD,GAFD,MAEO;AACL,QAAM,QAAQ,GAAG,eAAe,CAAC,WAAhB,EAAjB;;AACA,QAAI;AACF,aAAO,QAAQ,CAAC,UAAT,CAAoB,GAApB,CAAP;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA,aAAO,GAAP;AACD;AACF;AACF","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-console */\n\nimport { SDK_VERSION } from '../core/version';\nimport { AnyJs } from './misc';\nimport { PlatformSupport } from '../platform/platform';\n\nexport enum LogLevel {\n  DEBUG,\n  ERROR,\n  SILENT\n}\n\nlet logLevel = LogLevel.ERROR;\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function getLogLevel(): LogLevel {\n  return logLevel;\n}\nexport function setLogLevel(newLevel: LogLevel): void {\n  logLevel = newLevel;\n}\n\nexport function debug(tag: string, msg: string, ...obj: AnyJs[]): void {\n  if (logLevel <= LogLevel.DEBUG) {\n    const time = new Date().toISOString();\n    const args = obj.map(argToString);\n    console.log(`Firestore (${SDK_VERSION}) ${time} [${tag}]: ${msg}`, ...args);\n  }\n}\n\nexport function error(msg: string, ...obj: AnyJs[]): void {\n  if (logLevel <= LogLevel.ERROR) {\n    const time = new Date().toISOString();\n    const args = obj.map(argToString);\n    console.error(`Firestore (${SDK_VERSION}) ${time}: ${msg}`, ...args);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj: AnyJs): string | AnyJs {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    const platform = PlatformSupport.getPlatform();\n    try {\n      return platform.formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}