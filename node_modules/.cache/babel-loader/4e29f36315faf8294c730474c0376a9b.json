{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nvar User =\n/** @class */\nfunction () {\n  function User(uid) {\n    this.uid = uid;\n  }\n\n  User.prototype.isUnauthenticated = function () {\n    return this.uid == null;\n  };\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n\n\n  User.prototype.toKey = function () {\n    if (this.isUnauthenticated()) {\n      return 'anonymous-user';\n    } else {\n      return 'uid:' + this.uid;\n    }\n  };\n\n  User.prototype.equals = function (otherUser) {\n    return otherUser.uid === this.uid;\n  };\n  /** A user with a null UID. */\n\n\n  User.UNAUTHENTICATED = new User(null); // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n\n  User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  User.FIRST_PARTY = new User('first-party-uid');\n  return User;\n}();\n\nexport { User };","map":{"version":3,"sources":["../src/auth/user.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;AAEH;;;AAGG;AACH,IAAA,IAAA;AAAA;AAAA,YAAA;AASE,WAAA,IAAA,CAAqB,GAArB,EAAuC;AAAlB,SAAA,GAAA,GAAA,GAAA;AAAsB;;AAE3C,EAAA,IAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;AACE,WAAO,KAAK,GAAL,IAAY,IAAnB;AACD,GAFD;AAIA;;;AAGG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,QAAI,KAAK,iBAAL,EAAJ,EAA8B;AAC5B,aAAO,gBAAP;AACD,KAFD,MAEO;AACL,aAAO,SAAS,KAAK,GAArB;AACD;AACF,GAND;;AAQA,EAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,SAAP,EAAsB;AACpB,WAAO,SAAS,CAAC,GAAV,KAAkB,KAAK,GAA9B;AACD,GAFD;AA1BA;;;AACgB,EAAA,IAAA,CAAA,eAAA,GAAkB,IAAI,IAAJ,CAAS,IAAT,CAAlB,CAFlB,CAIE;AACA;;AACgB,EAAA,IAAA,CAAA,kBAAA,GAAqB,IAAI,IAAJ,CAAS,wBAAT,CAArB;AACA,EAAA,IAAA,CAAA,WAAA,GAAc,IAAI,IAAJ,CAAS,iBAAT,CAAd;AAuBlB,SAAA,IAAA;AAAC,CA9BD,EAAA;;SAAa,I","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nexport class User {\n  /** A user with a null UID. */\n  static readonly UNAUTHENTICATED = new User(null);\n\n  // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n  static readonly GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  static readonly FIRST_PARTY = new User('first-party-uid');\n\n  constructor(readonly uid: string | null) {}\n\n  isUnauthenticated(): boolean {\n    return this.uid == null;\n  }\n\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey(): string {\n    if (this.isUnauthenticated()) {\n      return 'anonymous-user';\n    } else {\n      return 'uid:' + this.uid;\n    }\n  }\n\n  equals(otherUser: User): boolean {\n    return otherUser.uid === this.uid;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}