{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { makeConstructorPrivate } from '../util/api';\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\n\nvar FieldValueImpl =\n/** @class */\nfunction () {\n  function FieldValueImpl() {}\n\n  FieldValueImpl.delete = function () {\n    return DeleteFieldValueImpl.instance;\n  };\n\n  FieldValueImpl.serverTimestamp = function () {\n    return ServerTimestampFieldValueImpl.instance;\n  };\n\n  return FieldValueImpl;\n}();\n\nexport { FieldValueImpl };\n\nvar DeleteFieldValueImpl =\n/** @class */\nfunction (_super) {\n  __extends(DeleteFieldValueImpl, _super);\n\n  function DeleteFieldValueImpl() {\n    return _super.call(this) || this;\n  }\n  /** Singleton instance. */\n\n\n  DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n  return DeleteFieldValueImpl;\n}(FieldValueImpl);\n\nexport { DeleteFieldValueImpl };\n\nvar ServerTimestampFieldValueImpl =\n/** @class */\nfunction (_super) {\n  __extends(ServerTimestampFieldValueImpl, _super);\n\n  function ServerTimestampFieldValueImpl() {\n    return _super.call(this) || this;\n  }\n  /** Singleton instance. */\n\n\n  ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n  return ServerTimestampFieldValueImpl;\n}(FieldValueImpl);\n\nexport { ServerTimestampFieldValueImpl }; // Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\n\nexport var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');","map":{"version":3,"sources":["../src/api/field_value.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;;;;;;;;;;;;;;;;;;;;AAIH,SAAS,sBAAT,QAAuC,aAAvC;AAEA;;;AAGG;AACH;;AACA,IAAA,cAAA;AAAA;AAAA,YAAA;AAAA,WAAA,cAAA,GAAA,CAOC;;AANQ,EAAA,cAAA,CAAA,MAAA,GAAP,YAAA;AACE,WAAO,oBAAoB,CAAC,QAA5B;AACD,GAFM;;AAGA,EAAA,cAAA,CAAA,eAAA,GAAP,YAAA;AACE,WAAO,6BAA6B,CAAC,QAArC;AACD,GAFM;;AAGT,SAAA,cAAA;AAAC,CAPD,EAAA;;;;AASA,IAAA,oBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;;AACxC,WAAA,oBAAA,GAAA;WACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,I;AACR;AACD;;;AACO,EAAA,oBAAA,CAAA,QAAA,GAAW,IAAI,oBAAJ,EAAX;AACT,SAAA,oBAAA;AAAC,CAND,CAA0C,cAA1C,CAAA;;SAAa,oB;;AAQb,IAAA,6BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmD,EAAA,SAAA,CAAA,6BAAA,EAAA,MAAA,CAAA;;AACjD,WAAA,6BAAA,GAAA;WACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,I;AACR;AACD;;;AACO,EAAA,6BAAA,CAAA,QAAA,GAAW,IAAI,6BAAJ,EAAX;AACT,SAAA,6BAAA;AAAC,CAND,CAAmD,cAAnD,CAAA;;SAAa,6B,IAQb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAM,gBAAgB,GAAG,sBAAsB,CACpD,cADoD,EAEpD,mCAFoD,CAA/C","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from 'firestore';\n\nimport { makeConstructorPrivate } from '../util/api';\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nexport abstract class FieldValueImpl implements firestore.FieldValue {\n  static delete(): FieldValueImpl {\n    return DeleteFieldValueImpl.instance;\n  }\n  static serverTimestamp(): FieldValueImpl {\n    return ServerTimestampFieldValueImpl.instance;\n  }\n}\n\nexport class DeleteFieldValueImpl extends FieldValueImpl {\n  private constructor() {\n    super();\n  }\n  /** Singleton instance. */\n  static instance = new DeleteFieldValueImpl();\n}\n\nexport class ServerTimestampFieldValueImpl extends FieldValueImpl {\n  private constructor() {\n    super();\n  }\n  /** Singleton instance. */\n  static instance = new ServerTimestampFieldValueImpl();\n}\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nexport const PublicFieldValue = makeConstructorPrivate(\n  FieldValueImpl,\n  'Use FieldValue.<field>() instead.'\n);\n"]},"metadata":{},"sourceType":"module"}