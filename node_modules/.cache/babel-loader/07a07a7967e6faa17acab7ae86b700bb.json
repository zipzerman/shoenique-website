{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\n\nvar StreamBridge =\n/** @class */\nfunction () {\n  function StreamBridge(args) {\n    this.wrappedOnOpen = null;\n    this.wrappedOnClose = null;\n    this.wrappedOnMessage = null;\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n\n  StreamBridge.prototype.onOpen = function (callback) {\n    assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n    this.wrappedOnOpen = callback;\n  };\n\n  StreamBridge.prototype.onClose = function (callback) {\n    assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n    this.wrappedOnClose = callback;\n  };\n\n  StreamBridge.prototype.onMessage = function (callback) {\n    assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n    this.wrappedOnMessage = callback;\n  };\n\n  StreamBridge.prototype.close = function () {\n    this.closeFn();\n  };\n\n  StreamBridge.prototype.send = function (msg) {\n    this.sendFn(msg);\n  };\n\n  StreamBridge.prototype.callOnOpen = function () {\n    assert(this.wrappedOnOpen !== null, 'Cannot call onOpen because no callback ' + 'was set');\n    this.wrappedOnOpen();\n  };\n\n  StreamBridge.prototype.callOnClose = function (err) {\n    assert(this.wrappedOnClose !== null, 'Cannot call onClose because no ' + 'callback was set');\n    this.wrappedOnClose(err);\n  };\n\n  StreamBridge.prototype.callOnMessage = function (msg) {\n    assert(this.wrappedOnMessage !== null, 'Cannot call onMessage because no ' + 'callback was set');\n    this.wrappedOnMessage(msg);\n  };\n\n  return StreamBridge;\n}();\n\nexport { StreamBridge };","map":{"version":3,"sources":["../src/remote/stream_bridge.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,MAAT,QAAuB,gBAAvB;AAMA;;;;AAIG;;AACH,IAAA,YAAA;AAAA;AAAA,YAAA;AAQE,WAAA,YAAA,CAAY,IAAZ,EAAmE;AAP3D,SAAA,aAAA,GAA4B,IAA5B;AACA,SAAA,cAAA,GAAiD,IAAjD;AACA,SAAA,gBAAA,GAAqC,IAArC;AAMN,SAAK,MAAL,GAAc,IAAI,CAAC,MAAnB;AACA,SAAK,OAAL,GAAe,IAAI,CAAC,OAApB;AACD;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,QAAP,EAA2B;AACzB,IAAA,MAAM,CAAC,CAAC,KAAK,aAAP,EAAsB,gCAAtB,CAAN;AACA,SAAK,aAAL,GAAqB,QAArB;AACD,GAHD;;AAKA,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,QAAR,EAAgD;AAC9C,IAAA,MAAM,CAAC,CAAC,KAAK,cAAP,EAAuB,iCAAvB,CAAN;AACA,SAAK,cAAL,GAAsB,QAAtB;AACD,GAHD;;AAKA,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,QAAV,EAAoC;AAClC,IAAA,MAAM,CAAC,CAAC,KAAK,gBAAP,EAAyB,mCAAzB,CAAN;AACA,SAAK,gBAAL,GAAwB,QAAxB;AACD,GAHD;;AAKA,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,SAAK,OAAL;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,GAAL,EAAW;AACT,SAAK,MAAL,CAAY,GAAZ;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,IAAA,MAAM,CACJ,KAAK,aAAL,KAAuB,IADnB,EAEJ,4CAA4C,SAFxC,CAAN;AAIA,SAAK,aAAL;AACD,GAND;;AAQA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,GAAZ,EAAgC;AAC9B,IAAA,MAAM,CACJ,KAAK,cAAL,KAAwB,IADpB,EAEJ,oCAAoC,kBAFhC,CAAN;AAIA,SAAK,cAAL,CAAoB,GAApB;AACD,GAND;;AAQA,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,GAAd,EAAoB;AAClB,IAAA,MAAM,CACJ,KAAK,gBAAL,KAA0B,IADtB,EAEJ,sCAAsC,kBAFlC,CAAN;AAIA,SAAK,gBAAL,CAAsB,GAAtB;AACD,GAND;;AAOF,SAAA,YAAA;AAAC,CA3DD,EAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { AnyJs } from '../util/misc';\n\nimport { Stream } from './connection';\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nexport class StreamBridge<I, O> implements Stream<I, O> {\n  private wrappedOnOpen: () => void = null as any;\n  private wrappedOnClose: (err?: FirestoreError) => void = null as any;\n  private wrappedOnMessage: (msg: O) => void = null as any;\n\n  private sendFn: (msg: I) => void;\n  private closeFn: () => void;\n\n  constructor(args: { sendFn: (msg: I) => void; closeFn: () => void }) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n\n  onOpen(callback: () => void): void {\n    assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n    this.wrappedOnOpen = callback;\n  }\n\n  onClose(callback: (err?: FirestoreError) => void): void {\n    assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n    this.wrappedOnClose = callback;\n  }\n\n  onMessage(callback: (msg: O) => void): void {\n    assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n    this.wrappedOnMessage = callback;\n  }\n\n  close(): void {\n    this.closeFn();\n  }\n\n  send(msg: I): void {\n    this.sendFn(msg);\n  }\n\n  callOnOpen(): void {\n    assert(\n      this.wrappedOnOpen !== null,\n      'Cannot call onOpen because no callback ' + 'was set'\n    );\n    this.wrappedOnOpen();\n  }\n\n  callOnClose(err?: FirestoreError): void {\n    assert(\n      this.wrappedOnClose !== null,\n      'Cannot call onClose because no ' + 'callback was set'\n    );\n    this.wrappedOnClose(err);\n  }\n\n  callOnMessage(msg: O): void {\n    assert(\n      this.wrappedOnMessage !== null,\n      'Cannot call onMessage because no ' + 'callback was set'\n    );\n    this.wrappedOnMessage(msg);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}