{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert';\nexport function contains(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function get(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\nexport function size(obj) {\n  var count = 0;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n\n  return count;\n}\n/** Returns the given value if it's defined or the defaultValue otherwise. */\n\nexport function defaulted(value, defaultValue) {\n  return value !== undefined ? value : defaultValue;\n}\nexport function forEachNumber(obj, fn) {\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var num = parseInt(key, 10);\n\n      if (!isNaN(num)) {\n        fn(num, obj[key]);\n      }\n    }\n  }\n}\nexport function forEach(obj, fn) {\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\nexport function lookupOrInsert(obj, key, valFn) {\n  if (!contains(obj, key)) {\n    obj[key] = valFn();\n  }\n\n  return obj[key];\n}\nexport function isEmpty(obj) {\n  assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function shallowCopy(obj) {\n  assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');\n  var result = {};\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      result[key] = obj[key];\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../src/util/obj.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,MAAT,QAAuB,UAAvB;AAOA,OAAM,SAAA,QAAA,CAAsB,GAAtB,EAAoC,GAApC,EAAwD;AAC5D,SAAO,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,GAArC,EAA0C,GAA1C,CAAP;AACD;AAED,OAAM,SAAA,GAAA,CAAiB,GAAjB,EAA+B,GAA/B,EAAmD;AACvD,SAAO,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,GAArC,EAA0C,GAA1C,IAAiD,GAAG,CAAC,GAAD,CAApD,GAA4D,IAAnE;AACD;AAED,OAAM,SAAA,IAAA,CAAkB,GAAlB,EAA8B;AAClC,MAAI,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAM,GAAX,IAAkB,GAAlB,EAAuB;AACrB,QAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,GAArC,EAA0C,GAA1C,CAAJ,EAAoD;AAClD,MAAA,KAAK;AACN;AACF;;AACD,SAAO,KAAP;AACD;AAED;;AACA,OAAM,SAAA,SAAA,CAAuB,KAAvB,EAA6C,YAA7C,EAA4D;AAChE,SAAO,KAAK,KAAK,SAAV,GAAsB,KAAtB,GAA8B,YAArC;AACD;AAED,OAAM,SAAA,aAAA,CACJ,GADI,EAEJ,EAFI,EAE6B;AAEjC,OAAK,IAAM,GAAX,IAAkB,GAAlB,EAAuB;AACrB,QAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,GAArC,EAA0C,GAA1C,CAAJ,EAAoD;AAClD,UAAM,GAAG,GAAG,QAAQ,CAAC,GAAD,EAAM,EAAN,CAApB;;AACA,UAAI,CAAC,KAAK,CAAC,GAAD,CAAV,EAAiB;AACf,QAAA,EAAE,CAAC,GAAD,EAAM,GAAG,CAAC,GAAD,CAAT,CAAF;AACD;AACF;AACF;AACF;AAED,OAAM,SAAA,OAAA,CACJ,GADI,EAEJ,EAFI,EAE6B;AAEjC,OAAK,IAAM,GAAX,IAAkB,GAAlB,EAAuB;AACrB,QAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,GAArC,EAA0C,GAA1C,CAAJ,EAAoD;AAClD,MAAA,EAAE,CAAC,GAAD,EAAM,GAAG,CAAC,GAAD,CAAT,CAAF;AACD;AACF;AACF;AAED,OAAM,SAAA,cAAA,CACJ,GADI,EAEJ,GAFI,EAGJ,KAHI,EAGU;AAEd,MAAI,CAAC,QAAQ,CAAC,GAAD,EAAM,GAAN,CAAb,EAAyB;AACvB,IAAA,GAAG,CAAC,GAAD,CAAH,GAAW,KAAK,EAAhB;AACD;;AACD,SAAO,GAAG,CAAC,GAAD,CAAV;AACD;AAED,OAAM,SAAA,OAAA,CAAqB,GAArB,EAAiC;AACrC,EAAA,MAAM,CACJ,GAAG,IAAI,IAAP,IAAe,OAAO,GAAP,KAAe,QAD1B,EAEJ,qCAFI,CAAN;;AAIA,OAAK,IAAM,GAAX,IAAkB,GAAlB,EAAuB;AACrB,QAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,GAArC,EAA0C,GAA1C,CAAJ,EAAoD;AAClD,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED,OAAM,SAAA,WAAA,CAAyB,GAAzB,EAAqC;AACzC,EAAA,MAAM,CACJ,GAAG,IAAI,OAAO,GAAP,KAAe,QADlB,EAEJ,yCAFI,CAAN;AAIA,MAAM,MAAM,GAAY,EAAxB;;AACA,OAAK,IAAM,GAAX,IAAkB,GAAlB,EAAuB;AACrB,QAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,GAArC,EAA0C,GAA1C,CAAJ,EAAoD;AAClD,MAAA,MAAM,CAAC,GAAD,CAAN,GAAc,GAAG,CAAC,GAAD,CAAjB;AACD;AACF;;AACD,SAAO,MAAP;AACD","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\nexport interface Dict<V> {\n  [stringKey: string]: V;\n  [numberKey: number]: V;\n}\n\nexport function contains<V>(obj: Dict<V>, key: string | number): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function get<V>(obj: Dict<V>, key: string | number): V | null {\n  return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\n\nexport function size<V>(obj: Dict<V>): number {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nexport function defaulted<V>(value: V | undefined, defaultValue: V): V {\n  return value !== undefined ? value : defaultValue;\n}\n\nexport function forEachNumber<V>(\n  obj: Dict<V>,\n  fn: (key: number, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const num = parseInt(key, 10);\n      if (!isNaN(num)) {\n        fn(num, obj[key]);\n      }\n    }\n  }\n}\n\nexport function forEach<V>(\n  obj: Dict<V>,\n  fn: (key: string, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nexport function lookupOrInsert<V>(\n  obj: Dict<V>,\n  key: string | number,\n  valFn: () => V\n): V {\n  if (!contains(obj, key)) {\n    obj[key] = valFn();\n  }\n  return obj[key];\n}\n\nexport function isEmpty<V>(obj: Dict<V>) {\n  assert(\n    obj != null && typeof obj === 'object',\n    'isEmpty() expects object parameter.'\n  );\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function shallowCopy<V>(obj: Dict<V>): Dict<V> {\n  assert(\n    obj && typeof obj === 'object',\n    'shallowCopy() expects object parameter.'\n  );\n  const result: Dict<V> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      result[key] = obj[key];\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}