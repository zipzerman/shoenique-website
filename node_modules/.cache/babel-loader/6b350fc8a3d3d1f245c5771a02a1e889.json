{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\n\nvar RpcCode;\n\n(function (RpcCode) {\n  RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n  RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n  RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n  RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\n\nexport function isPermanentError(code) {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE: // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    // TODO(b/37325376): Give up after second unauthenticated error.\n\n    case Code.UNAUTHENTICATED:\n      return false;\n\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION: // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\n\nexport function mapCodeFromRpcStatus(status) {\n  // tslint:disable-next-line:no-any lookup by string\n  var code = RpcCode[status];\n\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\n\nexport function mapCodeFromRpcCode(code) {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    log.error('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\n\nexport function mapRpcCodeFromCode(code) {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\n\nexport function mapCodeFromHttpStatus(status) {\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200:\n      // OK\n      return Code.OK;\n\n    case 400:\n      // Bad Request\n      return Code.INVALID_ARGUMENT;\n    // Other possibilities based on the forward mapping\n    // return Code.FAILED_PRECONDITION;\n    // return Code.OUT_OF_RANGE;\n\n    case 401:\n      // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403:\n      // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404:\n      // Not Found\n      return Code.NOT_FOUND;\n\n    case 409:\n      // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416:\n      // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429:\n      // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499:\n      // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500:\n      // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501:\n      // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503:\n      // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504:\n      // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) return Code.OK;\n      if (status >= 400 && status < 500) return Code.FAILED_PRECONDITION;\n      if (status >= 500 && status < 600) return Code.INTERNAL;\n      return Code.UNKNOWN;\n  }\n}","map":{"version":3,"sources":["../src/remote/rpc_error.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\nimport * as log from '../util/log';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    // TODO(b/37325376): Give up after second unauthenticated error.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // tslint:disable-next-line:no-any lookup by string\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number | undefined): Code {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    log.error('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status: number): Code {\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.INVALID_ARGUMENT;\n    // Other possibilities based on the forward mapping\n    // return Code.FAILED_PRECONDITION;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) return Code.OK;\n      if (status >= 400 && status < 500) return Code.FAILED_PRECONDITION;\n      if (status >= 500 && status < 600) return Code.INTERNAL;\n      return Code.UNKNOWN;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}