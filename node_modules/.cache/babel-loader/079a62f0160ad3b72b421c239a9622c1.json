{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar stringToByteArray = function stringToByteArray(str) {\n  var output = [],\n      p = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n\n    while (c > 255) {\n      output[p++] = c & 255;\n      c >>= 8;\n    }\n\n    output[p++] = c;\n  }\n\n  return output;\n};\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param {Array<number>} bytes Array of numbers representing characters.\n * @return {string} Stringification of the array.\n */\n\n\nvar byteArrayToString = function byteArrayToString(bytes) {\n  var CHUNK_SIZE = 8192; // Special-case the simple case for speed's sake.\n\n  if (bytes.length < CHUNK_SIZE) {\n    return String.fromCharCode.apply(null, bytes);\n  } // The remaining logic splits conversion by chunks since\n  // Function#apply() has a maximum parameter count.\n  // See discussion: http://goo.gl/LrWmZ9\n\n\n  var str = '';\n\n  for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {\n    var chunk = bytes.slice(i, i + CHUNK_SIZE);\n    str += String.fromCharCode.apply(null, chunk);\n  }\n\n  return str;\n}; // Static lookup maps, lazily populated by init_()\n\n\nexports.base64 = {\n  /**\n   * Maps bytes to characters.\n   * @type {Object}\n   * @private\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   * @type {Object}\n   * @private\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @type {Object}\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @type {Object}\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   * @type {string}\n   */\n  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   * @type {string}\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   * @type {string}\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   * @type {boolean}\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param {boolean=} opt_webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return {string} The base64 encoded string.\n   */\n  encodeByteArray: function encodeByteArray(input, opt_webSafe) {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n    var byteToCharMap = opt_webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;\n    var output = [];\n\n    for (var i = 0; i < input.length; i += 3) {\n      var byte1 = input[i];\n      var haveByte2 = i + 1 < input.length;\n      var byte2 = haveByte2 ? input[i + 1] : 0;\n      var haveByte3 = i + 2 < input.length;\n      var byte3 = haveByte3 ? input[i + 2] : 0;\n      var outByte1 = byte1 >> 2;\n      var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;\n      var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;\n      var outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param {string} input A string to encode.\n   * @param {boolean=} opt_webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return {string} The base64 encoded string.\n   */\n  encodeString: function encodeString(input, opt_webSafe) {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\n      return btoa(input);\n    }\n\n    return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param {string} input to decode.\n   * @param {boolean=} opt_webSafe True if we should use the\n   *     alternative alphabet.\n   * @return {string} string representing the decoded value.\n   */\n  decodeString: function decodeString(input, opt_webSafe) {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\n      return atob(input);\n    }\n\n    return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param {string} input Input to decode.\n   * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\n   * @return {!Array<number>} bytes representing the decoded value.\n   */\n  decodeStringToByteArray: function decodeStringToByteArray(input, opt_webSafe) {\n    this.init_();\n    var charToByteMap = opt_webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;\n    var output = [];\n\n    for (var i = 0; i < input.length;) {\n      var byte1 = charToByteMap[input.charAt(i++)];\n      var haveByte2 = i < input.length;\n      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n      var haveByte3 = i < input.length;\n      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n      var haveByte4 = i < input.length;\n      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      var outByte1 = byte1 << 2 | byte2 >> 4;\n      output.push(outByte1);\n\n      if (byte3 != 64) {\n        var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;\n        output.push(outByte2);\n\n        if (byte4 != 64) {\n          var outByte3 = byte3 << 6 & 0xc0 | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_: function init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {}; // We want quick mappings back and forth, so we precompute two maps.\n\n      for (var i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i; // Be forgiving when decoding and correctly decode both encodings.\n\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n/**\n * URL-safe base64 encoding\n * @param {!string} str\n * @return {!string}\n */\n\nexports.base64Encode = function (str) {\n  var utf8Bytes = stringToByteArray(str);\n  return exports.base64.encodeByteArray(utf8Bytes, true);\n};\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param {string} str To be decoded\n * @return {?string} Decoded result, if possible\n */\n\n\nexports.base64Decode = function (str) {\n  try {\n    return exports.base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n\n  return null;\n};","map":{"version":3,"sources":["../src/crypt.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function(str) {\n  var output = [],\n    p = 0;\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n    while (c > 255) {\n      output[p++] = c & 255;\n      c >>= 8;\n    }\n    output[p++] = c;\n  }\n  return output;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param {Array<number>} bytes Array of numbers representing characters.\n * @return {string} Stringification of the array.\n */\nconst byteArrayToString = function(bytes) {\n  var CHUNK_SIZE = 8192;\n\n  // Special-case the simple case for speed's sake.\n  if (bytes.length < CHUNK_SIZE) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n\n  // The remaining logic splits conversion by chunks since\n  // Function#apply() has a maximum parameter count.\n  // See discussion: http://goo.gl/LrWmZ9\n\n  var str = '';\n  for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {\n    var chunk = bytes.slice(i, i + CHUNK_SIZE);\n    str += String.fromCharCode.apply(null, chunk);\n  }\n  return str;\n};\n\n// Static lookup maps, lazily populated by init_()\nexport const base64 = {\n  /**\n   * Maps bytes to characters.\n   * @type {Object}\n   * @private\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   * @type {Object}\n   * @private\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @type {Object}\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @type {Object}\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   * @type {string}\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   * @type {string}\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   * @type {string}\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   * @type {boolean}\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param {boolean=} opt_webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return {string} The base64 encoded string.\n   */\n  encodeByteArray(input, opt_webSafe?) {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    var byteToCharMap = opt_webSafe\n      ? this.byteToCharMapWebSafe_\n      : this.byteToCharMap_;\n\n    var output = [];\n\n    for (var i = 0; i < input.length; i += 3) {\n      var byte1 = input[i];\n      var haveByte2 = i + 1 < input.length;\n      var byte2 = haveByte2 ? input[i + 1] : 0;\n      var haveByte3 = i + 2 < input.length;\n      var byte3 = haveByte3 ? input[i + 2] : 0;\n\n      var outByte1 = byte1 >> 2;\n      var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      var outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param {string} input A string to encode.\n   * @param {boolean=} opt_webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return {string} The base64 encoded string.\n   */\n  encodeString(input, opt_webSafe) {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param {string} input to decode.\n   * @param {boolean=} opt_webSafe True if we should use the\n   *     alternative alphabet.\n   * @return {string} string representing the decoded value.\n   */\n  decodeString(input, opt_webSafe) {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param {string} input Input to decode.\n   * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\n   * @return {!Array<number>} bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input, opt_webSafe) {\n    this.init_();\n\n    var charToByteMap = opt_webSafe\n      ? this.charToByteMapWebSafe_\n      : this.charToByteMap_;\n\n    var output = [];\n\n    for (var i = 0; i < input.length; ) {\n      var byte1 = charToByteMap[input.charAt(i++)];\n\n      var haveByte2 = i < input.length;\n      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      var haveByte3 = i < input.length;\n      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      var haveByte4 = i < input.length;\n      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      var outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 != 64) {\n        var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 != 64) {\n          var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (var i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n * @param {!string} str\n * @return {!string}\n */\nexport const base64Encode = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param {string} str To be decoded\n * @return {?string} Decoded result, if possible\n */\nexport const base64Decode = function(str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n"]},"metadata":{},"sourceType":"script"}