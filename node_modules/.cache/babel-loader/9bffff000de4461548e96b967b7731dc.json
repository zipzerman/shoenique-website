{"ast":null,"code":"import _slicedToArray from \"C:/Users/junecsnp/Desktop/JuneWeb+Shoe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { forwardRef, useRef, useMemo, useState, createElement } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: \"uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\",\n      fragmentShader: \"uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n      }\"\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false\n}, ref) => {\n  const material = useRef();\n\n  const _useMemo = useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]),\n        _useMemo2 = _slicedToArray(_useMemo, 3),\n        position = _useMemo2[0],\n        color = _useMemo2[1],\n        size = _useMemo2[2];\n\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()));\n\n  const _useState = useState(() => new StarfieldMaterial()),\n        _useState2 = _slicedToArray(_useState, 1),\n        starfieldMaterial = _useState2[0];\n\n  return /*#__PURE__*/createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"sources":["C:/Users/junecsnp/Desktop/JuneWeb+Shoe/node_modules/drei/Stars.js"],"names":["forwardRef","useRef","useMemo","useState","createElement","useFrame","Color","Vector3","Spherical","AdditiveBlending","ShaderMaterial","StarfieldMaterial","constructor","uniforms","time","value","fade","vertexShader","fragmentShader","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","radius","depth","count","saturation","factor","ref","material","positions","colors","sizes","Array","from","length","color","increment","i","push","toArray","setHSL","g","b","Float32Array","position","size","state","current","clock","getElapsedTime","starfieldMaterial","attach","attachObject","args","dispose","undefined","object","blending","transparent","vertexColors"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,OAA7B,EAAsCC,QAAtC,EAAgDC,aAAhD,QAAqE,OAArE;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,SAAzB,EAAoCC,gBAApC,EAAsDC,cAAtD,QAA4E,OAA5E;;AAEA,MAAMC,iBAAN,SAAgCD,cAAhC,CAA+C;AAC7CE,EAAAA,WAAW,GAAG;AACZ,UAAM;AACJC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAE;AADH,SADE;AAIRC,QAAAA,IAAI,EAAE;AACJD,UAAAA,KAAK,EAAE;AADH;AAJE,OADN;AASJE,MAAAA,YAAY,EAAE,qWATV;AAUJC,MAAAA,cAAc,EAAE;AAVZ,KAAN;AAYD;;AAd4C;;AAkB/C,MAAMC,OAAO,GAAGC,CAAC,IAAI;AACnB,SAAO,IAAIb,OAAJ,GAAcc,gBAAd,CAA+B,IAAIb,SAAJ,CAAcY,CAAd,EAAiBE,IAAI,CAACC,IAAL,CAAU,IAAID,IAAI,CAACE,MAAL,KAAgB,CAA9B,CAAjB,EAAmDF,IAAI,CAACE,MAAL,KAAgB,CAAhB,GAAoBF,IAAI,CAACG,EAA5E,CAA/B,CAAP;AACD,CAFD;;AAIA,MAAMC,KAAK,GAAG,aAAa1B,UAAU,CAAC,CAAC;AACrC2B,EAAAA,MAAM,GAAG,GAD4B;AAErCC,EAAAA,KAAK,GAAG,EAF6B;AAGrCC,EAAAA,KAAK,GAAG,IAH6B;AAIrCC,EAAAA,UAAU,GAAG,CAJwB;AAKrCC,EAAAA,MAAM,GAAG,CAL4B;AAMrCf,EAAAA,IAAI,GAAG;AAN8B,CAAD,EAOnCgB,GAPmC,KAO3B;AACT,QAAMC,QAAQ,GAAGhC,MAAM,EAAvB;;AADS,mBAEuBC,OAAO,CAAC,MAAM;AAC5C,UAAMgC,SAAS,GAAG,EAAlB;AACA,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAW;AACvBC,MAAAA,MAAM,EAAEV;AADe,KAAX,EAEX,MAAM,CAAC,MAAM,MAAMP,IAAI,CAACE,MAAL,EAAb,IAA8BO,MAFzB,CAAd;AAGA,UAAMS,KAAK,GAAG,IAAIlC,KAAJ,EAAd;AACA,QAAIc,CAAC,GAAGO,MAAM,GAAGC,KAAjB;AACA,UAAMa,SAAS,GAAGb,KAAK,GAAGC,KAA1B;;AAEA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,KAApB,EAA2Ba,CAAC,EAA5B,EAAgC;AAC9BtB,MAAAA,CAAC,IAAIqB,SAAS,GAAGnB,IAAI,CAACE,MAAL,EAAjB;AACAU,MAAAA,SAAS,CAACS,IAAV,CAAe,GAAGxB,OAAO,CAACC,CAAD,CAAP,CAAWwB,OAAX,EAAlB;AACAJ,MAAAA,KAAK,CAACK,MAAN,CAAaH,CAAC,GAAGb,KAAjB,EAAwBC,UAAxB,EAAoC,GAApC;AACAK,MAAAA,MAAM,CAACQ,IAAP,CAAYH,KAAK,CAACpB,CAAlB,EAAqBoB,KAAK,CAACM,CAA3B,EAA8BN,KAAK,CAACO,CAApC;AACD;;AAED,WAAO,CAAC,IAAIC,YAAJ,CAAiBd,SAAjB,CAAD,EAA8B,IAAIc,YAAJ,CAAiBb,MAAjB,CAA9B,EAAwD,IAAIa,YAAJ,CAAiBZ,KAAjB,CAAxD,CAAP;AACD,GAlBsC,EAkBpC,CAACP,KAAD,EAAQD,KAAR,EAAeG,MAAf,EAAuBJ,MAAvB,EAA+BG,UAA/B,CAlBoC,CAF9B;AAAA;AAAA,QAEFmB,QAFE;AAAA,QAEQT,KAFR;AAAA,QAEeU,IAFf;;AAqBT7C,EAAAA,QAAQ,CAAC8C,KAAK,IAAIlB,QAAQ,CAACmB,OAAT,KAAqBnB,QAAQ,CAACmB,OAAT,CAAiBvC,QAAjB,CAA0BC,IAA1B,CAA+BC,KAA/B,GAAuCoC,KAAK,CAACE,KAAN,CAAYC,cAAZ,EAA5D,CAAV,CAAR;;AArBS,oBAsBmBnD,QAAQ,CAAC,MAAM,IAAIQ,iBAAJ,EAAP,CAtB3B;AAAA;AAAA,QAsBF4C,iBAtBE;;AAuBT,SAAO,aAAanD,aAAa,CAAC,QAAD,EAAW;AAC1C4B,IAAAA,GAAG,EAAEA;AADqC,GAAX,EAE9B,aAAa5B,aAAa,CAAC,gBAAD,EAAmB;AAC9CoD,IAAAA,MAAM,EAAE;AADsC,GAAnB,EAE1B,aAAapD,aAAa,CAAC,iBAAD,EAAoB;AAC/CqD,IAAAA,YAAY,EAAE,CAAC,YAAD,EAAe,UAAf,CADiC;AAE/CC,IAAAA,IAAI,EAAE,CAACT,QAAD,EAAW,CAAX;AAFyC,GAApB,CAFA,EAKzB,aAAa7C,aAAa,CAAC,iBAAD,EAAoB;AAChDqD,IAAAA,YAAY,EAAE,CAAC,YAAD,EAAe,OAAf,CADkC;AAEhDC,IAAAA,IAAI,EAAE,CAAClB,KAAD,EAAQ,CAAR;AAF0C,GAApB,CALD,EAQzB,aAAapC,aAAa,CAAC,iBAAD,EAAoB;AAChDqD,IAAAA,YAAY,EAAE,CAAC,YAAD,EAAe,MAAf,CADkC;AAEhDC,IAAAA,IAAI,EAAE,CAACR,IAAD,EAAO,CAAP;AAF0C,GAApB,CARD,CAFI,EAa5B,aAAa9C,aAAa,CAAC,WAAD,EAAc;AAC3CuD,IAAAA,OAAO,EAAEC,SADkC;AAE3C5B,IAAAA,GAAG,EAAEC,QAFsC;AAG3C4B,IAAAA,MAAM,EAAEN,iBAHmC;AAI3CC,IAAAA,MAAM,EAAE,UAJmC;AAK3CM,IAAAA,QAAQ,EAAErD,gBALiC;AAM3C,2BAAuBO,IANoB;AAO3C+C,IAAAA,WAAW,EAAE,IAP8B;AAQ3CC,IAAAA,YAAY,EAAE;AAR6B,GAAd,CAbE,CAAjC;AAuBD,CArDoC,CAArC;AAuDA,SAAStC,KAAT","sourcesContent":["import { forwardRef, useRef, useMemo, useState, createElement } from 'react';\nimport { useFrame } from 'react-three-fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: \"uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\",\n      fragmentShader: \"uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n      }\"\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false\n}, ref) => {\n  const material = useRef();\n  const [position, color, size] = useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()));\n  const [starfieldMaterial] = useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/createElement(\"bufferGeometry\", {\n    attach: \"geometry\"\n  }, /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'position'],\n    args: [position, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'color'],\n    args: [color, 3]\n  }), /*#__PURE__*/createElement(\"bufferAttribute\", {\n    attachObject: ['attributes', 'size'],\n    args: [size, 1]\n  })), /*#__PURE__*/createElement(\"primitive\", {\n    dispose: undefined,\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"]},"metadata":{},"sourceType":"module"}