{"ast":null,"code":"import { useLayoutEffect } from 'react';\nimport { useThree, useLoader } from 'react-three-fiber';\nimport { PMREMGenerator, CubeTextureLoader } from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\n\nfunction getTexture(texture, gen, isCubeMap) {\n  if (isCubeMap) {\n    gen.compileEquirectangularShader();\n    return gen.fromCubemap(texture).texture;\n  }\n\n  return gen.fromEquirectangular(texture).texture;\n}\n\nfunction Environment({\n  background = false,\n  files = ['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'],\n  path = '/'\n}) {\n  const _useThree = useThree(),\n        gl = _useThree.gl,\n        scene = _useThree.scene;\n\n  const isCubeMap = Array.isArray(files);\n  const loader = isCubeMap ? CubeTextureLoader : RGBELoader; // @ts-expect-error\n\n  const loaderResult = useLoader(loader, isCubeMap ? [files] : files, loader => loader.setPath(path));\n  const map = isCubeMap ? loaderResult[0] : loaderResult;\n  useLayoutEffect(() => {\n    const gen = new PMREMGenerator(gl);\n    const texture = getTexture(map, gen, isCubeMap);\n    if (background) scene.background = texture;\n    scene.environment = texture;\n    map.dispose();\n    gen.dispose();\n    return () => {\n      scene.environment = scene.background = null;\n    };\n  }, [gl, map, isCubeMap, background, scene]);\n  return null;\n}\n\nexport { Environment };","map":{"version":3,"sources":["C:/Users/junecsnp/Desktop/JuneWeb+Shoe/node_modules/@react-three/drei/Environment.js"],"names":["useLayoutEffect","useThree","useLoader","PMREMGenerator","CubeTextureLoader","RGBELoader","getTexture","texture","gen","isCubeMap","compileEquirectangularShader","fromCubemap","fromEquirectangular","Environment","background","files","path","gl","scene","Array","isArray","loader","loaderResult","setPath","map","environment","dispose"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,mBAApC;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,OAAlD;AACA,SAASC,UAAT,QAA2B,uCAA3B;;AAEA,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,GAA7B,EAAkCC,SAAlC,EAA6C;AAC3C,MAAIA,SAAJ,EAAe;AACbD,IAAAA,GAAG,CAACE,4BAAJ;AACA,WAAOF,GAAG,CAACG,WAAJ,CAAgBJ,OAAhB,EAAyBA,OAAhC;AACD;;AAED,SAAOC,GAAG,CAACI,mBAAJ,CAAwBL,OAAxB,EAAiCA,OAAxC;AACD;;AAED,SAASM,WAAT,CAAqB;AACnBC,EAAAA,UAAU,GAAG,KADM;AAEnBC,EAAAA,KAAK,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD,QAAnD,CAFW;AAGnBC,EAAAA,IAAI,GAAG;AAHY,CAArB,EAIG;AAAA,oBAIGf,QAAQ,EAJX;AAAA,QAECgB,EAFD,aAECA,EAFD;AAAA,QAGCC,KAHD,aAGCA,KAHD;;AAKD,QAAMT,SAAS,GAAGU,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAlB;AACA,QAAMM,MAAM,GAAGZ,SAAS,GAAGL,iBAAH,GAAuBC,UAA/C,CANC,CAM0D;;AAE3D,QAAMiB,YAAY,GAAGpB,SAAS,CAACmB,MAAD,EAASZ,SAAS,GAAG,CAACM,KAAD,CAAH,GAAaA,KAA/B,EAAsCM,MAAM,IAAIA,MAAM,CAACE,OAAP,CAAeP,IAAf,CAAhD,CAA9B;AACA,QAAMQ,GAAG,GAAGf,SAAS,GAAGa,YAAY,CAAC,CAAD,CAAf,GAAqBA,YAA1C;AACAtB,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAMQ,GAAG,GAAG,IAAIL,cAAJ,CAAmBc,EAAnB,CAAZ;AACA,UAAMV,OAAO,GAAGD,UAAU,CAACkB,GAAD,EAAMhB,GAAN,EAAWC,SAAX,CAA1B;AACA,QAAIK,UAAJ,EAAgBI,KAAK,CAACJ,UAAN,GAAmBP,OAAnB;AAChBW,IAAAA,KAAK,CAACO,WAAN,GAAoBlB,OAApB;AACAiB,IAAAA,GAAG,CAACE,OAAJ;AACAlB,IAAAA,GAAG,CAACkB,OAAJ;AACA,WAAO,MAAM;AACXR,MAAAA,KAAK,CAACO,WAAN,GAAoBP,KAAK,CAACJ,UAAN,GAAmB,IAAvC;AACD,KAFD;AAGD,GAVc,EAUZ,CAACG,EAAD,EAAKO,GAAL,EAAUf,SAAV,EAAqBK,UAArB,EAAiCI,KAAjC,CAVY,CAAf;AAWA,SAAO,IAAP;AACD;;AAED,SAASL,WAAT","sourcesContent":["import { useLayoutEffect } from 'react';\nimport { useThree, useLoader } from 'react-three-fiber';\nimport { PMREMGenerator, CubeTextureLoader } from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\n\nfunction getTexture(texture, gen, isCubeMap) {\n  if (isCubeMap) {\n    gen.compileEquirectangularShader();\n    return gen.fromCubemap(texture).texture;\n  }\n\n  return gen.fromEquirectangular(texture).texture;\n}\n\nfunction Environment({\n  background = false,\n  files = ['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'],\n  path = '/'\n}) {\n  const {\n    gl,\n    scene\n  } = useThree();\n  const isCubeMap = Array.isArray(files);\n  const loader = isCubeMap ? CubeTextureLoader : RGBELoader; // @ts-expect-error\n\n  const loaderResult = useLoader(loader, isCubeMap ? [files] : files, loader => loader.setPath(path));\n  const map = isCubeMap ? loaderResult[0] : loaderResult;\n  useLayoutEffect(() => {\n    const gen = new PMREMGenerator(gl);\n    const texture = getTexture(map, gen, isCubeMap);\n    if (background) scene.background = texture;\n    scene.environment = texture;\n    map.dispose();\n    gen.dispose();\n    return () => {\n      scene.environment = scene.background = null;\n    };\n  }, [gl, map, isCubeMap, background, scene]);\n  return null;\n}\n\nexport { Environment };\n"]},"metadata":{},"sourceType":"module"}