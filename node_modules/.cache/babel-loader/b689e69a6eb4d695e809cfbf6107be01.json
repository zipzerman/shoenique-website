{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\n\nvar GeoPoint =\n/** @class */\nfunction () {\n  function GeoPoint(latitude, longitude) {\n    validateExactNumberOfArgs('GeoPoint', arguments, 2);\n    validateArgType('GeoPoint', 'number', 1, latitude);\n    validateArgType('GeoPoint', 'number', 2, longitude);\n\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n    }\n\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n    /**\n     * Returns the latitude of this geo point, a number between -90 and 90.\n     */\n    get: function get() {\n      return this._lat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n    /**\n     * Returns the longitude of this geo point, a number between -180 and 180.\n     */\n    get: function get() {\n      return this._long;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n\n  GeoPoint.prototype._equals = function (other) {\n    return this._lat === other._lat && this._long === other._long;\n  };\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n\n\n  GeoPoint.prototype._compareTo = function (other) {\n    return primitiveComparator(this._lat, other._lat) || primitiveComparator(this._long, other._long);\n  };\n\n  return GeoPoint;\n}();\n\nexport { GeoPoint };","map":{"version":3,"sources":["../src/api/geo_point.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,IAAT,EAAe,cAAf,QAAqC,eAArC;AACA,SACE,eADF,EAEE,yBAFF,QAGO,0BAHP;AAIA,SAAS,mBAAT,QAAoC,cAApC;AAEA;;;AAGG;;AACH,IAAA,QAAA;AAAA;AAAA,YAAA;AAME,WAAA,QAAA,CAAY,QAAZ,EAA8B,SAA9B,EAA+C;AAC7C,IAAA,yBAAyB,CAAC,UAAD,EAAa,SAAb,EAAwB,CAAxB,CAAzB;AACA,IAAA,eAAe,CAAC,UAAD,EAAa,QAAb,EAAuB,CAAvB,EAA0B,QAA1B,CAAf;AACA,IAAA,eAAe,CAAC,UAAD,EAAa,QAAb,EAAuB,CAAvB,EAA0B,SAA1B,CAAf;;AACA,QAAI,CAAC,QAAQ,CAAC,QAAD,CAAT,IAAuB,QAAQ,GAAG,CAAC,EAAnC,IAAyC,QAAQ,GAAG,EAAxD,EAA4D;AAC1D,YAAM,IAAI,cAAJ,CACJ,IAAI,CAAC,gBADD,EAEJ,4DAA4D,QAFxD,CAAN;AAID;;AACD,QAAI,CAAC,QAAQ,CAAC,SAAD,CAAT,IAAwB,SAAS,GAAG,CAAC,GAArC,IAA4C,SAAS,GAAG,GAA5D,EAAiE;AAC/D,YAAM,IAAI,cAAJ,CACJ,IAAI,CAAC,gBADD,EAEJ,+DAA+D,SAF3D,CAAN;AAID;;AAED,SAAK,IAAL,GAAY,QAAZ;AACA,SAAK,KAAL,GAAa,SAAb;AACD;;AAKD,EAAA,MAAA,CAAA,cAAA,CAAI,QAAA,CAAA,SAAJ,EAAI,UAAJ,EAAY;AAHZ;;AAEG;SACH,eAAA;AACE,aAAO,KAAK,IAAZ;AACD,KAFW;oBAAA;;AAAA,GAAZ;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,QAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;AAHb;;AAEG;SACH,eAAA;AACE,aAAO,KAAK,KAAZ;AACD,KAFY;oBAAA;;AAAA,GAAb;AAIA;;;AAGG;;AACI,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,KAAf,EAA8B;AAC5B,WAAO,KAAK,IAAL,KAAc,KAAK,CAAC,IAApB,IAA4B,KAAK,KAAL,KAAe,KAAK,CAAC,KAAxD;AACD,GAFM;AAIP;;;AAGG;;;AACI,EAAA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,KAAlB,EAAiC;AAC/B,WACE,mBAAmB,CAAC,KAAK,IAAN,EAAY,KAAK,CAAC,IAAlB,CAAnB,IACA,mBAAmB,CAAC,KAAK,KAAN,EAAa,KAAK,CAAC,KAAnB,CAFrB;AAID,GALM;;AAMT,SAAA,QAAA;AAAC,CA3DD,EAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nexport class GeoPoint {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion when typing latitude or longitude.\n  private _lat: number;\n  private _long: number;\n\n  constructor(latitude: number, longitude: number) {\n    validateExactNumberOfArgs('GeoPoint', arguments, 2);\n    validateArgType('GeoPoint', 'number', 1, latitude);\n    validateArgType('GeoPoint', 'number', 2, longitude);\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Latitude must be a number between -90 and 90, but was: ' + latitude\n      );\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Longitude must be a number between -180 and 180, but was: ' + longitude\n      );\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  /**\n   * Returns the latitude of this geo point, a number between -90 and 90.\n   */\n  get latitude(): number {\n    return this._lat;\n  }\n\n  /**\n   * Returns the longitude of this geo point, a number between -180 and 180.\n   */\n  get longitude(): number {\n    return this._long;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  public _equals(other: GeoPoint): boolean {\n    return this._lat === other._lat && this._long === other._long;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  public _compareTo(other: GeoPoint): number {\n    return (\n      primitiveComparator(this._lat, other._lat) ||\n      primitiveComparator(this._long, other._long)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}