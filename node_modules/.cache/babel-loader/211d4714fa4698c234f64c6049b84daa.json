{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { ResourcePath } from './path';\n\nvar DocumentKey =\n/** @class */\nfunction () {\n  function DocumentKey(path) {\n    this.path = path;\n    assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' + path.toArray().join('/'));\n  }\n\n  DocumentKey.prototype.equals = function (other) {\n    return other !== null && ResourcePath.comparator(this.path, other.path) === 0;\n  };\n\n  DocumentKey.prototype.toString = function () {\n    return this.path.toString();\n  };\n\n  DocumentKey.comparator = function (k1, k2) {\n    return ResourcePath.comparator(k1.path, k2.path);\n  };\n\n  DocumentKey.isDocumentKey = function (path) {\n    return path.length % 2 === 0;\n  };\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param path The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n\n\n  DocumentKey.fromSegments = function (segments) {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  };\n  /**\n   * Creates and returns a new document key using '/' to split the string into\n   * segments.\n   *\n   * @param path The slash-separated path string to the document\n   * @return A new instance of DocumentKey\n   */\n\n\n  DocumentKey.fromPathString = function (path) {\n    return new DocumentKey(ResourcePath.fromString(path));\n  };\n\n  DocumentKey.EMPTY = new DocumentKey(new ResourcePath([]));\n  return DocumentKey;\n}();\n\nexport { DocumentKey };","map":{"version":3,"sources":["../src/model/document_key.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,MAAT,QAAuB,gBAAvB;AAEA,SAAS,YAAT,QAA6B,QAA7B;;AAEA,IAAA,WAAA;AAAA;AAAA,YAAA;AACE,WAAA,WAAA,CAAqB,IAArB,EAAuC;AAAlB,SAAA,IAAA,GAAA,IAAA;AACnB,IAAA,MAAM,CACJ,WAAW,CAAC,aAAZ,CAA0B,IAA1B,CADI,EAEJ,yDACE,IAAI,CAAC,OAAL,GAAe,IAAf,CAAoB,GAApB,CAHE,CAAN;AAKD;;AAED,EAAA,WAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAAgC;AAC9B,WACE,KAAK,KAAK,IAAV,IAAkB,YAAY,CAAC,UAAb,CAAwB,KAAK,IAA7B,EAAmC,KAAK,CAAC,IAAzC,MAAmD,CADvE;AAGD,GAJD;;AAMA,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,KAAK,IAAL,CAAU,QAAV,EAAP;AACD,GAFD;;AAMO,EAAA,WAAA,CAAA,UAAA,GAAP,UAAkB,EAAlB,EAAmC,EAAnC,EAAkD;AAChD,WAAO,YAAY,CAAC,UAAb,CAAwB,EAAE,CAAC,IAA3B,EAAiC,EAAE,CAAC,IAApC,CAAP;AACD,GAFM;;AAIA,EAAA,WAAA,CAAA,aAAA,GAAP,UAAqB,IAArB,EAAuC;AACrC,WAAO,IAAI,CAAC,MAAL,GAAc,CAAd,KAAoB,CAA3B;AACD,GAFM;AAIP;;;;;AAKG;;;AACI,EAAA,WAAA,CAAA,YAAA,GAAP,UAAoB,QAApB,EAAsC;AACpC,WAAO,IAAI,WAAJ,CAAgB,IAAI,YAAJ,CAAiB,QAAQ,CAAC,KAAT,EAAjB,CAAhB,CAAP;AACD,GAFM;AAIP;;;;;;AAMG;;;AACI,EAAA,WAAA,CAAA,cAAA,GAAP,UAAsB,IAAtB,EAAkC;AAChC,WAAO,IAAI,WAAJ,CAAgB,YAAY,CAAC,UAAb,CAAwB,IAAxB,CAAhB,CAAP;AACD,GAFM;;AA3BA,EAAA,WAAA,CAAA,KAAA,GAAQ,IAAI,WAAJ,CAAgB,IAAI,YAAJ,CAAiB,EAAjB,CAAhB,CAAR;AA8BT,SAAA,WAAA;AAAC,CAjDD,EAAA;;SAAa,W","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    assert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  equals(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static EMPTY = new DocumentKey(new ResourcePath([]));\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param path The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n\n  /**\n   * Creates and returns a new document key using '/' to split the string into\n   * segments.\n   *\n   * @param path The slash-separated path string to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromPathString(path: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(path));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}