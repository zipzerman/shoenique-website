{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\n\nvar NoOpGarbageCollector =\n/** @class */\nfunction () {\n  function NoOpGarbageCollector() {\n    this.isEager = false;\n  }\n\n  NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {// Not tracking garbage so don't track sources.\n  };\n\n  NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {// Not tracking garbage so don't track sources.\n  };\n\n  NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {// Not tracking garbage so ignore.\n  };\n\n  NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n    return PersistencePromise.resolve(documentKeySet());\n  };\n\n  return NoOpGarbageCollector;\n}();\n\nexport { NoOpGarbageCollector };","map":{"version":3,"sources":["../src/local/no_op_garbage_collector.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAyB,cAAzB,QAA+C,sBAA/C;AAMA,SAAS,kBAAT,QAAmC,uBAAnC;AAEA;;;;AAIG;;AACH,IAAA,oBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,oBAAA,GAAA;AACW,SAAA,OAAA,GAAU,KAAV;AAmBV;;AAjBC,EAAA,oBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,aAAjB,EAA6C,CAC3C;AACD,GAFD;;AAIA,EAAA,oBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,aAApB,EAAgD,CAC9C;AACD,GAFD;;AAIA,EAAA,oBAAA,CAAA,SAAA,CAAA,sBAAA,GAAA,UAAuB,GAAvB,EAAuC,CACrC;AACD,GAFD;;AAIA,EAAA,oBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UACE,GADF,EACoC;AAElC,WAAO,kBAAkB,CAAC,OAAnB,CAA2B,cAAc,EAAzC,CAAP;AACD,GAJD;;AAKF,SAAA,oBAAA;AAAC,CApBD,EAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKeySet, documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\n\nimport { GarbageCollector } from './garbage_collector';\nimport { GarbageSource } from './garbage_source';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nexport class NoOpGarbageCollector implements GarbageCollector {\n  readonly isEager = false;\n\n  addGarbageSource(garbageSource: GarbageSource): void {\n    // Not tracking garbage so don't track sources.\n  }\n\n  removeGarbageSource(garbageSource: GarbageSource): void {\n    // Not tracking garbage so don't track sources.\n  }\n\n  addPotentialGarbageKey(key: DocumentKey): void {\n    // Not tracking garbage so ignore.\n  }\n\n  collectGarbage(\n    txn: PersistenceTransaction | null\n  ): PersistencePromise<DocumentKeySet> {\n    return PersistencePromise.resolve(documentKeySet());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}