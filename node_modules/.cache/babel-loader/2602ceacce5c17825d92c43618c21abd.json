{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { DocumentKey } from './document_key';\nexport var TypeOrder;\n\n(function (TypeOrder) {\n  // This order is defined by the backend.\n  TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n  TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n  TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n  TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n  TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n  TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n  TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n  TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n  TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n  TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder || (TypeOrder = {}));\n/**\n * A field value represents a datatype as stored by Firestore.\n */\n\n\nvar FieldValue =\n/** @class */\nfunction () {\n  function FieldValue() {}\n\n  FieldValue.prototype.toString = function () {\n    var val = this.value();\n    return val === null ? 'null' : val.toString();\n  };\n\n  FieldValue.prototype.defaultCompareTo = function (other) {\n    assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n    var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n    return cmp;\n  };\n\n  return FieldValue;\n}();\n\nexport { FieldValue };\n\nvar NullValue =\n/** @class */\nfunction (_super) {\n  __extends(NullValue, _super);\n\n  function NullValue() {\n    var _this = _super.call(this) || this;\n\n    _this.typeOrder = TypeOrder.NullValue; // internalValue is unused but we add it to work around\n    // https://github.com/Microsoft/TypeScript/issues/15585\n\n    _this.internalValue = null;\n    return _this;\n  }\n\n  NullValue.prototype.value = function () {\n    return null;\n  };\n\n  NullValue.prototype.equals = function (other) {\n    return other instanceof NullValue;\n  };\n\n  NullValue.prototype.compareTo = function (other) {\n    if (other instanceof NullValue) {\n      return 0;\n    }\n\n    return this.defaultCompareTo(other);\n  };\n\n  NullValue.INSTANCE = new NullValue();\n  return NullValue;\n}(FieldValue);\n\nexport { NullValue };\n\nvar BooleanValue =\n/** @class */\nfunction (_super) {\n  __extends(BooleanValue, _super);\n\n  function BooleanValue(internalValue) {\n    var _this = _super.call(this) || this;\n\n    _this.internalValue = internalValue;\n    _this.typeOrder = TypeOrder.BooleanValue;\n    return _this;\n  }\n\n  BooleanValue.prototype.value = function () {\n    return this.internalValue;\n  };\n\n  BooleanValue.prototype.equals = function (other) {\n    return other instanceof BooleanValue && this.internalValue === other.internalValue;\n  };\n\n  BooleanValue.prototype.compareTo = function (other) {\n    if (other instanceof BooleanValue) {\n      return primitiveComparator(this, other);\n    }\n\n    return this.defaultCompareTo(other);\n  };\n\n  BooleanValue.of = function (value) {\n    return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n  };\n\n  BooleanValue.TRUE = new BooleanValue(true);\n  BooleanValue.FALSE = new BooleanValue(false);\n  return BooleanValue;\n}(FieldValue);\n\nexport { BooleanValue };\n/** Base class for IntegerValue and DoubleValue. */\n\nvar NumberValue =\n/** @class */\nfunction (_super) {\n  __extends(NumberValue, _super);\n\n  function NumberValue(internalValue) {\n    var _this = _super.call(this) || this;\n\n    _this.internalValue = internalValue;\n    _this.typeOrder = TypeOrder.NumberValue;\n    return _this;\n  }\n\n  NumberValue.prototype.value = function () {\n    return this.internalValue;\n  };\n\n  NumberValue.prototype.compareTo = function (other) {\n    if (other instanceof NumberValue) {\n      return numericComparator(this.internalValue, other.internalValue);\n    }\n\n    return this.defaultCompareTo(other);\n  };\n\n  return NumberValue;\n}(FieldValue);\n\nexport { NumberValue };\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\n\nfunction numericComparator(left, right) {\n  if (left < right) {\n    return -1;\n  } else if (left > right) {\n    return 1;\n  } else if (left === right) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(left)) {\n      return isNaN(right) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\n\n\nfunction numericEquals(left, right) {\n  // Implemented based on Object.is() polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  if (left === right) {\n    // +0 != -0\n    return left !== 0 || 1 / left === 1 / right;\n  } else {\n    // NaN == NaN\n    return left !== left && right !== right;\n  }\n}\n\nvar IntegerValue =\n/** @class */\nfunction (_super) {\n  __extends(IntegerValue, _super);\n\n  function IntegerValue(internalValue) {\n    return _super.call(this, internalValue) || this;\n  }\n\n  IntegerValue.prototype.equals = function (other) {\n    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n    // but that doesn't make them equal via equals().\n    if (other instanceof IntegerValue) {\n      return numericEquals(this.internalValue, other.internalValue);\n    } else {\n      return false;\n    }\n  };\n\n  return IntegerValue;\n}(NumberValue);\n\nexport { IntegerValue };\n\nvar DoubleValue =\n/** @class */\nfunction (_super) {\n  __extends(DoubleValue, _super);\n\n  function DoubleValue(internalValue) {\n    var _this = _super.call(this, internalValue) || this;\n\n    _this.internalValue = internalValue;\n    return _this;\n  }\n\n  DoubleValue.prototype.equals = function (other) {\n    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n    // but that doesn't make them equal via equals().\n    if (other instanceof DoubleValue) {\n      return numericEquals(this.internalValue, other.internalValue);\n    } else {\n      return false;\n    }\n  };\n\n  DoubleValue.NAN = new DoubleValue(NaN);\n  DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n  DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n  return DoubleValue;\n}(NumberValue);\n\nexport { DoubleValue }; // TODO(b/37267885): Add truncation support\n\nvar StringValue =\n/** @class */\nfunction (_super) {\n  __extends(StringValue, _super);\n\n  function StringValue(internalValue) {\n    var _this = _super.call(this) || this;\n\n    _this.internalValue = internalValue;\n    _this.typeOrder = TypeOrder.StringValue;\n    return _this;\n  }\n\n  StringValue.prototype.value = function () {\n    return this.internalValue;\n  };\n\n  StringValue.prototype.equals = function (other) {\n    return other instanceof StringValue && this.internalValue === other.internalValue;\n  };\n\n  StringValue.prototype.compareTo = function (other) {\n    if (other instanceof StringValue) {\n      return primitiveComparator(this.internalValue, other.internalValue);\n    }\n\n    return this.defaultCompareTo(other);\n  };\n\n  return StringValue;\n}(FieldValue);\n\nexport { StringValue };\n\nvar TimestampValue =\n/** @class */\nfunction (_super) {\n  __extends(TimestampValue, _super);\n\n  function TimestampValue(internalValue) {\n    var _this = _super.call(this) || this;\n\n    _this.internalValue = internalValue;\n    _this.typeOrder = TypeOrder.TimestampValue;\n    return _this;\n  }\n\n  TimestampValue.prototype.value = function () {\n    return this.internalValue.toDate();\n  };\n\n  TimestampValue.prototype.equals = function (other) {\n    return other instanceof TimestampValue && this.internalValue.equals(other.internalValue);\n  };\n\n  TimestampValue.prototype.compareTo = function (other) {\n    if (other instanceof TimestampValue) {\n      return this.internalValue.compareTo(other.internalValue);\n    } else if (other instanceof ServerTimestampValue) {\n      // Concrete timestamps come before server timestamps.\n      return -1;\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  };\n\n  return TimestampValue;\n}(FieldValue);\n\nexport { TimestampValue };\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\nvar ServerTimestampValue =\n/** @class */\nfunction (_super) {\n  __extends(ServerTimestampValue, _super);\n\n  function ServerTimestampValue(localWriteTime) {\n    var _this = _super.call(this) || this;\n\n    _this.localWriteTime = localWriteTime;\n    _this.typeOrder = TypeOrder.TimestampValue;\n    return _this;\n  }\n\n  ServerTimestampValue.prototype.value = function () {\n    return null;\n  };\n\n  ServerTimestampValue.prototype.equals = function (other) {\n    return other instanceof ServerTimestampValue && this.localWriteTime.equals(other.localWriteTime);\n  };\n\n  ServerTimestampValue.prototype.compareTo = function (other) {\n    if (other instanceof ServerTimestampValue) {\n      return this.localWriteTime.compareTo(other.localWriteTime);\n    } else if (other instanceof TimestampValue) {\n      // Server timestamps come after all concrete timestamps.\n      return 1;\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  };\n\n  ServerTimestampValue.prototype.toString = function () {\n    return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n  };\n\n  return ServerTimestampValue;\n}(FieldValue);\n\nexport { ServerTimestampValue };\n\nvar BlobValue =\n/** @class */\nfunction (_super) {\n  __extends(BlobValue, _super);\n\n  function BlobValue(internalValue) {\n    var _this = _super.call(this) || this;\n\n    _this.internalValue = internalValue;\n    _this.typeOrder = TypeOrder.BlobValue;\n    return _this;\n  }\n\n  BlobValue.prototype.value = function () {\n    return this.internalValue;\n  };\n\n  BlobValue.prototype.equals = function (other) {\n    return other instanceof BlobValue && this.internalValue._equals(other.internalValue);\n  };\n\n  BlobValue.prototype.compareTo = function (other) {\n    if (other instanceof BlobValue) {\n      return this.internalValue._compareTo(other.internalValue);\n    }\n\n    return this.defaultCompareTo(other);\n  };\n\n  return BlobValue;\n}(FieldValue);\n\nexport { BlobValue };\n\nvar RefValue =\n/** @class */\nfunction (_super) {\n  __extends(RefValue, _super);\n\n  function RefValue(databaseId, key) {\n    var _this = _super.call(this) || this;\n\n    _this.databaseId = databaseId;\n    _this.key = key;\n    _this.typeOrder = TypeOrder.RefValue;\n    return _this;\n  }\n\n  RefValue.prototype.value = function () {\n    return this.key;\n  };\n\n  RefValue.prototype.equals = function (other) {\n    if (other instanceof RefValue) {\n      return this.key.equals(other.key) && this.databaseId.equals(other.databaseId);\n    } else {\n      return false;\n    }\n  };\n\n  RefValue.prototype.compareTo = function (other) {\n    if (other instanceof RefValue) {\n      var cmp = this.databaseId.compareTo(other.databaseId);\n      return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);\n    }\n\n    return this.defaultCompareTo(other);\n  };\n\n  return RefValue;\n}(FieldValue);\n\nexport { RefValue };\n\nvar GeoPointValue =\n/** @class */\nfunction (_super) {\n  __extends(GeoPointValue, _super);\n\n  function GeoPointValue(internalValue) {\n    var _this = _super.call(this) || this;\n\n    _this.internalValue = internalValue;\n    _this.typeOrder = TypeOrder.GeoPointValue;\n    return _this;\n  }\n\n  GeoPointValue.prototype.value = function () {\n    return this.internalValue;\n  };\n\n  GeoPointValue.prototype.equals = function (other) {\n    return other instanceof GeoPointValue && this.internalValue._equals(other.internalValue);\n  };\n\n  GeoPointValue.prototype.compareTo = function (other) {\n    if (other instanceof GeoPointValue) {\n      return this.internalValue._compareTo(other.internalValue);\n    }\n\n    return this.defaultCompareTo(other);\n  };\n\n  return GeoPointValue;\n}(FieldValue);\n\nexport { GeoPointValue };\n\nvar ObjectValue =\n/** @class */\nfunction (_super) {\n  __extends(ObjectValue, _super);\n\n  function ObjectValue(internalValue) {\n    var _this = _super.call(this) || this;\n\n    _this.internalValue = internalValue;\n    _this.typeOrder = TypeOrder.ObjectValue;\n    return _this;\n  }\n\n  ObjectValue.prototype.value = function () {\n    var result = {};\n    this.internalValue.inorderTraversal(function (key, val) {\n      result[key] = val.value();\n    });\n    return result;\n  };\n\n  ObjectValue.prototype.forEach = function (action) {\n    this.internalValue.inorderTraversal(action);\n  };\n\n  ObjectValue.prototype.equals = function (other) {\n    if (other instanceof ObjectValue) {\n      var it1 = this.internalValue.getIterator();\n      var it2 = other.internalValue.getIterator();\n\n      while (it1.hasNext() && it2.hasNext()) {\n        var next1 = it1.getNext();\n        var next2 = it2.getNext();\n\n        if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n          return false;\n        }\n      }\n\n      return !it1.hasNext() && !it2.hasNext();\n    }\n\n    return false;\n  };\n\n  ObjectValue.prototype.compareTo = function (other) {\n    if (other instanceof ObjectValue) {\n      var it1 = this.internalValue.getIterator();\n      var it2 = other.internalValue.getIterator();\n\n      while (it1.hasNext() && it2.hasNext()) {\n        var next1 = it1.getNext();\n        var next2 = it2.getNext();\n        var cmp = primitiveComparator(next1.key, next2.key) || next1.value.compareTo(next2.value);\n\n        if (cmp) {\n          return cmp;\n        }\n      } // Only equal if both iterators are exhausted\n\n\n      return primitiveComparator(it1.hasNext(), it2.hasNext());\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  };\n\n  ObjectValue.prototype.set = function (path, to) {\n    assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n\n    if (path.length === 1) {\n      return this.setChild(path.firstSegment(), to);\n    } else {\n      var child = this.child(path.firstSegment());\n\n      if (!(child instanceof ObjectValue)) {\n        child = ObjectValue.EMPTY;\n      }\n\n      var newChild = child.set(path.popFirst(), to);\n      return this.setChild(path.firstSegment(), newChild);\n    }\n  };\n\n  ObjectValue.prototype.delete = function (path) {\n    assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n\n    if (path.length === 1) {\n      return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n    } else {\n      // nested field\n      var child = this.child(path.firstSegment());\n\n      if (child instanceof ObjectValue) {\n        var newChild = child.delete(path.popFirst());\n        return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n      } else {\n        // Don't actually change a primitive value to an object for a delete\n        return this;\n      }\n    }\n  };\n\n  ObjectValue.prototype.contains = function (path) {\n    return this.field(path) !== undefined;\n  };\n\n  ObjectValue.prototype.field = function (path) {\n    assert(!path.isEmpty(), \"Can't get field of empty path\");\n    var field = this;\n    path.forEach(function (pathSegment) {\n      if (field instanceof ObjectValue) {\n        field = field.internalValue.get(pathSegment) || undefined;\n      } else {\n        field = undefined;\n      }\n    });\n    return field;\n  };\n\n  ObjectValue.prototype.toString = function () {\n    return JSON.stringify(this.value());\n  };\n\n  ObjectValue.prototype.child = function (childName) {\n    return this.internalValue.get(childName) || undefined;\n  };\n\n  ObjectValue.prototype.setChild = function (childName, value) {\n    return new ObjectValue(this.internalValue.insert(childName, value));\n  };\n\n  ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));\n  return ObjectValue;\n}(FieldValue);\n\nexport { ObjectValue };\n\nvar ArrayValue =\n/** @class */\nfunction (_super) {\n  __extends(ArrayValue, _super);\n\n  function ArrayValue(internalValue) {\n    var _this = _super.call(this) || this;\n\n    _this.internalValue = internalValue;\n    _this.typeOrder = TypeOrder.ArrayValue;\n    return _this;\n  }\n\n  ArrayValue.prototype.value = function () {\n    return this.internalValue.map(function (v) {\n      return v.value();\n    });\n  };\n\n  ArrayValue.prototype.forEach = function (action) {\n    this.internalValue.forEach(action);\n  };\n\n  ArrayValue.prototype.equals = function (other) {\n    if (other instanceof ArrayValue) {\n      if (this.internalValue.length !== other.internalValue.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.internalValue.length; i++) {\n        if (!this.internalValue[i].equals(other.internalValue[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  ArrayValue.prototype.compareTo = function (other) {\n    if (other instanceof ArrayValue) {\n      var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n\n      for (var i = 0; i < minLength; i++) {\n        var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n\n        if (cmp) {\n          return cmp;\n        }\n      }\n\n      return primitiveComparator(this.internalValue.length, other.internalValue.length);\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  };\n\n  ArrayValue.prototype.toString = function () {\n    return JSON.stringify(this.value());\n  };\n\n  return ArrayValue;\n}(FieldValue);\n\nexport { ArrayValue };","map":{"version":3,"sources":["../src/model/field_value.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Blob } from '../api/blob';\nimport { GeoPoint } from '../api/geo_point';\nimport { DatabaseId } from '../core/database_info';\nimport { Timestamp } from '../core/timestamp';\nimport { assert, fail } from '../util/assert';\nimport { AnyJs, primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { SortedMap } from '../util/sorted_map';\nimport * as typeUtils from '../util/types';\n\nimport { DocumentKey } from './document_key';\nimport { FieldPath } from './path';\n\n/**\n * Supported data value types:\n *  - Null\n *  - Boolean\n *  - Long\n *  - Double\n *  - String\n *  - Object\n *  - Array\n *  - Binary\n *  - Timestamp\n *  - ServerTimestamp (a sentinel used in uncommitted writes)\n *  - GeoPoint\n *  - (Document) References\n */\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n\nexport enum TypeOrder {\n  // This order is defined by the backend.\n  NullValue = 0,\n  BooleanValue = 1,\n  NumberValue = 2,\n  TimestampValue = 3,\n  StringValue = 4,\n  BlobValue = 5,\n  RefValue = 6,\n  GeoPointValue = 7,\n  ArrayValue = 8,\n  ObjectValue = 9\n}\n\n/**\n * Potential types returned by FieldValue.value(). This could be stricter\n * (instead of using {}), but there's little benefit.\n *\n * Note that currently we use AnyJs (which is identical except includes\n * undefined) for incoming user data as a convenience to the calling code (but\n * we'll throw if the data contains undefined). This should probably be changed\n * to use FieldType, but all consuming code will have to be updated to\n * explicitly handle undefined and then cast to FieldType or similar. Perhaps\n * we should tackle this when adding robust argument validation to the API.\n */\nexport type FieldType = null | boolean | number | string | {};\n\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nexport abstract class FieldValue {\n  readonly typeOrder: TypeOrder;\n\n  abstract value(): FieldType;\n  abstract equals(other: FieldValue): boolean;\n  abstract compareTo(other: FieldValue): number;\n\n  toString(): string {\n    const val = this.value();\n    return val === null ? 'null' : val.toString();\n  }\n\n  defaultCompareTo(other: FieldValue): number {\n    assert(\n      this.typeOrder !== other.typeOrder,\n      'Default compareTo should not be used for values of same type.'\n    );\n    const cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n    return cmp;\n  }\n}\n\nexport class NullValue extends FieldValue {\n  typeOrder = TypeOrder.NullValue;\n\n  // internalValue is unused but we add it to work around\n  // https://github.com/Microsoft/TypeScript/issues/15585\n  readonly internalValue = null;\n\n  private constructor() {\n    super();\n  }\n\n  value(): FieldType {\n    return null;\n  }\n\n  equals(other: FieldValue): boolean {\n    return other instanceof NullValue;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof NullValue) {\n      return 0;\n    }\n    return this.defaultCompareTo(other);\n  }\n\n  static INSTANCE = new NullValue();\n}\n\nexport class BooleanValue extends FieldValue {\n  typeOrder = TypeOrder.BooleanValue;\n\n  private constructor(readonly internalValue: boolean) {\n    super();\n  }\n\n  value(): boolean {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof BooleanValue &&\n      this.internalValue === other.internalValue\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof BooleanValue) {\n      return primitiveComparator(this, other);\n    }\n    return this.defaultCompareTo(other);\n  }\n\n  static of(value: boolean): BooleanValue {\n    return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n  }\n\n  static TRUE = new BooleanValue(true);\n  static FALSE = new BooleanValue(false);\n}\n\n/** Base class for IntegerValue and DoubleValue. */\nexport abstract class NumberValue extends FieldValue {\n  typeOrder = TypeOrder.NumberValue;\n\n  constructor(readonly internalValue: number) {\n    super();\n  }\n\n  value(): number {\n    return this.internalValue;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof NumberValue) {\n      return numericComparator(this.internalValue, other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left: number, right: number): number {\n  if (left < right) {\n    return -1;\n  } else if (left > right) {\n    return 1;\n  } else if (left === right) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(left)) {\n      return isNaN(right) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left: number, right: number): boolean {\n  // Implemented based on Object.is() polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  if (left === right) {\n    // +0 != -0\n    return left !== 0 || 1 / left === 1 / right;\n  } else {\n    // NaN == NaN\n    return left !== left && right !== right;\n  }\n}\n\nexport class IntegerValue extends NumberValue {\n  constructor(internalValue: number) {\n    super(internalValue);\n  }\n\n  equals(other: FieldValue): boolean {\n    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n    // but that doesn't make them equal via equals().\n    if (other instanceof IntegerValue) {\n      return numericEquals(this.internalValue, other.internalValue);\n    } else {\n      return false;\n    }\n  }\n\n  // NOTE: compareTo() is implemented in NumberValue.\n}\n\nexport class DoubleValue extends NumberValue {\n  constructor(readonly internalValue: number) {\n    super(internalValue);\n  }\n\n  static NAN = new DoubleValue(NaN);\n  static POSITIVE_INFINITY = new DoubleValue(Infinity);\n  static NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n\n  equals(other: FieldValue): boolean {\n    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n    // but that doesn't make them equal via equals().\n    if (other instanceof DoubleValue) {\n      return numericEquals(this.internalValue, other.internalValue);\n    } else {\n      return false;\n    }\n  }\n\n  // NOTE: compareTo() is implemented in NumberValue.\n}\n\n// TODO(b/37267885): Add truncation support\nexport class StringValue extends FieldValue {\n  typeOrder = TypeOrder.StringValue;\n\n  constructor(readonly internalValue: string) {\n    super();\n  }\n\n  value(): string {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof StringValue && this.internalValue === other.internalValue\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof StringValue) {\n      return primitiveComparator(this.internalValue, other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class TimestampValue extends FieldValue {\n  typeOrder = TypeOrder.TimestampValue;\n\n  constructor(readonly internalValue: Timestamp) {\n    super();\n  }\n\n  value(): Date {\n    return this.internalValue.toDate();\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof TimestampValue &&\n      this.internalValue.equals(other.internalValue)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof TimestampValue) {\n      return this.internalValue.compareTo(other.internalValue);\n    } else if (other instanceof ServerTimestampValue) {\n      // Concrete timestamps come before server timestamps.\n      return -1;\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n}\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nexport class ServerTimestampValue extends FieldValue {\n  typeOrder = TypeOrder.TimestampValue;\n\n  constructor(readonly localWriteTime: Timestamp) {\n    super();\n  }\n\n  value(): null {\n    return null;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof ServerTimestampValue &&\n      this.localWriteTime.equals(other.localWriteTime)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof ServerTimestampValue) {\n      return this.localWriteTime.compareTo(other.localWriteTime);\n    } else if (other instanceof TimestampValue) {\n      // Server timestamps come after all concrete timestamps.\n      return 1;\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n\n  toString(): string {\n    return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n  }\n}\n\nexport class BlobValue extends FieldValue {\n  typeOrder = TypeOrder.BlobValue;\n\n  constructor(readonly internalValue: Blob) {\n    super();\n  }\n\n  value(): Blob {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof BlobValue &&\n      this.internalValue._equals(other.internalValue)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof BlobValue) {\n      return this.internalValue._compareTo(other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class RefValue extends FieldValue {\n  typeOrder = TypeOrder.RefValue;\n\n  constructor(readonly databaseId: DatabaseId, readonly key: DocumentKey) {\n    super();\n  }\n\n  value(): DocumentKey {\n    return this.key;\n  }\n\n  equals(other: FieldValue): boolean {\n    if (other instanceof RefValue) {\n      return (\n        this.key.equals(other.key) && this.databaseId.equals(other.databaseId)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof RefValue) {\n      const cmp = this.databaseId.compareTo(other.databaseId);\n      return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class GeoPointValue extends FieldValue {\n  typeOrder = TypeOrder.GeoPointValue;\n\n  constructor(readonly internalValue: GeoPoint) {\n    super();\n  }\n\n  value(): GeoPoint {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof GeoPointValue &&\n      this.internalValue._equals(other.internalValue)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof GeoPointValue) {\n      return this.internalValue._compareTo(other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class ObjectValue extends FieldValue {\n  typeOrder = TypeOrder.ObjectValue;\n\n  constructor(readonly internalValue: SortedMap<string, FieldValue>) {\n    super();\n  }\n\n  value(): JsonObject<FieldType> {\n    const result: JsonObject<FieldType> = {};\n    this.internalValue.inorderTraversal((key, val) => {\n      result[key] = val.value();\n    });\n    return result;\n  }\n\n  forEach(action: (key: string, value: FieldValue) => void): void {\n    this.internalValue.inorderTraversal(action);\n  }\n\n  equals(other: FieldValue): boolean {\n    if (other instanceof ObjectValue) {\n      const it1 = this.internalValue.getIterator();\n      const it2 = other.internalValue.getIterator();\n      while (it1.hasNext() && it2.hasNext()) {\n        const next1: { key: string; value: FieldValue } = it1.getNext();\n        const next2: { key: string; value: FieldValue } = it2.getNext();\n        if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n          return false;\n        }\n      }\n\n      return !it1.hasNext() && !it2.hasNext();\n    }\n\n    return false;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof ObjectValue) {\n      const it1 = this.internalValue.getIterator();\n      const it2 = other.internalValue.getIterator();\n      while (it1.hasNext() && it2.hasNext()) {\n        const next1: { key: string; value: FieldValue } = it1.getNext();\n        const next2: { key: string; value: FieldValue } = it2.getNext();\n        const cmp =\n          primitiveComparator(next1.key, next2.key) ||\n          next1.value.compareTo(next2.value);\n        if (cmp) {\n          return cmp;\n        }\n      }\n\n      // Only equal if both iterators are exhausted\n      return primitiveComparator(it1.hasNext(), it2.hasNext());\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n\n  set(path: FieldPath, to: FieldValue): ObjectValue {\n    assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n    if (path.length === 1) {\n      return this.setChild(path.firstSegment(), to);\n    } else {\n      let child = this.child(path.firstSegment());\n      if (!(child instanceof ObjectValue)) {\n        child = ObjectValue.EMPTY;\n      }\n      const newChild = (child as ObjectValue).set(path.popFirst(), to);\n      return this.setChild(path.firstSegment(), newChild);\n    }\n  }\n\n  delete(path: FieldPath): ObjectValue {\n    assert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    if (path.length === 1) {\n      return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n    } else {\n      // nested field\n      const child = this.child(path.firstSegment());\n      if (child instanceof ObjectValue) {\n        const newChild = child.delete(path.popFirst());\n        return new ObjectValue(\n          this.internalValue.insert(path.firstSegment(), newChild)\n        );\n      } else {\n        // Don't actually change a primitive value to an object for a delete\n        return this;\n      }\n    }\n  }\n\n  contains(path: FieldPath): boolean {\n    return this.field(path) !== undefined;\n  }\n\n  field(path: FieldPath): FieldValue {\n    assert(!path.isEmpty(), \"Can't get field of empty path\");\n    let field: FieldValue | undefined = this;\n    path.forEach((pathSegment: string) => {\n      if (field instanceof ObjectValue) {\n        field = field.internalValue.get(pathSegment) || undefined;\n      } else {\n        field = undefined;\n      }\n    });\n    return field;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.value());\n  }\n\n  private child(childName: string): FieldValue | undefined {\n    return this.internalValue.get(childName) || undefined;\n  }\n\n  private setChild(childName: string, value: FieldValue): ObjectValue {\n    return new ObjectValue(this.internalValue.insert(childName, value));\n  }\n\n  static EMPTY = new ObjectValue(\n    new SortedMap<string, FieldValue>(primitiveComparator)\n  );\n}\n\nexport class ArrayValue extends FieldValue {\n  typeOrder = TypeOrder.ArrayValue;\n\n  constructor(readonly internalValue: FieldValue[]) {\n    super();\n  }\n\n  value(): FieldType[] {\n    return this.internalValue.map(v => v.value());\n  }\n\n  forEach(action: (value: FieldValue) => void): void {\n    this.internalValue.forEach(action);\n  }\n\n  equals(other: FieldValue): boolean {\n    if (other instanceof ArrayValue) {\n      if (this.internalValue.length !== other.internalValue.length) {\n        return false;\n      }\n\n      for (let i = 0; i < this.internalValue.length; i++) {\n        if (!this.internalValue[i].equals(other.internalValue[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof ArrayValue) {\n      const minLength = Math.min(\n        this.internalValue.length,\n        other.internalValue.length\n      );\n\n      for (let i = 0; i < minLength; i++) {\n        const cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n\n        if (cmp) {\n          return cmp;\n        }\n      }\n\n      return primitiveComparator(\n        this.internalValue.length,\n        other.internalValue.length\n      );\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n\n  toString(): string {\n    return JSON.stringify(this.value());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}