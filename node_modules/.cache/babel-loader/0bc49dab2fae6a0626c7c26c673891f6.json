{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// We are doing some heavy reflective stuff, lots of any casting necessary\n\n/* tslint:disable:no-any */\nimport { Code, FirestoreError } from './error';\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\n\nexport function makeConstructorPrivate(cls, optionalMessage) {\n  function PublicConstructor() {\n    var error = 'This constructor is private.';\n\n    if (optionalMessage) {\n      error += ' ';\n      error += optionalMessage;\n    }\n\n    throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n  } // Make sure instanceof checks work and all methods are exposed on the public\n  // constructor\n\n\n  PublicConstructor.prototype = cls.prototype; // Copy any static methods/members\n\n  for (var staticProperty in cls) {\n    if (cls.hasOwnProperty(staticProperty)) {\n      PublicConstructor[staticProperty] = cls[staticProperty];\n    }\n  }\n\n  return PublicConstructor;\n}","map":{"version":3,"sources":["../src/util/api.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH;;AACA;AAEA,SAAS,IAAT,EAAe,cAAf,QAAqC,SAArC;AAEA;;;;;;;;;;AAUG;;AACH,OAAM,SAAA,sBAAA,CAAoC,GAApC,EAA4C,eAA5C,EAAoE;AACxE,WAAA,iBAAA,GAAA;AACE,QAAI,KAAK,GAAG,8BAAZ;;AACA,QAAI,eAAJ,EAAqB;AACnB,MAAA,KAAK,IAAI,GAAT;AACA,MAAA,KAAK,IAAI,eAAT;AACD;;AACD,UAAM,IAAI,cAAJ,CAAmB,IAAI,CAAC,gBAAxB,EAA0C,KAA1C,CAAN;AACD,GARuE,CAUxE;AACA;;;AACA,EAAA,iBAAiB,CAAC,SAAlB,GAA+B,GAAW,CAAC,SAA3C,CAZwE,CAcxE;;AACA,OAAK,IAAM,cAAX,IAA6B,GAA7B,EAAkC;AAChC,QAAI,GAAG,CAAC,cAAJ,CAAmB,cAAnB,CAAJ,EAAwC;AACrC,MAAA,iBAAyB,CAAC,cAAD,CAAzB,GAA6C,GAAW,CAAC,cAAD,CAAxD;AACF;AACF;;AAED,SAAO,iBAAP;AACD","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// We are doing some heavy reflective stuff, lots of any casting necessary\n/* tslint:disable:no-any */\n\nimport { Code, FirestoreError } from './error';\n\n/**\n * Helper function to prevent instantiation through the constructor.\n *\n * This method creates a new constructor that throws when it's invoked.\n * The prototype of that constructor is then set to the prototype of the hidden\n * \"class\" to expose all the prototype methods and allow for instanceof\n * checks.\n *\n * To also make all the static methods available, all properties of the\n * original constructor are copied to the new constructor.\n */\nexport function makeConstructorPrivate<T>(cls: T, optionalMessage?: string): T {\n  function PublicConstructor() {\n    let error = 'This constructor is private.';\n    if (optionalMessage) {\n      error += ' ';\n      error += optionalMessage;\n    }\n    throw new FirestoreError(Code.INVALID_ARGUMENT, error);\n  }\n\n  // Make sure instanceof checks work and all methods are exposed on the public\n  // constructor\n  PublicConstructor.prototype = (cls as any).prototype;\n\n  // Copy any static methods/members\n  for (const staticProperty in cls) {\n    if (cls.hasOwnProperty(staticProperty)) {\n      (PublicConstructor as any)[staticProperty] = (cls as any)[staticProperty];\n    }\n  }\n\n  return PublicConstructor as any;\n}\n"]},"metadata":{},"sourceType":"module"}