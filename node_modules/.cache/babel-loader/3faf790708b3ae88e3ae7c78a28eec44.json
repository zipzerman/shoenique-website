{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { documentKeySet } from '../model/collections';\nimport { emptyByteString } from '../platform/platform';\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\n\nvar RemoteEvent =\n/** @class */\nfunction () {\n  function RemoteEvent(\n  /**\n   * The snapshot version this event brings us up to, or MIN if not set.\n   */\n  snapshotVersion,\n  /**\n   * A map from target to changes to the target. See TargetChange.\n   */\n  targetChanges,\n  /**\n   * A set of which documents have changed or been deleted, along with the\n   * doc's new values (if not deleted).\n   */\n  documentUpdates) {\n    this.snapshotVersion = snapshotVersion;\n    this.targetChanges = targetChanges;\n    this.documentUpdates = documentUpdates;\n  }\n\n  RemoteEvent.prototype.addDocumentUpdate = function (doc) {\n    this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n  };\n\n  RemoteEvent.prototype.handleExistenceFilterMismatch = function (targetId) {\n    /*\n     * An existence filter mismatch will reset the query and we need to reset\n     * the mapping to contain no documents and an empty resume token.\n     *\n     * Note:\n     *   * The reset mapping is empty, specifically forcing the consumer of the\n     *     change to forget all keys for this targetID;\n     *   * The resume snapshot for this target must be reset\n     *   * The target must be unacked because unwatching and rewatching\n     *     introduces a race for changes.\n     */\n    this.targetChanges[targetId] = {\n      mapping: new ResetMapping(),\n      snapshotVersion: SnapshotVersion.MIN,\n      currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n      resumeToken: emptyByteString()\n    };\n  };\n\n  return RemoteEvent;\n}();\n\nexport { RemoteEvent };\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\n\nexport var CurrentStatusUpdate;\n\n(function (CurrentStatusUpdate) {\n  /** The current status is not affected and should not be modified. */\n  CurrentStatusUpdate[CurrentStatusUpdate[\"None\"] = 0] = \"None\";\n  /** The target must be marked as no longer \"current\". */\n\n  CurrentStatusUpdate[CurrentStatusUpdate[\"MarkNotCurrent\"] = 1] = \"MarkNotCurrent\";\n  /** The target must be marked as \"current\". */\n\n  CurrentStatusUpdate[CurrentStatusUpdate[\"MarkCurrent\"] = 2] = \"MarkCurrent\";\n})(CurrentStatusUpdate || (CurrentStatusUpdate = {}));\n\nvar EMPTY_KEY_SET = documentKeySet();\n\nvar ResetMapping =\n/** @class */\nfunction () {\n  function ResetMapping() {\n    this.docs = EMPTY_KEY_SET;\n  }\n\n  Object.defineProperty(ResetMapping.prototype, \"documents\", {\n    get: function get() {\n      return this.docs;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ResetMapping.prototype.add = function (key) {\n    this.docs = this.docs.add(key);\n  };\n\n  ResetMapping.prototype.delete = function (key) {\n    this.docs = this.docs.delete(key);\n  };\n\n  ResetMapping.prototype.equals = function (other) {\n    return other !== null && this.docs.equals(other.docs);\n  };\n\n  return ResetMapping;\n}();\n\nexport { ResetMapping };\n\nvar UpdateMapping =\n/** @class */\nfunction () {\n  function UpdateMapping() {\n    this.addedDocuments = EMPTY_KEY_SET;\n    this.removedDocuments = EMPTY_KEY_SET;\n  }\n\n  UpdateMapping.prototype.applyToKeySet = function (keys) {\n    var result = keys;\n    this.addedDocuments.forEach(function (key) {\n      return result = result.add(key);\n    });\n    this.removedDocuments.forEach(function (key) {\n      return result = result.delete(key);\n    });\n    return result;\n  };\n\n  UpdateMapping.prototype.add = function (key) {\n    this.addedDocuments = this.addedDocuments.add(key);\n    this.removedDocuments = this.removedDocuments.delete(key);\n  };\n\n  UpdateMapping.prototype.delete = function (key) {\n    this.addedDocuments = this.addedDocuments.delete(key);\n    this.removedDocuments = this.removedDocuments.add(key);\n  };\n\n  UpdateMapping.prototype.equals = function (other) {\n    return other !== null && this.addedDocuments.equals(other.addedDocuments) && this.removedDocuments.equals(other.removedDocuments);\n  };\n\n  return UpdateMapping;\n}();\n\nexport { UpdateMapping };","map":{"version":3,"sources":["../src/remote/remote_event.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,eAAT,QAAgC,0BAAhC;AAEA,SACE,cADF,QAIO,sBAJP;AAOA,SAAS,eAAT,QAAgC,sBAAhC;AAEA;;;;AAIG;;AACH,IAAA,WAAA;AAAA;AAAA,YAAA;AACE,WAAA,WAAA;AACE;;AAEG;AACa,EAAA,eAJlB;AAKE;;AAEG;AACa,EAAA,aARlB;AASE;;;AAGG;AACI,EAAA,eAbT,EAa0C;AATxB,SAAA,eAAA,GAAA,eAAA;AAIA,SAAA,aAAA,GAAA,aAAA;AAKT,SAAA,eAAA,GAAA,eAAA;AACL;;AAEJ,EAAA,WAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,GAAlB,EAAoC;AAClC,SAAK,eAAL,GAAuB,KAAK,eAAL,CAAqB,MAArB,CAA4B,GAAG,CAAC,GAAhC,EAAqC,GAArC,CAAvB;AACD,GAFD;;AAIA,EAAA,WAAA,CAAA,SAAA,CAAA,6BAAA,GAAA,UAA8B,QAA9B,EAAgD;AAC9C;;;;;;;;;;AAUG;AACH,SAAK,aAAL,CAAmB,QAAnB,IAA+B;AAC7B,MAAA,OAAO,EAAE,IAAI,YAAJ,EADoB;AAE7B,MAAA,eAAe,EAAE,eAAe,CAAC,GAFJ;AAG7B,MAAA,mBAAmB,EAAE,mBAAmB,CAAC,cAHZ;AAI7B,MAAA,WAAW,EAAE,eAAe;AAJC,KAA/B;AAMD,GAlBD;;AAmBF,SAAA,WAAA;AAAC,CAxCD,EAAA;;;AA0CA;;;;;AAKG;;AACH,OAAA,IAAY,mBAAZ;;AAAA,CAAA,UAAY,mBAAZ,EAA+B;AAC7B;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA;;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA;AACA;;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACD,CAPD,EAAY,mBAAmB,KAAnB,mBAAmB,GAAA,EAAA,CAA/B;;AA4CA,IAAM,aAAa,GAAG,cAAc,EAApC;;AAEA,IAAA,YAAA;AAAA;AAAA,YAAA;AAAA,WAAA,YAAA,GAAA;AACU,SAAA,IAAA,GAAuB,aAAvB;AAiBT;;AAfC,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,WAAJ,EAAa;SAAb,eAAA;AACE,aAAO,KAAK,IAAZ;AACD,KAFY;oBAAA;;AAAA,GAAb;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,GAAJ,EAAoB;AAClB,SAAK,IAAL,GAAY,KAAK,IAAL,CAAU,GAAV,CAAc,GAAd,CAAZ;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,GAAP,EAAuB;AACrB,SAAK,IAAL,GAAY,KAAK,IAAL,CAAU,MAAV,CAAiB,GAAjB,CAAZ;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAA0B;AACxB,WAAO,KAAK,KAAK,IAAV,IAAkB,KAAK,IAAL,CAAU,MAAV,CAAiB,KAAK,CAAC,IAAvB,CAAzB;AACD,GAFD;;AAGF,SAAA,YAAA;AAAC,CAlBD,EAAA;;;;AAoBA,IAAA,aAAA;AAAA;AAAA,YAAA;AAAA,WAAA,aAAA,GAAA;AACE,SAAA,cAAA,GAAiC,aAAjC;AACA,SAAA,gBAAA,GAAmC,aAAnC;AA0BD;;AAxBC,EAAA,aAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,IAAd,EAAkC;AAChC,QAAI,MAAM,GAAG,IAAb;AACA,SAAK,cAAL,CAAoB,OAApB,CAA4B,UAAA,GAAA,EAAG;AAAI,aAAC,MAAM,GAAG,MAAM,CAAC,GAAP,CAAV,GAAU,CAAV;AAA0B,KAA7D;AACA,SAAK,gBAAL,CAAsB,OAAtB,CAA8B,UAAA,GAAA,EAAG;AAAI,aAAC,MAAM,GAAG,MAAM,CAAC,MAAP,CAAV,GAAU,CAAV;AAA6B,KAAlE;AACA,WAAO,MAAP;AACD,GALD;;AAOA,EAAA,aAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,GAAJ,EAAoB;AAClB,SAAK,cAAL,GAAsB,KAAK,cAAL,CAAoB,GAApB,CAAwB,GAAxB,CAAtB;AACA,SAAK,gBAAL,GAAwB,KAAK,gBAAL,CAAsB,MAAtB,CAA6B,GAA7B,CAAxB;AACD,GAHD;;AAKA,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,GAAP,EAAuB;AACrB,SAAK,cAAL,GAAsB,KAAK,cAAL,CAAoB,MAApB,CAA2B,GAA3B,CAAtB;AACA,SAAK,gBAAL,GAAwB,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,GAA1B,CAAxB;AACD,GAHD;;AAKA,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAA2B;AACzB,WACE,KAAK,KAAK,IAAV,IACA,KAAK,cAAL,CAAoB,MAApB,CAA2B,KAAK,CAAC,cAAjC,CADA,IAEA,KAAK,gBAAL,CAAsB,MAAtB,CAA6B,KAAK,CAAC,gBAAnC,CAHF;AAKD,GAND;;AAOF,SAAA,aAAA;AAAC,CA5BD,EAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ProtoByteString, TargetId } from '../core/types';\nimport {\n  documentKeySet,\n  DocumentKeySet,\n  MaybeDocumentMap\n} from '../model/collections';\nimport { MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { emptyByteString } from '../platform/platform';\n\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nexport class RemoteEvent {\n  constructor(\n    /**\n     * The snapshot version this event brings us up to, or MIN if not set.\n     */\n    public readonly snapshotVersion: SnapshotVersion,\n    /**\n     * A map from target to changes to the target. See TargetChange.\n     */\n    public readonly targetChanges: { [targetId: number]: TargetChange },\n    /**\n     * A set of which documents have changed or been deleted, along with the\n     * doc's new values (if not deleted).\n     */\n    public documentUpdates: MaybeDocumentMap\n  ) {}\n\n  addDocumentUpdate(doc: MaybeDocument) {\n    this.documentUpdates = this.documentUpdates.insert(doc.key, doc);\n  }\n\n  handleExistenceFilterMismatch(targetId: TargetId) {\n    /*\n     * An existence filter mismatch will reset the query and we need to reset\n     * the mapping to contain no documents and an empty resume token.\n     *\n     * Note:\n     *   * The reset mapping is empty, specifically forcing the consumer of the\n     *     change to forget all keys for this targetID;\n     *   * The resume snapshot for this target must be reset\n     *   * The target must be unacked because unwatching and rewatching\n     *     introduces a race for changes.\n     */\n    this.targetChanges[targetId] = {\n      mapping: new ResetMapping(),\n      snapshotVersion: SnapshotVersion.MIN,\n      currentStatusUpdate: CurrentStatusUpdate.MarkNotCurrent,\n      resumeToken: emptyByteString()\n    };\n  }\n}\n\n/**\n * Represents an update to the current status of a target, either explicitly\n * having no new state, or the new value to set. Note \"current\" has special\n * meaning for in the RPC protocol that implies that a target is both up-to-date\n * and consistent with the rest of the watch stream.\n */\nexport enum CurrentStatusUpdate {\n  /** The current status is not affected and should not be modified. */\n  None,\n  /** The target must be marked as no longer \"current\". */\n  MarkNotCurrent,\n  /** The target must be marked as \"current\". */\n  MarkCurrent\n}\n\n/**\n * A part of a RemoteEvent specifying set of changes to a specific target. These\n * changes track what documents are currently included in the target as well as\n * the current snapshot version and resume token but the actual changes *to*\n * documents are not part of the TargetChange since documents may be part of\n * multiple targets.\n */\nexport interface TargetChange {\n  /**\n   * The new \"current\" (synced) status of this target. Set to\n   * CurrentStatusUpdateNone if the status should not be updated. Note \"current\"\n   * has special meaning in the RPC protocol that implies that a target is\n   * both up-to-date and consistent with the rest of the watch stream.\n   */\n  currentStatusUpdate: CurrentStatusUpdate;\n\n  /**\n   * A set of changes to documents in this target.\n   */\n  mapping: TargetMapping;\n\n  /** The snapshot version that this target change brings us up to. */\n  snapshotVersion: SnapshotVersion;\n\n  /**\n   * An opaque, server-assigned token that allows watching a query to be resumed\n   * after disconnecting without retransmitting all the data that matches the\n   * query. The resume token essentially identifies a point in time from which\n   * the server should resume sending results.\n   */\n  resumeToken: ProtoByteString;\n}\n\nexport type TargetMapping = ResetMapping | UpdateMapping;\n\nconst EMPTY_KEY_SET = documentKeySet();\n\nexport class ResetMapping {\n  private docs: DocumentKeySet = EMPTY_KEY_SET;\n\n  get documents(): DocumentKeySet {\n    return this.docs;\n  }\n\n  add(key: DocumentKey) {\n    this.docs = this.docs.add(key);\n  }\n\n  delete(key: DocumentKey) {\n    this.docs = this.docs.delete(key);\n  }\n\n  equals(other: ResetMapping): boolean {\n    return other !== null && this.docs.equals(other.docs);\n  }\n}\n\nexport class UpdateMapping {\n  addedDocuments: DocumentKeySet = EMPTY_KEY_SET;\n  removedDocuments: DocumentKeySet = EMPTY_KEY_SET;\n\n  applyToKeySet(keys: DocumentKeySet): DocumentKeySet {\n    let result = keys;\n    this.addedDocuments.forEach(key => (result = result.add(key)));\n    this.removedDocuments.forEach(key => (result = result.delete(key)));\n    return result;\n  }\n\n  add(key: DocumentKey) {\n    this.addedDocuments = this.addedDocuments.add(key);\n    this.removedDocuments = this.removedDocuments.delete(key);\n  }\n\n  delete(key: DocumentKey) {\n    this.addedDocuments = this.addedDocuments.delete(key);\n    this.removedDocuments = this.removedDocuments.add(key);\n  }\n\n  equals(other: UpdateMapping): boolean {\n    return (\n      other !== null &&\n      this.addedDocuments.equals(other.addedDocuments) &&\n      this.removedDocuments.equals(other.removedDocuments)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}