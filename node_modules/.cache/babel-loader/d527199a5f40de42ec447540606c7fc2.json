{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar obj_1 = require(\"./obj\");\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\n * object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n *\n * @param {!Object} querystringParams\n * @return {string}\n */\n\n\nexports.querystring = function (querystringParams) {\n  var params = [];\n  obj_1.forEach(querystringParams, function (key, value) {\n    if (Array.isArray(value)) {\n      value.forEach(function (arrayVal) {\n        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  });\n  return params.length ? '&' + params.join('&') : '';\n};\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\n *\n * @param {string} querystring\n * @return {!Object}\n */\n\n\nexports.querystringDecode = function (querystring) {\n  var obj = {};\n  var tokens = querystring.replace(/^\\?/, '').split('&');\n  tokens.forEach(function (token) {\n    if (token) {\n      var key = token.split('=');\n      obj[key[0]] = key[1];\n    }\n  });\n  return obj;\n};","map":{"version":3,"sources":["../src/query.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;AAEH,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;AAEA;;;;;;;AAOG;;;AACU,OAAA,CAAA,WAAA,GAAc,UAAS,iBAAT,EAA0B;AACnD,MAAI,MAAM,GAAG,EAAb;AACA,EAAA,KAAA,CAAA,OAAA,CAAQ,iBAAR,EAA2B,UAAS,GAAT,EAAc,KAAd,EAAmB;AAC5C,QAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB,MAAA,KAAK,CAAC,OAAN,CAAc,UAAS,QAAT,EAAiB;AAC7B,QAAA,MAAM,CAAC,IAAP,CACE,kBAAkB,CAAC,GAAD,CAAlB,GAA0B,GAA1B,GAAgC,kBAAkB,CAAC,QAAD,CADpD;AAGD,OAJD;AAKD,KAND,MAMO;AACL,MAAA,MAAM,CAAC,IAAP,CAAY,kBAAkB,CAAC,GAAD,CAAlB,GAA0B,GAA1B,GAAgC,kBAAkB,CAAC,KAAD,CAA9D;AACD;AACF,GAVD;AAWA,SAAO,MAAM,CAAC,MAAP,GAAgB,MAAM,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAtB,GAAyC,EAAhD;AACD,CAdY;AAgBb;;;;;AAKG;;;AACU,OAAA,CAAA,iBAAA,GAAoB,UAAS,WAAT,EAAoB;AACnD,MAAI,GAAG,GAAG,EAAV;AACA,MAAI,MAAM,GAAG,WAAW,CAAC,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,EAA+B,KAA/B,CAAqC,GAArC,CAAb;AAEA,EAAA,MAAM,CAAC,OAAP,CAAe,UAAS,KAAT,EAAc;AAC3B,QAAI,KAAJ,EAAW;AACT,UAAI,GAAG,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAV;AACA,MAAA,GAAG,CAAC,GAAG,CAAC,CAAD,CAAJ,CAAH,GAAc,GAAG,CAAC,CAAD,CAAjB;AACD;AACF,GALD;AAMA,SAAO,GAAP;AACD,CAXY","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { forEach } from './obj';\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\n * object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n *\n * @param {!Object} querystringParams\n * @return {string}\n */\nexport const querystring = function(querystringParams) {\n  var params = [];\n  forEach(querystringParams, function(key, value) {\n    if (Array.isArray(value)) {\n      value.forEach(function(arrayVal) {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  });\n  return params.length ? '&' + params.join('&') : '';\n};\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\n *\n * @param {string} querystring\n * @return {!Object}\n */\nexport const querystringDecode = function(querystring) {\n  var obj = {};\n  var tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(function(token) {\n    if (token) {\n      var key = token.split('=');\n      obj[key[0]] = key[1];\n    }\n  });\n  return obj;\n};\n"]},"metadata":{},"sourceType":"script"}