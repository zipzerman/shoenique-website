{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar util = require('@firebase/util');\n\nvar logger = require('@firebase/logger');\n\nvar tslib_1 = require('tslib');\n\nvar firebase = _interopDefault(require('@firebase/app'));\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\n\n\nvar DOMStorageWrapper =\n/** @class */\nfunction () {\n  /**\r\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  function DOMStorageWrapper(domStorage_) {\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param {string} key The key to save the value under\r\n   * @param {?Object} value The value being stored, or null to remove the key.\r\n   */\n\n\n  DOMStorageWrapper.prototype.set = function (key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   * @return {*} The value that was stored under this key, or null\r\n   */\n\n\n  DOMStorageWrapper.prototype.get = function (key) {\n    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n    if (storedVal == null) {\n      return null;\n    } else {\n      return util.jsonEval(storedVal);\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   */\n\n\n  DOMStorageWrapper.prototype.remove = function (key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  };\n  /**\r\n   * @param {string} name\r\n   * @return {string}\r\n   */\n\n\n  DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n    return this.prefix_ + name;\n  };\n\n  DOMStorageWrapper.prototype.toString = function () {\n    return this.domStorage_.toString();\n  };\n\n  return DOMStorageWrapper;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\n\n\nvar MemoryStorage =\n/** @class */\nfunction () {\n  function MemoryStorage() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  MemoryStorage.prototype.set = function (key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  };\n\n  MemoryStorage.prototype.get = function (key) {\n    if (util.contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n\n    return null;\n  };\n\n  MemoryStorage.prototype.remove = function (key) {\n    delete this.cache_[key];\n  };\n\n  return MemoryStorage;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\n\n\nvar createStoragefor = function createStoragefor(domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      var domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n\n\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\n\n\nvar PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\n\nvar SessionStorage = createStoragefor('sessionStorage');\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar logClient = new logger.Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\n\nvar LUIDGenerator = function () {\n  var id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\n\n\nvar sha1 = function sha1(str) {\n  var utf8Bytes = util.stringToByteArray(str);\n  var sha1 = new util.Sha1();\n  sha1.update(utf8Bytes);\n  var sha1Bytes = sha1.digest();\n  return util.base64.encodeByteArray(sha1Bytes);\n};\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\n\n\nvar buildLogMessage_ = function buildLogMessage_() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var message = '';\n\n  for (var i = 0; i < var_args.length; i++) {\n    if (Array.isArray(var_args[i]) || var_args[i] && typeof var_args[i] === 'object' && typeof var_args[i].length === 'number') {\n      message += buildLogMessage_.apply(null, var_args[i]);\n    } else if (typeof var_args[i] === 'object') {\n      message += util.stringify(var_args[i]);\n    } else {\n      message += var_args[i];\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\n\n\nvar logger$1 = null;\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\n\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\n\nvar enableLogging = function enableLogging(logger_, persistent) {\n  util.assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    logClient.logLevel = logger.LogLevel.VERBOSE;\n    logger$1 = logClient.log.bind(logClient);\n    if (persistent) SessionStorage.set('logging_enabled', true);\n  } else if (typeof logger_ === 'function') {\n    logger$1 = logger_;\n  } else {\n    logger$1 = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\n\n\nvar log = function log() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger$1 === null && SessionStorage.get('logging_enabled') === true) enableLogging(true);\n  }\n\n  if (logger$1) {\n    var message = buildLogMessage_.apply(null, var_args);\n    logger$1(message);\n  }\n};\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\n\n\nvar logWrapper = function logWrapper(prefix) {\n  return function () {\n    var var_args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      var_args[_i] = arguments[_i];\n    }\n\n    log.apply(void 0, [prefix].concat(var_args));\n  };\n};\n/**\r\n * @param {...string} var_args\r\n */\n\n\nvar error = function error() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\n  logClient.error(message);\n};\n/**\r\n * @param {...string} var_args\r\n */\n\n\nvar fatal = function fatal() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, var_args);\n  logClient.error(message);\n  throw new Error(message);\n};\n/**\r\n * @param {...*} var_args\r\n */\n\n\nvar warn = function warn() {\n  var var_args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    var_args[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\n\n\nvar warnIfPageIsSecure = function warnIfPageIsSecure() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\n\n\nvar isInvalidJSONNumber = function isInvalidJSONNumber(data) {\n  return typeof data === 'number' && (data != data || // NaN\n  data == Number.POSITIVE_INFINITY || data == Number.NEGATIVE_INFINITY);\n};\n/**\r\n * @param {function()} fn\r\n */\n\n\nvar executeWhenDOMReady = function executeWhenDOMReady(fn) {\n  if (util.isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    var called_1 = false;\n\n    var wrappedFn_1 = function wrappedFn_1() {\n      if (!document.body) {\n        setTimeout(wrappedFn_1, Math.floor(10));\n        return;\n      }\n\n      if (!called_1) {\n        called_1 = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn_1, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn_1, false);\n    } else if (document.attachEvent) {\n      // IE.\n      document.attachEvent('onreadystatechange', function () {\n        if (document.readyState === 'complete') wrappedFn_1();\n      }); // fallback to onload.\n\n      window.attachEvent('onload', wrappedFn_1); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\n\n\nvar MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\n\nvar MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\n\nvar nameCompare = function nameCompare(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    var aAsInt = tryParseInt(a),\n        bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\n\n\nvar stringCompare = function stringCompare(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\n\n\nvar requireKey = function requireKey(key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\n  }\n};\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\n\n\nvar ObjectToUniqueKey = function ObjectToUniqueKey(obj) {\n  if (typeof obj !== 'object' || obj === null) return util.stringify(obj);\n  var keys = [];\n\n  for (var k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  var key = '{';\n\n  for (var i = 0; i < keys.length; i++) {\n    if (i !== 0) key += ',';\n    key += util.stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\n\n\nvar splitStringBySize = function splitStringBySize(str, segsize) {\n  var len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  var dataSegs = [];\n\n  for (var c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\n\n\nvar each = function each(obj, fn) {\n  if (Array.isArray(obj)) {\n    for (var i = 0; i < obj.length; ++i) {\n      fn(i, obj[i]);\n    }\n  } else {\n    /**\r\n     * in the conversion of code we removed the goog.object.forEach\r\n     * function which did a value,key callback. We standardized on\r\n     * a single impl that does a key, value callback. So we invert\r\n     * to not have to touch the `each` code points\r\n     */\n    util.forEach(obj, function (key, val) {\n      return fn(val, key);\n    });\n  }\n};\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\n\n\nvar doubleToIEEE754String = function doubleToIEEE754String(v) {\n  util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  var ebits = 11,\n      fbits = 52;\n  var bias = (1 << ebits - 1) - 1,\n      s,\n      e,\n      f,\n      ln,\n      i,\n      bits,\n      str; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  str = bits.join(''); // Return the data as a hex string. --MJL\n\n  var hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) hexByte = '0' + hexByte;\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\n\n\nvar isChromeExtensionContentScript = function isChromeExtensionContentScript() {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\n\n\nvar isWindowsStoreApp = function isWindowsStoreApp() {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\n\n\nvar errorForServerCode = function errorForServerCode(code, query) {\n  var reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code == 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code == 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\n  error.code = code.toUpperCase();\n  return error;\n};\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\n\nvar tryParseInt = function tryParseInt(str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    var intVal = Number(str);\n\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\n\n\nvar exceptionGuard = function exceptionGuard(fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function () {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      var stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\n\n\nvar beingCrawled = function beingCrawled() {\n  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\n\n\nvar setTimeoutNonBlocking = function setTimeoutNonBlocking(fn, time) {\n  var timeout = setTimeout(fn, time);\n\n  if (typeof timeout === 'object' && timeout['unref']) {\n    timeout['unref']();\n  }\n\n  return timeout;\n};\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\n\n\nvar Path =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string|Array.<string>} pathOrString Path string to parse,\r\n   *      or another path, or the raw tokens array\r\n   * @param {number=} pieceNum\r\n   */\n  function Path(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.\n\n      var copyTo = 0;\n\n      for (var i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  Object.defineProperty(Path, \"Empty\", {\n    /**\r\n     * Singleton to represent an empty path\r\n     *\r\n     * @const\r\n     */\n    get: function get() {\n      return new Path('');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Path.prototype.getFront = function () {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n    return this.pieces_[this.pieceNum_];\n  };\n  /**\r\n   * @return {number} The number of segments in this path\r\n   */\n\n\n  Path.prototype.getLength = function () {\n    return this.pieces_.length - this.pieceNum_;\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n\n\n  Path.prototype.popFront = function () {\n    var pieceNum = this.pieceNum_;\n\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n\n    return new Path(this.pieces_, pieceNum);\n  };\n  /**\r\n   * @return {?string}\r\n   */\n\n\n  Path.prototype.getBack = function () {\n    if (this.pieceNum_ < this.pieces_.length) return this.pieces_[this.pieces_.length - 1];\n    return null;\n  };\n\n  Path.prototype.toString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') pathString += '/' + this.pieces_[i];\n    }\n\n    return pathString || '/';\n  };\n\n  Path.prototype.toUrlEncodedString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n    }\n\n    return pathString || '/';\n  };\n  /**\r\n   * Shallow copy of the parts of the path.\r\n   *\r\n   * @param {number=} begin\r\n   * @return {!Array<string>}\r\n   */\n\n\n  Path.prototype.slice = function (begin) {\n    if (begin === void 0) {\n      begin = 0;\n    }\n\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  };\n  /**\r\n   * @return {?Path}\r\n   */\n\n\n  Path.prototype.parent = function () {\n    if (this.pieceNum_ >= this.pieces_.length) return null;\n    var pieces = [];\n\n    for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) pieces.push(this.pieces_[i]);\n\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @param {string|!Path} childPathObj\r\n   * @return {!Path}\r\n   */\n\n\n  Path.prototype.child = function (childPathObj) {\n    var pieces = [];\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) pieces.push(this.pieces_[i]);\n\n    if (childPathObj instanceof Path) {\n      for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      var childPieces = childPathObj.split('/');\n\n      for (var i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) pieces.push(childPieces[i]);\n      }\n    }\n\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @return {boolean} True if there are no segments in this path\r\n   */\n\n\n  Path.prototype.isEmpty = function () {\n    return this.pieceNum_ >= this.pieces_.length;\n  };\n  /**\r\n   * @param {!Path} outerPath\r\n   * @param {!Path} innerPath\r\n   * @return {!Path} The path from outerPath to innerPath\r\n   */\n\n\n  Path.relativePath = function (outerPath, innerPath) {\n    var outer = outerPath.getFront(),\n        inner = innerPath.getFront();\n\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n    }\n  };\n  /**\r\n   * @param {!Path} left\r\n   * @param {!Path} right\r\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n   */\n\n\n  Path.comparePaths = function (left, right) {\n    var leftKeys = left.slice();\n    var rightKeys = right.slice();\n\n    for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      var cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) return cmp;\n    }\n\n    if (leftKeys.length === rightKeys.length) return 0;\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  };\n  /**\r\n   *\r\n   * @param {Path} other\r\n   * @return {boolean} true if paths are the same.\r\n   */\n\n\n  Path.prototype.equals = function (other) {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   *\r\n   * @param {!Path} other\r\n   * @return {boolean} True if this path is a parent (or the same as) other\r\n   */\n\n\n  Path.prototype.contains = function (other) {\n    var i = this.pieceNum_;\n    var j = other.pieceNum_;\n\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n\n      ++i;\n      ++j;\n    }\n\n    return true;\n  };\n\n  return Path;\n}(); // end Path\n\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\n\n\nvar ValidationPath =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Path} path Initial Path.\r\n   * @param {string} errorPrefix_ Prefix for any error messages.\r\n   */\n  function ValidationPath(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    /** @type {!Array<string>} */\n\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (var i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += util.stringLength(this.parts_[i]);\n    }\n\n    this.checkValid_();\n  }\n\n  Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\n    /** @const {number} Maximum key depth. */\n    get: function get() {\n      return 32;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\n    /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n    get: function get() {\n      return 768;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @param {string} child */\n\n  ValidationPath.prototype.push = function (child) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n\n    this.parts_.push(child);\n    this.byteLength_ += util.stringLength(child);\n    this.checkValid_();\n  };\n\n  ValidationPath.prototype.pop = function () {\n    var last = this.parts_.pop();\n    this.byteLength_ -= util.stringLength(last); // Un-count the previous '/'\n\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  };\n\n  ValidationPath.prototype.checkValid_ = function () {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(this.errorPrefix_ + 'has a key path longer than ' + ValidationPath.MAX_PATH_LENGTH_BYTES + ' bytes (' + this.byteLength_ + ').');\n    }\n\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(this.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + ValidationPath.MAX_PATH_DEPTH + ') or object contains a cycle ' + this.toErrorString());\n    }\n  };\n  /**\r\n   * String for use in error messages - uses '.' notation for path.\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  ValidationPath.prototype.toErrorString = function () {\n    if (this.parts_.length == 0) {\n      return '';\n    }\n\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  };\n\n  return ValidationPath;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PROTOCOL_VERSION = '5';\nvar VERSION_PARAM = 'v';\nvar TRANSPORT_SESSION_PARAM = 's';\nvar REFERER_PARAM = 'r';\nvar FORGE_REF = 'f';\nvar FORGE_DOMAIN = 'firebaseio.com';\nvar LAST_SESSION_PARAM = 'ls';\nvar WEBSOCKET = 'websocket';\nvar LONG_POLLING = 'long_polling';\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\n\nvar RepoInfo =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} host Hostname portion of the url for the repo\r\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n   * @param {string} namespace The namespace represented by the repo\r\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param {string=} persistenceKey Override the default session persistence storage key\r\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\n    if (persistenceKey === void 0) {\n      persistenceKey = '';\n    }\n\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.persistenceKey = persistenceKey;\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  RepoInfo.prototype.needsQueryParam = function () {\n    return this.host !== this.internalHost || this.isCustomHost();\n  };\n\n  RepoInfo.prototype.isCacheableHost = function () {\n    return this.internalHost.substr(0, 2) === 's-';\n  };\n\n  RepoInfo.prototype.isDemoHost = function () {\n    return this.domain === 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.isCustomHost = function () {\n    return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.updateHost = function (newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  };\n  /**\r\n   * Returns the websocket URL for this repo\r\n   * @param {string} type of connection\r\n   * @param {Object} params list\r\n   * @return {string} The URL for this repo\r\n   */\n\n\n  RepoInfo.prototype.connectionURL = function (type, params) {\n    util.assert(typeof type === 'string', 'typeof type must == string');\n    util.assert(typeof params === 'object', 'typeof params must == object');\n    var connURL;\n\n    if (type === WEBSOCKET) {\n      connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    var pairs = [];\n    util.forEach(params, function (key, value) {\n      pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toString = function () {\n    var str = this.toURLString();\n\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n\n    return str;\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toURLString = function () {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  };\n\n  return RepoInfo;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\n\n\nfunction decodePath(pathString) {\n  var pathStringDecoded = '';\n  var pieces = pathString.split('/');\n\n  for (var i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      var piece = pieces[i];\n\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n\n      pathStringDecoded += '/' + piece;\n    }\n  }\n\n  return pathStringDecoded;\n}\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\n\n\nfunction decodeQuery(queryString) {\n  var results = {};\n\n  if (queryString.startsWith('?')) {\n    queryString = queryString.substring(1);\n  }\n\n  for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\n    var segment = _a[_i];\n\n    if (segment.length === 0) {\n      continue;\n    }\n\n    var kv = segment.split('=');\n\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\n    }\n  }\n\n  return results;\n}\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\n\n\nvar parseRepoInfo = function parseRepoInfo(dataURL) {\n  var parsedUrl = parseURL(dataURL),\n      namespace = parsedUrl.subdomain;\n\n  if (parsedUrl.domain === 'firebase') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  } // Catch common error of uninitialized namespace value.\n\n\n  if ((!namespace || namespace == 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\n\n\nvar parseURL = function parseURL(dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  var host = '',\n      domain = '',\n      subdomain = '',\n      pathString = ''; // Always default to SSL, unless otherwise specified.\n\n  var secure = true,\n      scheme = 'https',\n      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.\n\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    var colonInd = dataURL.indexOf('//');\n\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    } // Parse host, path, and query string.\n\n\n    var slashInd = dataURL.indexOf('/');\n\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n\n    var questionMarkInd = dataURL.indexOf('?');\n\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n\n    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.\n\n    colonInd = host.indexOf(':');\n\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = dataURL.length;\n    }\n\n    var parts = host.split('.');\n\n    if (parts.length === 3) {\n      // Normalize namespaces to lowercase to share storage / connection.\n      domain = parts[1];\n      subdomain = parts[0].toLowerCase();\n    } else if (parts.length === 2) {\n      domain = parts[0];\n    } else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } // Support `ns` query param if subdomain not already set\n\n\n    if (subdomain === '' && 'ns' in queryParams) {\n      subdomain = queryParams['ns'];\n    }\n  }\n\n  return {\n    host: host,\n    port: port,\n    domain: domain,\n    subdomain: subdomain,\n    secure: secure,\n    scheme: scheme,\n    pathString: pathString\n  };\n};\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\n\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\n\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\n\nvar isValidKey = function isValidKey(key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\n\n\nvar isValidPathString = function isValidPathString(pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\n\n\nvar isValidRootPathString = function isValidRootPathString(pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\n\n\nvar isValidPriority = function isValidPriority(priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && util.contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\n\n\nvar validateFirebaseDataArg = function validateFirebaseDataArg(fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) return;\n  validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\n\n\nvar validateFirebaseData = function validateFirebaseData(errorPrefix, data, path_) {\n  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + path.toErrorString() + ' with contents = ' + data.toString());\n  }\n\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\n  } // Check max leaf size, but try to avoid the utf8 conversion if we can.\n\n\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && util.stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + path.toErrorString() + \" ('\" + data.substring(0, 50) + \"...')\");\n  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n\n\n  if (data && typeof data === 'object') {\n    var hasDotValue_1 = false,\n        hasActualChild_1 = false;\n    util.forEach(data, function (key, value) {\n      if (key === '.value') {\n        hasDotValue_1 = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild_1 = true;\n\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + path.toErrorString() + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue_1 && hasActualChild_1) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + path.toErrorString() + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\n\n\nvar validateFirebaseMergePaths = function validateFirebaseMergePaths(errorPrefix, mergePaths) {\n  var i, curPath;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    var keys = curPath.slice();\n\n    for (var j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {// .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  } // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n\n\n  mergePaths.sort(Path.comparePaths);\n  var prevPath = null;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\n\n\nvar validateFirebaseMergeDataArg = function validateFirebaseMergeDataArg(fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) return;\n  var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix + ' must be an object containing the children to replace.');\n  }\n\n  var mergePaths = [];\n  util.forEach(data, function (key, value) {\n    var curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nvar validatePriority = function validatePriority(fnName, argumentNumber, priority, optional) {\n  if (optional && priority === undefined) return;\n  if (isInvalidJSONNumber(priority)) throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).'); // Special case to allow importing data with a .sv.\n\n  if (!isValidPriority(priority)) throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n};\n\nvar validateEventType = function validateEventType(fnName, argumentNumber, eventType, optional) {\n  if (optional && eventType === undefined) return;\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n\n    default:\n      throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\n\nvar validateKey = function validateKey(fnName, argumentNumber, key, optional) {\n  if (optional && key === undefined) return;\n  if (!isValidKey(key)) throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n};\n\nvar validatePathString = function validatePathString(fnName, argumentNumber, pathString, optional) {\n  if (optional && pathString === undefined) return;\n  if (!isValidPathString(pathString)) throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n};\n\nvar validateRootPathString = function validateRootPathString(fnName, argumentNumber, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nvar validateWritablePath = function validateWritablePath(fnName, path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nvar validateUrl = function validateUrl(fnName, argumentNumber, parsedUrl) {\n  // TODO = Validate server better.\n  var pathString = parsedUrl.path.toString();\n\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, false) + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\nvar validateBoolean = function validateBoolean(fnName, argumentNumber, bool, optional) {\n  if (optional && bool === undefined) return;\n  if (typeof bool !== 'boolean') throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\n};\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n */\n\n\nvar OnDisconnect =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Repo} repo_\r\n   * @param {!Path} path_\r\n   */\n  function OnDisconnect(repo_, path_) {\n    this.repo_ = repo_;\n    this.path_ = path_;\n  }\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.cancel = function (onComplete) {\n    util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.remove = function (onComplete) {\n    util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.set = function (value, onComplete) {\n    util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    util.validateCallback('OnDisconnect.set', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {number|string|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n    util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n    util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n\n    validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n    util.validateCallback('OnDisconnect.update', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n\n  return OnDisconnect;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar TransactionResult =\n/** @class */\nfunction () {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   * @constructor\r\n   * @dict\r\n   * @param {boolean} committed\r\n   * @param {DataSnapshot} snapshot\r\n   */\n  function TransactionResult(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  TransactionResult.prototype.toJSON = function () {\n    util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  };\n\n  return TransactionResult;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\n\n\nvar nextPushId = function () {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'; // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n\n  var lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n\n  var lastRandChars = [];\n  return function (now) {\n    var duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    var i;\n    var timeStampChars = new Array(8);\n\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n\n      now = Math.floor(now / 64);\n    }\n\n    util.assert(now === 0, 'Cannot push at time == 0');\n    var id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n\n      lastRandChars[i]++;\n    }\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    util.assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\n\n\nvar NamedNode =\n/** @class */\nfunction () {\n  function NamedNode(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  /**\r\n   *\r\n   * @param {!string} name\r\n   * @param {!Node} node\r\n   * @return {NamedNode}\r\n   */\n\n\n  NamedNode.Wrap = function (name, node) {\n    return new NamedNode(name, node);\n  };\n\n  return NamedNode;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @constructor\r\n */\n\n\nvar Index =\n/** @class */\nfunction () {\n  function Index() {}\n  /**\r\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n   * this index\r\n   */\n\n\n  Index.prototype.getCompare = function () {\n    return this.compare.bind(this);\n  };\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   * @param {!Node} oldNode\r\n   * @param {!Node} newNode\r\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n\n\n  Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n    var oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    var newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  };\n  /**\r\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n\n\n  Index.prototype.minPost = function () {\n    return NamedNode.MIN;\n  };\n\n  return Index;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __EMPTY_NODE;\n\nvar KeyIndex =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(KeyIndex, _super);\n\n  function KeyIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n    get: function get() {\n      return __EMPTY_NODE;\n    },\n    set: function set(val) {\n      __EMPTY_NODE = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @inheritDoc\r\n   */\n\n  KeyIndex.prototype.compare = function (a, b) {\n    return nameCompare(a.name, b.name);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.isDefinedOn = function (node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return false; // The key for a node never changes.\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.minPost = function () {\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.maxPost = function () {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  KeyIndex.prototype.makePost = function (indexValue, name) {\n    util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  KeyIndex.prototype.toString = function () {\n    return '.key';\n  };\n\n  return KeyIndex;\n}(Index);\n\nvar KEY_INDEX = new KeyIndex();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar MAX_NODE;\n\nfunction setMaxNode(val) {\n  MAX_NODE = val;\n}\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\n\n\nvar priorityHashText = function priorityHashText(priority) {\n  if (typeof priority === 'number') return 'number:' + doubleToIEEE754String(priority);else return 'string:' + priority;\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\n\n\nvar validatePriorityNode = function validatePriorityNode(priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    util.assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && util.contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\n\n\nvar LeafNode =\n/** @class */\nfunction () {\n  /**\r\n   * @implements {Node}\r\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n   *                                         The object type is possible in the event of a deferred value\r\n   * @param {!Node=} priorityNode_ The priority of this node.\r\n   */\n  function LeafNode(value_, priorityNode_) {\n    if (priorityNode_ === void 0) {\n      priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n    get: function get() {\n      return __childrenNodeConstructor;\n    },\n    set: function set(val) {\n      __childrenNodeConstructor = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  LeafNode.prototype.isLeafNode = function () {\n    return true;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPriority = function () {\n    return this.priorityNode_;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updatePriority = function (newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getChild = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.hasChild = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n    return null;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.numChildren = function () {\n    return 0;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.forEachChild = function (index, action) {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.val = function (exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) return {\n      '.value': this.getValue(),\n      '.priority': this.getPriority().val()\n    };else return this.getValue();\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash = '';\n      if (!this.priorityNode_.isEmpty()) toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      var type = typeof this.value_;\n      toHash += type + ':';\n\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n\n      this.lazyHash_ = sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  };\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @return {Object|string|number|boolean} The value of the node.\r\n   */\n\n\n  LeafNode.prototype.getValue = function () {\n    return this.value_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.compareTo = function (other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      util.assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  };\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   * @param {!LeafNode} otherLeaf\r\n   * @return {!number}\r\n   * @private\r\n   */\n\n\n  LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n    var otherLeafType = typeof otherLeaf.value_;\n    var thisLeafType = typeof this.value_;\n    var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.withIndex = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.isIndexed = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.equals = function (other) {\n    /**\r\n     * @inheritDoc\r\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      var otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n   * the same type, the comparison falls back to their value\r\n   * @type {Array.<!string>}\r\n   * @const\r\n   */\n\n\n  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n  return LeafNode;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar nodeFromJSON;\nvar MAX_NODE$1;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON = val;\n}\n\nfunction setMaxNode$1(val) {\n  MAX_NODE$1 = val;\n}\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\n\nvar PriorityIndex =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PriorityIndex, _super);\n\n  function PriorityIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.compare = function (a, b) {\n    var aPriority = a.node.getPriority();\n    var bPriority = b.node.getPriority();\n    var indexCmp = aPriority.compareTo(bPriority);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.isDefinedOn = function (node) {\n    return !node.getPriority().isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.minPost = function () {\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.maxPost = function () {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  PriorityIndex.prototype.makePost = function (indexValue, name) {\n    var priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  PriorityIndex.prototype.toString = function () {\n    return '.priority';\n  };\n\n  return PriorityIndex;\n}(Index);\n\nvar PRIORITY_INDEX = new PriorityIndex();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An iterator over an LLRBNode.\r\n */\n\nvar SortedMapIterator =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V, T\r\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n   * @param {?K} startKey\r\n   * @param {function(K, K): number} comparator\r\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n   * @param {(function(K, V):T)=} resultGenerator_\r\n   */\n  function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n    if (resultGenerator_ === void 0) {\n      resultGenerator_ = null;\n    }\n\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    /** @private\r\n     * @type {Array.<!LLRBNode>}\r\n     */\n\n    this.nodeStack_ = [];\n    var cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) cmp *= -1;\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  SortedMapIterator.prototype.getNext = function () {\n    if (this.nodeStack_.length === 0) return null;\n    var node = this.nodeStack_.pop();\n    var result;\n    if (this.resultGenerator_) result = this.resultGenerator_(node.key, node.value);else result = {\n      key: node.key,\n      value: node.value\n    };\n\n    if (this.isReverse_) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  };\n\n  SortedMapIterator.prototype.hasNext = function () {\n    return this.nodeStack_.length > 0;\n  };\n\n  SortedMapIterator.prototype.peek = function () {\n    if (this.nodeStack_.length === 0) return null;\n    var node = this.nodeStack_[this.nodeStack_.length - 1];\n\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  };\n\n  return SortedMapIterator;\n}();\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\n\n\nvar LLRBNode =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V\r\n   * @param {!K} key Key associated with this node.\r\n   * @param {!V} value Value associated with this node.\r\n   * @param {?boolean} color Whether this node is red.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n   */\n  function LLRBNode(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param {?K} key New key for the node, or null.\r\n   * @param {?V} value New value for the node, or null.\r\n   * @param {?boolean} color New color for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n   * @return {!LLRBNode} The node copy.\r\n   */\n\n\n  LLRBNode.prototype.copy = function (key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n\n\n  LLRBNode.prototype.count = function () {\n    return this.left.count() + 1 + this.right.count();\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n\n\n  LLRBNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  LLRBNode.prototype.inorderTraversal = function (action) {\n    return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {*} True if traversal was aborted.\r\n   */\n\n\n  LLRBNode.prototype.reverseTraversal = function (action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  };\n  /**\r\n   * @return {!Object} The minimum node in the tree.\r\n   * @private\r\n   */\n\n\n  LLRBNode.prototype.min_ = function () {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.minKey = function () {\n    return this.min_().key;\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.maxKey = function () {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Object} key Key to insert.\r\n   * @param {!Object} value Value to insert.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with the key/value added.\r\n   */\n\n\n  LLRBNode.prototype.insert = function (key, value, comparator) {\n    var cmp, n;\n    n = this;\n    cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n   */\n\n\n  LLRBNode.prototype.removeMin_ = function () {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n\n    var n = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  };\n  /**\r\n   * @param {!Object} key The key of the item to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n   */\n\n\n  LLRBNode.prototype.remove = function (key, comparator) {\n    var n, smallest;\n    n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) n = n.rotateRight_();\n\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this is a RED node.\r\n   */\n\n\n  LLRBNode.prototype.isRed_ = function () {\n    return this.color;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree after performing any needed rotations.\r\n   */\n\n\n  LLRBNode.prototype.fixUp_ = function () {\n    var n = this;\n    if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();\n    if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();\n    if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedLeft.\r\n   */\n\n\n  LLRBNode.prototype.moveRedLeft_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedRight.\r\n   */\n\n\n  LLRBNode.prototype.moveRedRight_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateLeft.\r\n   */\n\n\n  LLRBNode.prototype.rotateLeft_ = function () {\n    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateRight.\r\n   */\n\n\n  LLRBNode.prototype.rotateRight_ = function () {\n    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after colorFlip.\r\n   */\n\n\n  LLRBNode.prototype.colorFlip_ = function () {\n    var left = this.left.copy(null, null, !this.left.color, null, null);\n    var right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  };\n  /**\r\n   * For testing.\r\n   *\r\n   * @private\r\n   * @return {boolean} True if all is well.\r\n   */\n\n\n  LLRBNode.prototype.checkMaxDepth_ = function () {\n    var blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n\n\n  LLRBNode.prototype.check_ = function () {\n    var blackDepth;\n\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n\n    blackDepth = this.left.check_();\n\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  };\n\n  LLRBNode.RED = true;\n  LLRBNode.BLACK = false;\n  return LLRBNode;\n}();\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\n\n\nvar LLRBEmptyNode =\n/** @class */\nfunction () {\n  function LLRBEmptyNode() {}\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @return {!LLRBEmptyNode} The node copy.\r\n   */\n\n\n  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n    return this;\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with item added.\r\n   */\n\n\n  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBEmptyNode} New tree, with item removed.\r\n   */\n\n\n  LLRBEmptyNode.prototype.remove = function (key, comparator) {\n    return this;\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n\n\n  LLRBEmptyNode.prototype.count = function () {\n    return 0;\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isEmpty = function () {\n    return true;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * @return {null}\r\n   */\n\n\n  LLRBEmptyNode.prototype.minKey = function () {\n    return null;\n  };\n  /**\r\n   * @return {null}\r\n   */\n\n\n  LLRBEmptyNode.prototype.maxKey = function () {\n    return null;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n\n\n  LLRBEmptyNode.prototype.check_ = function () {\n    return 0;\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this node is red.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isRed_ = function () {\n    return false;\n  };\n\n  return LLRBEmptyNode;\n}();\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\n\n\nvar SortedMap =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V\r\n   * @param {function(K, K):number} comparator_ Key comparator.\r\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n   */\n  function SortedMap(comparator_, root_) {\n    if (root_ === void 0) {\n      root_ = SortedMap.EMPTY_NODE;\n    }\n\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @return {!SortedMap.<K, V>} New map, with item added.\r\n   */\n\n\n  SortedMap.prototype.insert = function (key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @return {!SortedMap.<K, V>} New map, with item removed.\r\n   */\n\n\n  SortedMap.prototype.remove = function (key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param {!K} key The key to look up.\r\n   * @return {?V} The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n\n\n  SortedMap.prototype.get = function (key) {\n    var cmp;\n    var node = this.root_;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param {K} key The key to find the predecessor of\r\n   * @return {?K} The predecessor key.\r\n   */\n\n\n  SortedMap.prototype.getPredecessorKey = function (key) {\n    var cmp,\n        node = this.root_,\n        rightParent = null;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n\n          while (!node.right.isEmpty()) node = node.right;\n\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  };\n  /**\r\n   * @return {boolean} True if the map is empty.\r\n   */\n\n\n  SortedMap.prototype.isEmpty = function () {\n    return this.root_.isEmpty();\n  };\n  /**\r\n   * @return {number} The total number of nodes in the map.\r\n   */\n\n\n  SortedMap.prototype.count = function () {\n    return this.root_.count();\n  };\n  /**\r\n   * @return {?K} The minimum key in the map.\r\n   */\n\n\n  SortedMap.prototype.minKey = function () {\n    return this.root_.minKey();\n  };\n  /**\r\n   * @return {?K} The maximum key in the map.\r\n   */\n\n\n  SortedMap.prototype.maxKey = function () {\n    return this.root_.maxKey();\n  };\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  SortedMap.prototype.inorderTraversal = function (action) {\n    return this.root_.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} True if the traversal was aborted.\r\n   */\n\n\n  SortedMap.prototype.reverseTraversal = function (action) {\n    return this.root_.reverseTraversal(action);\n  };\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @template T\r\n   * @param {(function(K, V):T)=} resultGenerator\r\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n   */\n\n\n  SortedMap.prototype.getIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  };\n  /**\r\n   * Always use the same empty node, to reduce memory.\r\n   * @const\r\n   */\n\n\n  SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n  return SortedMap;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_2 = Math.log(2);\n/**\r\n * @constructor\r\n */\n\nvar Base12Num =\n/** @class */\nfunction () {\n  /**\r\n   * @param {number} length\r\n   */\n  function Base12Num(length) {\n    var logBase2 = function logBase2(num) {\n      return parseInt(Math.log(num) / LOG_2, 10);\n    };\n\n    var bitMask = function bitMask(bits) {\n      return parseInt(Array(bits + 1).join('1'), 2);\n    };\n\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    var mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  Base12Num.prototype.nextBitIsOne = function () {\n    //noinspection JSBitwiseOperatorUsage\n    var result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  };\n\n  return Base12Num;\n}();\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\n\n\nvar buildChildSet = function buildChildSet(childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n\n  var buildBalancedTree = function buildBalancedTree(low, high) {\n    var length = high - low;\n    var namedNode;\n    var key;\n\n    if (length == 0) {\n      return null;\n    } else if (length == 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      var middle = parseInt(length / 2, 10) + low;\n      var left = buildBalancedTree(low, middle);\n      var right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  var buildFrom12Array = function buildFrom12Array(base12) {\n    var node = null;\n    var root = null;\n    var index = childList.length;\n\n    var buildPennant = function buildPennant(chunkSize, color) {\n      var low = index - chunkSize;\n      var high = index;\n      index -= chunkSize;\n      var childTree = buildBalancedTree(low + 1, high);\n      var namedNode = childList[low];\n      var key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n\n    var attachPennant = function attachPennant(pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (var i = 0; i < base12.count; ++i) {\n      var isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n\n      var chunkSize = Math.pow(2, base12.count - (i + 1));\n\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n\n    return root;\n  };\n\n  var base12 = new Base12Num(childList.length);\n  var root = buildFrom12Array(base12);\n  return new SortedMap(mapSortFn || cmp, root);\n};\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _defaultIndexMap;\n\nvar fallbackObject = {};\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\n\nvar IndexMap =\n/** @class */\nfunction () {\n  function IndexMap(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n\n  Object.defineProperty(IndexMap, \"Default\", {\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     * @type {!IndexMap}\r\n     * @const\r\n     */\n    get: function get() {\n      util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n      _defaultIndexMap = _defaultIndexMap || new IndexMap({\n        '.priority': fallbackObject\n      }, {\n        '.priority': PRIORITY_INDEX\n      });\n      return _defaultIndexMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   *\r\n   * @param {!string} indexKey\r\n   * @return {?SortedMap.<NamedNode, Node>}\r\n   */\n\n  IndexMap.prototype.get = function (indexKey) {\n    var sortedMap = util.safeGet(this.indexes_, indexKey);\n    if (!sortedMap) throw new Error('No index defined for ' + indexKey);\n\n    if (sortedMap === fallbackObject) {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    } else {\n      return sortedMap;\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {boolean}\r\n   */\n\n\n  IndexMap.prototype.hasIndex = function (indexDefinition) {\n    return util.contains(this.indexSet_, indexDefinition.toString());\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @param {!SortedMap.<string, !Node>} existingChildren\r\n   * @return {!IndexMap}\r\n   */\n\n\n  IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\n    util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    var childList = [];\n    var sawIndexedValue = false;\n    var iter = existingChildren.getIterator(NamedNode.Wrap);\n    var next = iter.getNext();\n\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n\n    var newIndex;\n\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n\n    var indexName = indexDefinition.toString();\n    var newIndexSet = util.clone(this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    var newIndexes = util.clone(this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  };\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   * @param {!NamedNode} namedNode\r\n   * @param {!SortedMap.<string, !Node>} existingChildren\r\n   * @return {!IndexMap}\r\n   */\n\n\n  IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\n    var _this = this;\n\n    var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\n      var index = util.safeGet(_this.indexSet_, indexName);\n      util.assert(index, 'Missing index implementation for ' + indexName);\n\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          var childList = [];\n          var iter = existingChildren.getIterator(NamedNode.Wrap);\n          var next = iter.getNext();\n\n          while (next) {\n            if (next.name != namedNode.name) {\n              childList.push(next);\n            }\n\n            next = iter.getNext();\n          }\n\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n        var newChildren = indexedChildren;\n\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   * @param {!NamedNode} namedNode\r\n   * @param {!SortedMap.<string, !Node>} existingChildren\r\n   * @return {!IndexMap}\r\n   */\n\n\n  IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\n    var newIndexes = util.map(this.indexes_, function (indexedChildren) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n\n  return IndexMap;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\n\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\n\nvar EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\n\nvar ChildrenNode =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!SortedMap.<string, !Node>} children_ List of children\r\n   * of this node..\r\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n   * @param {!IndexMap} indexMap_\r\n   */\n  function ChildrenNode(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n\n  Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n    get: function get() {\n      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  ChildrenNode.prototype.isLeafNode = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPriority = function () {\n    return this.priorityNode_ || EMPTY_NODE;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      var child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getChild = function (path) {\n    var front = path.getFront();\n    if (front === null) return this;\n    return this.getImmediateChild(front).getChild(path.popFront());\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hasChild = function (childName) {\n    return this.children_.get(childName) !== null;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    util.assert(newChildNode, 'We should always be passing snapshot nodes');\n\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      var namedNode = new NamedNode(childName, newChildNode);\n      var newChildren = void 0,\n          newIndexMap = void 0,\n          newPriority = void 0;\n\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return newChildNode;\n    } else {\n      util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.isEmpty = function () {\n    return this.children_.isEmpty();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.numChildren = function () {\n    return this.children_.count();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.val = function (exportFormat) {\n    if (this.isEmpty()) return null;\n    var obj = {};\n    var numKeys = 0,\n        maxKey = 0,\n        allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      var array = [];\n\n      for (var key in obj) array[key] = obj[key];\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n\n      return obj;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash_1 = '';\n      if (!this.getPriority().isEmpty()) toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        var childHash = childNode.hash();\n        if (childHash !== '') toHash_1 += ':' + key + ':' + childHash;\n      });\n      this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\n    }\n\n    return this.lazyHash_;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n\n\n  ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n\n\n  ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n    var minKey = this.getFirstChildName(indexDefinition);\n\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n\n\n  ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n\n\n  ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n    var maxKey = this.getLastChildName(indexDefinition);\n\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.forEachChild = function (index, action) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      return idx.inorderTraversal(function (wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getIterator = function (indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  };\n  /**\r\n   *\r\n   * @param {!NamedNode} startPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getIteratorFrom(startPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  };\n  /**\r\n   * @param {!NamedNode} endPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.compareTo = function (other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE$2) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.withIndex = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.isIndexed = function (index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      var otherChildrenNode = other;\n\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        var thisIter = this.getIterator(PRIORITY_INDEX);\n        var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        var thisCurrent = thisIter.getNext();\n        var otherCurrent = otherIter.getNext();\n\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  };\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   * @private\r\n   * @param {!Index} indexDefinition\r\n   * @return {?SortedMap.<NamedNode, Node>}\r\n   */\n\n\n  ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  };\n  /**\r\n   * @private\r\n   * @type {RegExp}\r\n   */\n\n\n  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n  return ChildrenNode;\n}();\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\n\n\nvar MaxNode =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MaxNode, _super);\n\n  function MaxNode() {\n    return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\n  }\n\n  MaxNode.prototype.compareTo = function (other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  MaxNode.prototype.equals = function (other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  };\n\n  MaxNode.prototype.getPriority = function () {\n    return this;\n  };\n\n  MaxNode.prototype.getImmediateChild = function (childName) {\n    return ChildrenNode.EMPTY_NODE;\n  };\n\n  MaxNode.prototype.isEmpty = function () {\n    return false;\n  };\n\n  return MaxNode;\n}(ChildrenNode);\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\n\n\nvar MAX_NODE$2 = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE$2)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\n\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE$2);\nsetMaxNode$1(MAX_NODE$2);\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\n\nfunction nodeFromJSON$1(json, priority) {\n  if (priority === void 0) {\n    priority = null;\n  }\n\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  util.assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children_1 = [];\n    var childrenHavePriority_1 = false;\n    var hinzeJsonObj_1 = json;\n    util.forEach(hinzeJsonObj_1, function (key, child) {\n      if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n          children_1.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children_1.length == 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, NAME_COMPARATOR);\n\n    if (childrenHavePriority_1) {\n      var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\n    }\n  } else {\n    var node_1 = ChildrenNode.EMPTY_NODE;\n    var jsonObj_1 = json;\n    util.forEach(jsonObj_1, function (key, childData) {\n      if (util.contains(jsonObj_1, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON$1(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) node_1 = node_1.updateImmediateChild(key, childNode);\n        }\n      }\n    });\n    return node_1.updatePriority(nodeFromJSON$1(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON$1);\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\nvar ValueIndex =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ValueIndex, _super);\n\n  function ValueIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.compare = function (a, b) {\n    var indexCmp = a.node.compareTo(b.node);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.isDefinedOn = function (node) {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.minPost = function () {\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.maxPost = function () {\n    return NamedNode.MAX;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  ValueIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, valueNode);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  ValueIndex.prototype.toString = function () {\n    return '.value';\n  };\n\n  return ValueIndex;\n}(Index);\n\nvar VALUE_INDEX = new ValueIndex();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\n\nvar PathIndex =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PathIndex, _super);\n\n  function PathIndex(indexPath_) {\n    var _this = _super.call(this) || this;\n\n    _this.indexPath_ = indexPath_;\n    util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    return _this;\n  }\n  /**\r\n   * @param {!Node} snap\r\n   * @return {!Node}\r\n   * @protected\r\n   */\n\n\n  PathIndex.prototype.extractChild = function (snap) {\n    return snap.getChild(this.indexPath_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.isDefinedOn = function (node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.compare = function (a, b) {\n    var aChild = this.extractChild(a.node);\n    var bChild = this.extractChild(b.node);\n    var indexCmp = aChild.compareTo(bChild);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.maxPost = function () {\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\n    return new NamedNode(MAX_NAME, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.toString = function () {\n    return this.indexPath_.slice().join('/');\n  };\n\n  return PathIndex;\n}(Index);\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\n\n\nvar DataSnapshot =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Node} node_ A SnapshotNode to wrap.\r\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n   * @param {!Index} index_ The iteration order for this snapshot\r\n   */\n  function DataSnapshot(node_, ref_, index_) {\n    this.node_ = node_;\n    this.ref_ = ref_;\n    this.index_ = index_;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.val = function () {\n    util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  };\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.exportVal = function () {\n    util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  DataSnapshot.prototype.toJSON = function () {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  };\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n   */\n\n\n  DataSnapshot.prototype.exists = function () {\n    util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  };\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {!DataSnapshot} DataSnapshot for child node.\r\n   */\n\n\n  DataSnapshot.prototype.child = function (childPathString) {\n    util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length); // Ensure the childPath is a string (can be a number)\n\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    var childRef = this.ref_.child(childPath);\n    return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\n  };\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {boolean} Whether the child exists.\r\n   */\n\n\n  DataSnapshot.prototype.hasChild = function (childPathString) {\n    util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  };\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @return {string|number|null} The priority.\r\n   */\n\n\n  DataSnapshot.prototype.getPriority = function () {\n    util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length); // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n\n    return this.node_.getPriority().val();\n  };\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param {function(!DataSnapshot)} action Callback function to be called\r\n   * for each child.\r\n   * @return {boolean} True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.forEach = function (action) {\n    var _this = this;\n\n    util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    util.validateCallback('DataSnapshot.forEach', 1, action, false);\n    if (this.node_.isLeafNode()) return false;\n    var childrenNode = this.node_; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n\n    return !!childrenNode.forEachChild(this.index_, function (key, node) {\n      return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\n    });\n  };\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.hasChildren = function () {\n    util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    if (this.node_.isLeafNode()) return false;else return !this.node_.isEmpty();\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"key\", {\n    get: function get() {\n      return this.ref_.getKey();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @return {number} The number of children that this DataSnapshot contains.\r\n   */\n\n  DataSnapshot.prototype.numChildren = function () {\n    util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this.node_.numChildren();\n  };\n  /**\r\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n   */\n\n\n  DataSnapshot.prototype.getRef = function () {\n    util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return this.ref_;\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n    get: function get() {\n      return this.getRef();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DataSnapshot;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\n\n\nvar DataEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n   * @param {!DataSnapshot} snapshot The data backing the event\r\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n   */\n  function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getPath = function () {\n    var ref = this.snapshot.getRef();\n\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getEventType = function () {\n    return this.eventType;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.toString = function () {\n    return this.getPath().toString() + ':' + this.eventType + ':' + util.stringify(this.snapshot.exportVal());\n  };\n\n  return DataEvent;\n}();\n\nvar CancelEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param {EventRegistration} eventRegistration\r\n   * @param {Error} error\r\n   * @param {!Path} path\r\n   */\n  function CancelEvent(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getPath = function () {\n    return this.path;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getEventType = function () {\n    return 'cancel';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.toString = function () {\n    return this.path.toString() + ':cancel';\n  };\n\n  return CancelEvent;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents registration for 'value' events.\r\n */\n\n\nvar ValueEventRegistration =\n/** @class */\nfunction () {\n  /**\r\n   * @param {?function(!DataSnapshot)} callback_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {?Object} context_\r\n   */\n  function ValueEventRegistration(callback_, cancelCallback_, context_) {\n    this.callback_ = callback_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.respondsTo = function (eventType) {\n    return eventType === 'value';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.createEvent = function (change, query) {\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n\n    if (eventData.getEventType() === 'cancel') {\n      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_1 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_1.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_1 = this.callback_;\n      return function () {\n        cb_1.call(ctx, eventData.snapshot);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.matches = function (other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callback_ === this.callback_ && other.context_ === this.context_;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callback_ !== null;\n  };\n\n  return ValueEventRegistration;\n}();\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\n\n\nvar ChildEventRegistration =\n/** @class */\nfunction () {\n  /**\r\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {Object=} context_\r\n   */\n  function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\n    this.callbacks_ = callbacks_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.respondsTo = function (eventType) {\n    var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return util.contains(this.callbacks_, eventToCheck);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.createEvent = function (change, query) {\n    util.assert(change.childName != null, 'Child events should have a childName.');\n    var ref = query.getRef().child(\n    /** @type {!string} */\n    change.childName);\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n\n    if (eventData.getEventType() === 'cancel') {\n      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_2 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_2.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_2 = this.callbacks_[eventData.eventType];\n      return function () {\n        cb_2.call(ctx, eventData.snapshot, eventData.prevName);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.matches = function (other) {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        var otherCount = util.getCount(other.callbacks_);\n        var thisCount = util.getCount(this.callbacks_);\n\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          //  If event types don't match, not a match\n          // If count is not 1, exact match across all\n          if (otherCount === 1) {\n            var otherKey\n            /** @type {!string} */\n            = util.getAnyKey(other.callbacks_);\n            var thisKey\n            /** @type {!string} */\n            = util.getAnyKey(this.callbacks_);\n            return thisKey === otherKey && (!other.callbacks_[otherKey] || !this.callbacks_[thisKey] || other.callbacks_[otherKey] === this.callbacks_[thisKey]);\n          } else {\n            // Exact match on each key.\n            return util.every(this.callbacks_, function (eventType, cb) {\n              return other.callbacks_[eventType] === cb;\n            });\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callbacks_ !== null;\n  };\n\n  return ChildEventRegistration;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __referenceConstructor;\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\n\n\nvar Query =\n/** @class */\nfunction () {\n  function Query(repo, path, queryParams_, orderByCalled_) {\n    this.repo = repo;\n    this.path = path;\n    this.queryParams_ = queryParams_;\n    this.orderByCalled_ = orderByCalled_;\n  }\n\n  Object.defineProperty(Query, \"__referenceConstructor\", {\n    get: function get() {\n      util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\n      return __referenceConstructor;\n    },\n    set: function set(val) {\n      __referenceConstructor = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates start/end values for queries.\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n\n  Query.validateQueryEndpoints_ = function (params) {\n    var startNode = null;\n    var endNode = null;\n\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n      var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' + 'or equalTo() must be a string.';\n\n      if (params.hasStart()) {\n        var startName = params.getIndexStartName();\n\n        if (startName != MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n\n      if (params.hasEnd()) {\n        var endName = params.getIndexEndName();\n\n        if (endName != MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n        throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\n      }\n    } else {\n      util.assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n\n      if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n        throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' + 'an object.');\n      }\n    }\n  };\n  /**\r\n   * Validates that limit* has been called with the correct combination of parameters\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n\n\n  Query.validateLimit_ = function (params) {\n    if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n      throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\n    }\n  };\n  /**\r\n   * Validates that no other order by call has been made\r\n   * @param {!string} fnName\r\n   * @private\r\n   */\n\n\n  Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   */\n\n\n  Query.prototype.getQueryParams = function () {\n    return this.queryParams_;\n  };\n  /**\r\n   * @return {!Reference}\r\n   */\n\n\n  Query.prototype.getRef = function () {\n    util.validateArgCount('Query.ref', 0, 0, arguments.length); // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n\n    return new Query.__referenceConstructor(this.repo, this.path);\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @param {!function(DataSnapshot, string=)} callback\r\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n   * @param {Object=} context\r\n   * @return {!function(DataSnapshot, string=)}\r\n   */\n\n\n  Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\n    util.validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    util.validateCallback('Query.on', 2, callback, false);\n    var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      var callbacks = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n\n    return callback;\n  };\n  /**\r\n   * @param {!function(!DataSnapshot)} callback\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n\n\n  Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\n    var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n\n\n  Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\n    var container = new ChildEventRegistration(callbacks, cancelCallback, context);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {string=} eventType\r\n   * @param {(function(!DataSnapshot, ?string=))=} callback\r\n   * @param {Object=} context\r\n   */\n\n\n  Query.prototype.off = function (eventType, callback, context) {\n    util.validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    util.validateCallback('Query.off', 2, callback, true);\n    util.validateContextObject('Query.off', 3, context, true);\n    var container = null;\n    var callbacks = null;\n\n    if (eventType === 'value') {\n      var valueCallback = callback || null;\n      container = new ValueEventRegistration(valueCallback, null, context || null);\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n\n    this.repo.removeEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   * @param {!string} eventType\r\n   * @param {!function(!DataSnapshot, string=)} userCallback\r\n   * @param cancelOrContext\r\n   * @param context\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\n    var _this = this;\n\n    util.validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    util.validateCallback('Query.once', 2, userCallback, true);\n    var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context); // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n\n    var firstCall = true;\n    var deferred = new util.Deferred(); // A dummy error handler in case a user wasn't expecting promises\n\n    deferred.promise.catch(function () {});\n\n    var onceCallback = function onceCallback(snapshot) {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n\n        _this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(eventType, onceCallback,\n    /*cancel=*/\n    function (err) {\n      _this.off(eventType, onceCallback);\n\n      if (ret.cancel) ret.cancel.bind(ret.context)(err);\n      deferred.reject(err);\n    });\n    return deferred.promise;\n  };\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.limitToFirst = function (limit) {\n    util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToFirst: First argument must be a positive integer.');\n    }\n\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n\n    return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.limitToLast = function (limit) {\n    util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToLast: First argument must be a positive integer.');\n    }\n\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n\n    return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   * @param {!string} path\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByChild = function (path) {\n    util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n\n    if (path === '$key') {\n      throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\n    } else if (path === '$priority') {\n      throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\n    } else if (path === '$value') {\n      throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\n    }\n\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    var parsedPath = new Path(path);\n\n    if (parsedPath.isEmpty()) {\n      throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\n    }\n\n    var index = new PathIndex(parsedPath);\n    var newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByKey = function () {\n    util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    var newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByPriority = function () {\n    util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByValue = function () {\n    util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    var newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.startAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    util.validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n    var newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' + 'or equalTo).');\n    } // Calling with no params tells us to start at the beginning.\n\n\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.endAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    util.validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n    var newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   * @param {number|string|boolean|null} value\r\n   * @param {string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.equalTo = function (value, name) {\n    util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' + 'equalTo).');\n    }\n\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n\n    return this.startAt(value, name).endAt(value, name);\n  };\n  /**\r\n   * @return {!string} URL for this location.\r\n   */\n\n\n  Query.prototype.toString = function () {\n    util.validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n\n\n  Query.prototype.toJSON = function () {\n    // An optional spacer argument is unnecessary for a string.\n    util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  };\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   * @return {!Object}\r\n   */\n\n\n  Query.prototype.queryObject = function () {\n    return this.queryParams_.getQueryObject();\n  };\n  /**\r\n   * @return {!string}\r\n   */\n\n\n  Query.prototype.queryIdentifier = function () {\n    var obj = this.queryObject();\n    var id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  };\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   * @param {Query} other\r\n   * @return {boolean}\r\n   */\n\n\n  Query.prototype.isEqual = function (other) {\n    util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\n\n    if (!(other instanceof Query)) {\n      var error$$1 = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error$$1);\n    }\n\n    var sameRepo = this.repo === other.repo;\n    var samePath = this.path.equals(other.path);\n    var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\n    return sameRepo && samePath && sameQueryIdentifier;\n  };\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param {!string} fnName The function name (on or once)\r\n   * @param {(function(Error)|Object)=} cancelOrContext\r\n   * @param {Object=} context\r\n   * @return {{cancel: ?function(Error), context: ?Object}}\r\n   * @private\r\n   */\n\n\n  Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\n    var ret = {\n      cancel: null,\n      context: null\n    };\n\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      util.validateCallback(fnName, 3, ret.cancel, true);\n      ret.context = context;\n      util.validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(util.errorPrefix(fnName, 3, true) + ' must either be a cancel callback or a context object.');\n      }\n    }\n\n    return ret;\n  };\n\n  Object.defineProperty(Query.prototype, \"ref\", {\n    get: function get() {\n      return this.getRef();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Query;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\n\n\nvar CountedSet =\n/** @class */\nfunction () {\n  function CountedSet() {\n    this.set = {};\n  }\n  /**\r\n   * @param {!K} item\r\n   * @param {V} val\r\n   */\n\n\n  CountedSet.prototype.add = function (item, val) {\n    this.set[item] = val !== null ? val : true;\n  };\n  /**\r\n   * @param {!K} key\r\n   * @return {boolean}\r\n   */\n\n\n  CountedSet.prototype.contains = function (key) {\n    return util.contains(this.set, key);\n  };\n  /**\r\n   * @param {!K} item\r\n   * @return {V}\r\n   */\n\n\n  CountedSet.prototype.get = function (item) {\n    return this.contains(item) ? this.set[item] : undefined;\n  };\n  /**\r\n   * @param {!K} item\r\n   */\n\n\n  CountedSet.prototype.remove = function (item) {\n    delete this.set[item];\n  };\n  /**\r\n   * Deletes everything in the set\r\n   */\n\n\n  CountedSet.prototype.clear = function () {\n    this.set = {};\n  };\n  /**\r\n   * True if there's nothing in the set\r\n   * @return {boolean}\r\n   */\n\n\n  CountedSet.prototype.isEmpty = function () {\n    return util.isEmpty(this.set);\n  };\n  /**\r\n   * @return {number} The number of items in the set\r\n   */\n\n\n  CountedSet.prototype.count = function () {\n    return util.getCount(this.set);\n  };\n  /**\r\n   * Run a function on each k,v pair in the set\r\n   * @param {function(K, V)} fn\r\n   */\n\n\n  CountedSet.prototype.each = function (fn) {\n    util.forEach(this.set, function (k, v) {\n      return fn(k, v);\n    });\n  };\n  /**\r\n   * Mostly for debugging\r\n   * @return {Array.<K>} The keys present in this CountedSet\r\n   */\n\n\n  CountedSet.prototype.keys = function () {\n    var keys = [];\n    util.forEach(this.set, function (k) {\n      keys.push(k);\n    });\n    return keys;\n  };\n\n  return CountedSet;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\n\n\nvar SparseSnapshotTree =\n/** @class */\nfunction () {\n  function SparseSnapshotTree() {\n    /**\r\n     * @private\r\n     * @type {Node}\r\n     */\n    this.value_ = null;\n    /**\r\n     * @private\r\n     * @type {CountedSet}\r\n     */\n\n    this.children_ = null;\n  }\n  /**\r\n   * Gets the node stored at the given path if one exists.\r\n   *\r\n   * @param {!Path} path Path to look up snapshot for.\r\n   * @return {?Node} The retrieved node, or null.\r\n   */\n\n\n  SparseSnapshotTree.prototype.find = function (path) {\n    if (this.value_ != null) {\n      return this.value_.getChild(path);\n    } else if (!path.isEmpty() && this.children_ != null) {\n      var childKey = path.getFront();\n      path = path.popFront();\n\n      if (this.children_.contains(childKey)) {\n        var childTree = this.children_.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Stores the given node at the specified path. If there is already a node\r\n   * at a shallower path, it merges the new data into that snapshot node.\r\n   *\r\n   * @param {!Path} path Path to look up snapshot for.\r\n   * @param {!Node} data The new data, or null.\r\n   */\n\n\n  SparseSnapshotTree.prototype.remember = function (path, data) {\n    if (path.isEmpty()) {\n      this.value_ = data;\n      this.children_ = null;\n    } else if (this.value_ !== null) {\n      this.value_ = this.value_.updateChild(path, data);\n    } else {\n      if (this.children_ == null) {\n        this.children_ = new CountedSet();\n      }\n\n      var childKey = path.getFront();\n\n      if (!this.children_.contains(childKey)) {\n        this.children_.add(childKey, new SparseSnapshotTree());\n      }\n\n      var child = this.children_.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  };\n  /**\r\n   * Purge the data at path from the cache.\r\n   *\r\n   * @param {!Path} path Path to look up snapshot for.\r\n   * @return {boolean} True if this node should now be removed.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forget = function (path) {\n    if (path.isEmpty()) {\n      this.value_ = null;\n      this.children_ = null;\n      return true;\n    } else {\n      if (this.value_ !== null) {\n        if (this.value_.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          var value = this.value_;\n          this.value_ = null;\n          var self_1 = this;\n          value.forEachChild(PRIORITY_INDEX, function (key, tree) {\n            self_1.remember(new Path(key), tree);\n          });\n          return this.forget(path);\n        }\n      } else if (this.children_ !== null) {\n        var childKey = path.getFront();\n        path = path.popFront();\n\n        if (this.children_.contains(childKey)) {\n          var safeToRemove = this.children_.get(childKey).forget(path);\n\n          if (safeToRemove) {\n            this.children_.remove(childKey);\n          }\n        }\n\n        if (this.children_.isEmpty()) {\n          this.children_ = null;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    }\n  };\n  /**\r\n   * Recursively iterates through all of the stored tree and calls the\r\n   * callback on each one.\r\n   *\r\n   * @param {!Path} prefixPath Path to look up node for.\r\n   * @param {!Function} func The function to invoke for each tree.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\n    if (this.value_ !== null) {\n      func(prefixPath, this.value_);\n    } else {\n      this.forEachChild(function (key, tree) {\n        var path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  };\n  /**\r\n   * Iterates through each immediate child and triggers the callback.\r\n   *\r\n   * @param {!Function} func The function to invoke for each child.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forEachChild = function (func) {\n    if (this.children_ !== null) {\n      this.children_.each(function (key, tree) {\n        func(key, tree);\n      });\n    }\n  };\n\n  return SparseSnapshotTree;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\n\n\nvar generateWithValues = function generateWithValues(values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\n\n\nvar resolveDeferredValue = function resolveDeferredValue(value, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  } else {\n    util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\n\n\nvar resolveDeferredValueTree = function resolveDeferredValueTree(tree, serverValues) {\n  var resolvedTree = new SparseSnapshotTree();\n  tree.forEachTree(new Path(''), function (path, node) {\n    resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\n  });\n  return resolvedTree;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\n\n\nvar resolveDeferredValueSnapshot = function resolveDeferredValueSnapshot(node, serverValues) {\n  var rawPri = node.getPriority().val();\n  var priority = resolveDeferredValue(rawPri, serverValues);\n  var newNode;\n\n  if (node.isLeafNode()) {\n    var leafNode = node;\n    var value = resolveDeferredValue(leafNode.getValue(), serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON$1(priority));\n    } else {\n      return node;\n    }\n  } else {\n    var childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @enum\r\n */\n\n\nvar OperationType;\n\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\n\n\nvar OperationSource =\n/** @class */\nfunction () {\n  function OperationSource(fromUser, fromServer, queryId, tagged) {\n    this.fromUser = fromUser;\n    this.fromServer = fromServer;\n    this.queryId = queryId;\n    this.tagged = tagged;\n    util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n\n\n  OperationSource.User = new OperationSource(\n  /*fromUser=*/\n  true, false, null,\n  /*tagged=*/\n  false);\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n\n  OperationSource.Server = new OperationSource(false,\n  /*fromServer=*/\n  true, null,\n  /*tagged=*/\n  false);\n  /**\r\n   * @param {string} queryId\r\n   * @return {!OperationSource}\r\n   */\n\n  OperationSource.forServerTaggedQuery = function (queryId) {\n    return new OperationSource(false,\n    /*fromServer=*/\n    true, queryId,\n    /*tagged=*/\n    true);\n  };\n\n  return OperationSource;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar AckUserWrite =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n   * @param {!boolean} revert\r\n   */\n  function AckUserWrite(\n  /**@inheritDoc */\n  path,\n  /**@inheritDoc */\n  affectedTree,\n  /**@inheritDoc */\n  revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = OperationSource.User;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  AckUserWrite.prototype.operationForChild = function (childName) {\n    if (!this.path.isEmpty()) {\n      util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n      return this;\n    } else {\n      var childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  };\n\n  return AckUserWrite;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\n\nvar EmptyChildren = function EmptyChildren() {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\n\n\nvar ImmutableTree =\n/** @class */\nfunction () {\n  /**\r\n   * @template T\r\n   * @param {?T} value\r\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n   */\n  function ImmutableTree(value, children) {\n    if (children === void 0) {\n      children = EmptyChildren();\n    }\n\n    this.value = value;\n    this.children = children;\n  }\n  /**\r\n   * @template T\r\n   * @param {!Object.<string, !T>} obj\r\n   * @return {!ImmutableTree.<!T>}\r\n   */\n\n\n  ImmutableTree.fromObject = function (obj) {\n    var tree = ImmutableTree.Empty;\n    util.forEach(obj, function (childPath, childSnap) {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  };\n  /**\r\n   * True if the value is empty and there are no children\r\n   * @return {boolean}\r\n   */\n\n\n  ImmutableTree.prototype.isEmpty = function () {\n    return this.value === null && this.children.isEmpty();\n  };\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n   * on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param {!Path} relativePath The remainder of the path\r\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n   *   node\r\n   * @return {?{path:!Path, value:!T}}\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: Path.Empty,\n        value: this.value\n      };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        var front = relativePath.getFront();\n        var child = this.children.get(front);\n\n        if (child !== null) {\n          var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\n\n          if (childExistingPathAndValue != null) {\n            var fullPath = new Path(front).child(childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   * @param {!Path} relativePath\r\n   * @return {?{path: !Path, value: !T}}\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, function () {\n      return true;\n    });\n  };\n  /**\r\n   * @param {!Path} relativePath\r\n   * @return {!ImmutableTree.<T>} The subtree at the given path\r\n   */\n\n\n  ImmutableTree.prototype.subtree = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      var front = relativePath.getFront();\n      var childTree = this.children.get(front);\n\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to set value at.\r\n   * @param {?T} toSet Value to set.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.set = function (relativePath, toSet) {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.set(relativePath.popFront(), toSet);\n      var newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to value to remove.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.remove = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n\n      if (child) {\n        var newChild = child.remove(relativePath.popFront());\n        var newChildren = void 0;\n\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  };\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param {!Path} relativePath Path to get value for.\r\n   * @return {?T} Value at path, or null.\r\n   */\n\n\n  ImmutableTree.prototype.get = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param {!Path} relativePath Path to replace subtree for.\r\n   * @param {!ImmutableTree} newTree New tree.\r\n   * @return {!ImmutableTree} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.setTree(relativePath.popFront(), newTree);\n      var newChildren = void 0;\n\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   * @template V\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   */\n\n\n  ImmutableTree.prototype.fold = function (fn) {\n    return this.fold_(Path.Empty, fn);\n  };\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   * @template V\r\n   * @param {!Path} pathSoFar\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   * @private\r\n   */\n\n\n  ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n    var accum = {};\n    this.children.inorderTraversal(function (childKey, childTree) {\n      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  };\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   * @template V\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T):?V} f\r\n   * @return {?V}\r\n   */\n\n\n  ImmutableTree.prototype.findOnPath = function (path, f) {\n    return this.findOnPath_(path, Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n    var result = this.value ? f(pathSoFar, this.value) : false;\n\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        var front = pathToFollow.getFront();\n        var nextChild = this.children.get(front);\n\n        if (nextChild) {\n          return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T)} f\r\n   * @returns {!ImmutableTree.<T>}\r\n   */\n\n\n  ImmutableTree.prototype.foreachOnPath = function (path, f) {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n\n      var front = pathToFollow.getFront();\n      var nextChild = this.children.get(front);\n\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param {function(!Path, !T)} f A function to be called with\r\n   *   the path from the root of the tree to a node, and the value at that node.\r\n   *   Called in depth-first order.\r\n   */\n\n\n  ImmutableTree.prototype.foreach = function (f) {\n    this.foreach_(Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  };\n  /**\r\n   *\r\n   * @param {function(string, !T)} f\r\n   */\n\n\n  ImmutableTree.prototype.foreachChild = function (f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  };\n\n  ImmutableTree.Empty = new ImmutableTree(null);\n  return ImmutableTree;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar ListenComplete =\n/** @class */\nfunction () {\n  function ListenComplete(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n\n  ListenComplete.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  };\n\n  return ListenComplete;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Overwrite =\n/** @class */\nfunction () {\n  function Overwrite(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n\n    this.type = OperationType.OVERWRITE;\n  }\n\n  Overwrite.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  };\n\n  return Overwrite;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Merge =\n/** @class */\nfunction () {\n  function Merge(\n  /**@inheritDoc */\n  source,\n  /**@inheritDoc */\n  path,\n  /**@inheritDoc */\n  children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = OperationType.MERGE;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      var childTree = this.children.subtree(new Path(childName));\n\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.toString = function () {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  };\n\n  return Merge;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\n\n\nvar CacheNode =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Node} node_\r\n   * @param {boolean} fullyInitialized_\r\n   * @param {boolean} filtered_\r\n   */\n  function CacheNode(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isFullyInitialized = function () {\n    return this.fullyInitialized_;\n  };\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isFiltered = function () {\n    return this.filtered_;\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isCompleteForPath = function (path) {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    var childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!string} key\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isCompleteForChild = function (key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  };\n  /**\r\n   * @return {!Node}\r\n   */\n\n\n  CacheNode.prototype.getNode = function () {\n    return this.node_;\n  };\n\n  return CacheNode;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\n\n\nvar ViewCache =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!CacheNode} eventCache_\r\n   * @param {!CacheNode} serverCache_\r\n   */\n  function ViewCache(eventCache_, serverCache_) {\n    this.eventCache_ = eventCache_;\n    this.serverCache_ = serverCache_;\n  }\n  /**\r\n   * @param {!Node} eventSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n\n\n  ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\n    return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\n  };\n  /**\r\n   * @param {!Node} serverSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n\n\n  ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\n    return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n\n\n  ViewCache.prototype.getEventCache = function () {\n    return this.eventCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  ViewCache.prototype.getCompleteEventSnap = function () {\n    return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n\n\n  ViewCache.prototype.getServerCache = function () {\n    return this.serverCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  ViewCache.prototype.getCompleteServerSnap = function () {\n    return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;\n  };\n  /**\r\n   * @const\r\n   * @type {ViewCache}\r\n   */\n\n\n  ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/\n  false,\n  /*filtered=*/\n  false), new CacheNode(ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/\n  false,\n  /*filtered=*/\n  false));\n  return ViewCache;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\n\n\nvar Change =\n/** @class */\nfunction () {\n  function Change(type, snapshotNode, childName, oldSnap, prevName) {\n    this.type = type;\n    this.snapshotNode = snapshotNode;\n    this.childName = childName;\n    this.oldSnap = oldSnap;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.valueChange = function (snapshot) {\n    return new Change(Change.VALUE, snapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childAddedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childRemovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} newSnapshot\r\n   * @param {!Node} oldSnapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childMovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }; //event types\n\n  /** Event type for a child added */\n\n\n  Change.CHILD_ADDED = 'child_added';\n  /** Event type for a child removed */\n\n  Change.CHILD_REMOVED = 'child_removed';\n  /** Event type for a child changed */\n\n  Change.CHILD_CHANGED = 'child_changed';\n  /** Event type for a child moved */\n\n  Change.CHILD_MOVED = 'child_moved';\n  /** Event type for a value change */\n\n  Change.VALUE = 'value';\n  return Change;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\n\n\nvar IndexedFilter =\n/** @class */\nfunction () {\n  function IndexedFilter(index_) {\n    this.index_ = index_;\n  }\n\n  IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    var oldChild = snap.getImmediateChild(key); // Check if anything actually changed.\n\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() == newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\n        } else {\n          util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\n      }\n    }\n\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\n          }\n        });\n      }\n\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            var oldChild = oldSnap.getImmediateChild(key);\n\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\n          }\n        });\n      }\n    }\n\n    return newSnap.withIndex(this.index_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.filtersNodes = function () {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.getIndexedFilter = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n\n  return IndexedFilter;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n */\n\n\nvar ChildChangeAccumulator =\n/** @class */\nfunction () {\n  function ChildChangeAccumulator() {\n    this.changeMap_ = {};\n  }\n  /**\r\n   * @param {!Change} change\r\n   */\n\n\n  ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n    var type = change.type;\n    var childKey\n    /** @type {!string} */\n    = change.childName;\n    util.assert(type == Change.CHILD_ADDED || type == Change.CHILD_CHANGED || type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n    util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    var oldChange = util.safeGet(this.changeMap_, childKey);\n\n    if (oldChange) {\n      var oldType = oldChange.type;\n\n      if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n        this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\n      } else if (type == Change.CHILD_REMOVED && oldType == Change.CHILD_ADDED) {\n        delete this.changeMap_[childKey];\n      } else if (type == Change.CHILD_REMOVED && oldType == Change.CHILD_CHANGED) {\n        this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\n      } else if (type == Change.CHILD_CHANGED && oldType == Change.CHILD_ADDED) {\n        this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\n      } else if (type == Change.CHILD_CHANGED && oldType == Change.CHILD_CHANGED) {\n        this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\n      } else {\n        throw util.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap_[childKey] = change;\n    }\n  };\n  /**\r\n   * @return {!Array.<!Change>}\r\n   */\n\n\n  ChildChangeAccumulator.prototype.getChanges = function () {\n    return util.getValues(this.changeMap_);\n  };\n\n  return ChildChangeAccumulator;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\n\n\nvar NoCompleteChildSource_ =\n/** @class */\nfunction () {\n  function NoCompleteChildSource_() {}\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n    return null;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n    return null;\n  };\n\n  return NoCompleteChildSource_;\n}();\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\n\n\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\n\nvar WriteTreeCompleteChildSource =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!WriteTreeRef} writes_\r\n   * @param {!ViewCache} viewCache_\r\n   * @param {?Node} optCompleteServerCache_\r\n   */\n  function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n    if (optCompleteServerCache_ === void 0) {\n      optCompleteServerCache_ = null;\n    }\n\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n    var node = this.viewCache_.getEventCache();\n\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n    var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : this.viewCache_.getCompleteServerSnap();\n    var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\n\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  };\n\n  return WriteTreeCompleteChildSource;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @struct\r\n */\n\n\nvar ProcessorResult =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Array.<!Change>} changes\r\n   */\n  function ProcessorResult(viewCache, changes) {\n    this.viewCache = viewCache;\n    this.changes = changes;\n  }\n\n  return ProcessorResult;\n}();\n/**\r\n * @constructor\r\n */\n\n\nvar ViewProcessor =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!NodeFilter} filter_\r\n   */\n  function ViewProcessor(filter_) {\n    this.filter_ = filter_;\n  }\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   */\n\n\n  ViewProcessor.prototype.assertIndexed = function (viewCache) {\n    util.assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\n    util.assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @return {!ProcessorResult}\r\n   */\n\n\n  ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\n    var accumulator = new ChildChangeAccumulator();\n    var newViewCache, filterServerNode;\n\n    if (operation.type === OperationType.OVERWRITE) {\n      var overwrite = operation;\n\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n      } else {\n        util.assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n\n        filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();\n        newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      var merge = operation;\n\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n      } else {\n        util.assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered\n\n        filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      var ackUserWrite = operation;\n\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n      } else {\n        newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\n    } else {\n      throw util.assertionError('Unknown operation type: ' + operation.type);\n    }\n\n    var changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!ViewCache} newViewCache\r\n   * @param {!Array.<!Change>} accumulator\r\n   * @private\r\n   */\n\n\n  ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\n    var eventSnap = newViewCache.getEventCache();\n\n    if (eventSnap.isFullyInitialized()) {\n      var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n\n      if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(\n      /** @type {!Node} */\n      oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n        accumulator.push(Change.valueChange(\n        /** @type {!Node} */\n        newViewCache.getCompleteEventSnap()));\n      }\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} changePath\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!CompleteChildSource} source\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\n    var oldEventSnap = viewCache.getEventCache();\n\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      var newEventCache = void 0,\n          serverNode = void 0;\n\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\n\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          var serverCache = viewCache.getCompleteServerSnap();\n          var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n          var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\n        } else {\n          var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\n        }\n      } else {\n        var childKey = changePath.getFront();\n\n        if (childKey == '.priority') {\n          util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\n          var oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode(); // we might have overwrites for this priority\n\n          var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\n\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          var childChangePath = changePath.popFront(); // update child\n\n          var newEventChild = void 0;\n\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\n\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n          }\n\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n\n      return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\n    }\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    var oldServerSnap = oldViewCache.getServerCache();\n    var newServerCache;\n    var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();\n\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    } else {\n      var childKey = changePath.getFront();\n\n      if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n\n      var childChangePath = changePath.popFront();\n      var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n\n      if (childKey == '.priority') {\n        newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n      } else {\n        newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n      }\n    }\n\n    var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\n    var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    var oldEventSnap = oldViewCache.getEventCache();\n    var newViewCache, newEventCache;\n    var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\n      newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\n    } else {\n      var childKey = changePath.getFront();\n\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\n        newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n      } else {\n        var childChangePath = changePath.popFront();\n        var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        var newChild = void 0;\n\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          var childNode = source.getCompleteChild(childKey);\n\n          if (childNode != null) {\n            if (childChangePath.getBack() === '.priority' && childNode.getChild(childChangePath.parent()).isEmpty()) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n\n        if (!oldChild.equals(newChild)) {\n          var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n          newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n\n    return newViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {string} childKey\r\n   * @return {boolean}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    var _this = this; // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n\n\n    var curViewCache = viewCache;\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!Node} node\r\n   * @param {ImmutableTree.<!Node>} merge\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyMerge_ = function (node, merge) {\n    merge.foreach(function (relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    var _this = this; // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n\n\n    if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {\n      return viewCache;\n    } // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n\n\n    var curViewCache = viewCache;\n    var viewMergeTree;\n\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n\n    var serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (serverNode.hasChild(childKey)) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n\n        var newChild = _this.applyMerge_(serverChild, childTree);\n\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n      var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;\n\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n\n        var newChild = _this.applyMerge_(serverChild, childMergeTree);\n\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} ackPath\r\n   * @param {!ImmutableTree<!boolean>} affectedTree\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    } // Only filter server node if it is currently filtered\n\n\n    var filterServerNode = viewCache.getServerCache().isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n\n    var serverCache = viewCache.getServerCache();\n\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n        return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        var changedChildren_1 = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\n          changedChildren_1 = changedChildren_1.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      var changedChildren_2 = ImmutableTree.Empty;\n      affectedTree.foreach(function (mergePath, value) {\n        var serverCachePath = ackPath.child(mergePath);\n\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n        }\n      });\n      return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\n    var oldServerNode = viewCache.getServerCache();\n    var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\n    return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\n    var complete;\n\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n      var oldEventCache = viewCache.getEventCache().getNode();\n      var newEventCache = void 0;\n\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        var newNode = void 0;\n\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n        } else {\n          var serverChildren = viewCache.getServerCache().getNode();\n          util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n          newNode = writesCache.calcCompleteEventChildren(serverChildren);\n        }\n\n        newNode = newNode;\n        newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\n      } else {\n        var childKey = path.getFront();\n        var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n\n        if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\n        } else {\n          newEventCache = oldEventCache;\n        }\n\n        if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\n          }\n        }\n      }\n\n      complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\n    }\n  };\n\n  return ViewProcessor;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\n\n\nvar EventGenerator =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   */\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    /**\r\n     * @private\r\n     * @type {!Index}\r\n     */\n\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n  /**\r\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n   *\r\n   * Notes:\r\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n   *    our index.\r\n   *  - prevName will be calculated based on the index ordering.\r\n   *\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {!Array.<!EventRegistration>} eventRegistrations\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n    var _this = this;\n\n    var events = [];\n    var moves = [];\n    changes.forEach(function (change) {\n      if (change.type === Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n        moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\n      }\n    });\n    this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\n    return events;\n  };\n  /**\r\n   * Given changes of a single change type, generate the corresponding events.\r\n   *\r\n   * @param {!Array.<!Event>} events\r\n   * @param {!string} eventType\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Array.<!EventRegistration>} registrations\r\n   * @param {!Node} eventCache\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n    var _this = this;\n\n    var filteredChanges = changes.filter(function (change) {\n      return change.type === eventType;\n    });\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(function (change) {\n      var materializedChange = _this.materializeSingleChange_(change, eventCache);\n\n      registrations.forEach(function (registration) {\n        if (registration.respondsTo(change.type)) {\n          events.push(registration.createEvent(materializedChange, _this.query_));\n        }\n      });\n    });\n  };\n  /**\r\n   * @param {!Change} change\r\n   * @param {!Node} eventCache\r\n   * @return {!Change}\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n      /** @type {!string} */\n      change.childName, change.snapshotNode, this.index_);\n      return change;\n    }\n  };\n  /**\r\n   * @param {!Change} a\r\n   * @param {!Change} b\r\n   * @return {number}\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.compareChanges_ = function (a, b) {\n    if (a.childName == null || b.childName == null) {\n      throw util.assertionError('Should only compare child_ events.');\n    }\n\n    var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  };\n\n  return EventGenerator;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\n\n\nvar View =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   * @param {!ViewCache} initialViewCache\r\n   */\n  function View(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_.getQueryParams();\n    var indexFilter = new IndexedFilter(params.getIndex());\n    var filter = params.getNodeFilter();\n    /**\r\n     * @type {ViewProcessor}\r\n     * @private\r\n     */\n\n    this.processor_ = new ViewProcessor(filter);\n    var initialServerCache = initialViewCache.getServerCache();\n    var initialEventCache = initialViewCache.getEventCache(); // Don't filter server node with other filter than index, wait for tagged listen\n\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    /**\r\n     * @type {!ViewCache}\r\n     * @private\r\n     */\n\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n    /**\r\n     * @type {!EventGenerator}\r\n     * @private\r\n     */\n\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  /**\r\n   * @return {!Query}\r\n   */\n\n\n  View.prototype.getQuery = function () {\n    return this.query_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  View.prototype.getServerCache = function () {\n    return this.viewCache_.getServerCache().getNode();\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  View.prototype.getCompleteServerCache = function (path) {\n    var cache = this.viewCache_.getCompleteServerSnap();\n\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {\n        return cache.getChild(path);\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  View.prototype.isEmpty = function () {\n    return this.eventRegistrations_.length === 0;\n  };\n  /**\r\n   * @param {!EventRegistration} eventRegistration\r\n   */\n\n\n  View.prototype.addEventRegistration = function (eventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  };\n  /**\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n   */\n\n\n  View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n    var cancelEvents = [];\n\n    if (cancelError) {\n      util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n      var path_1 = this.query_.path;\n      this.eventRegistrations_.forEach(function (registration) {\n        cancelError\n        /** @type {!Error} */\n        = cancelError;\n        var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      var remaining = [];\n\n      for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n        var existing = this.eventRegistrations_[i];\n\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n\n    return cancelEvents;\n  };\n  /**\r\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n   *\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n      util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n      util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n    }\n\n    var oldViewCache = this.viewCache_;\n    var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n    this.processor_.assertIndexed(result.viewCache);\n    util.assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    this.viewCache_ = result.viewCache;\n    return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n  };\n  /**\r\n   * @param {!EventRegistration} registration\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.getInitialEvents = function (registration) {\n    var eventSnap = this.viewCache_.getEventCache();\n    var initialChanges = [];\n\n    if (!eventSnap.getNode().isLeafNode()) {\n      var eventNode = eventSnap.getNode();\n      eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n\n    return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n  };\n  /**\r\n   * @private\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {EventRegistration=} eventRegistration\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n    var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n  };\n\n  return View;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\n\n\nvar SyncPoint =\n/** @class */\nfunction () {\n  function SyncPoint() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     *\r\n     * @type {!Object.<!string, !View>}\r\n     * @private\r\n     */\n    this.views_ = {};\n  }\n\n  Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\n    get: function get() {\n      util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\n      return __referenceConstructor$1;\n    },\n    set: function set(val) {\n      util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\n      __referenceConstructor$1 = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @return {boolean}\r\n   */\n\n  SyncPoint.prototype.isEmpty = function () {\n    return util.isEmpty(this.views_);\n  };\n  /**\r\n   *\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} optCompleteServerCache\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\n    var queryId = operation.source.queryId;\n\n    if (queryId !== null) {\n      var view = util.safeGet(this.views_, queryId);\n      util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(operation, writesCache, optCompleteServerCache);\n    } else {\n      var events_1 = [];\n      util.forEach(this.views_, function (key, view) {\n        events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\n      });\n      return events_1;\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @param {!Query} query\r\n   * @param {!EventRegistration} eventRegistration\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache Complete server cache, if we have it.\r\n   * @param {boolean} serverCacheComplete\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    var queryId = query.queryIdentifier();\n    var view = util.safeGet(this.views_, queryId);\n\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\n      var eventCacheComplete = false;\n\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n\n      var viewCache = new ViewCache(new CacheNode(\n      /** @type {!Node} */\n      eventCache, eventCacheComplete, false), new CacheNode(\n      /** @type {!Node} */\n      serverCache, serverCacheComplete, false));\n      view = new View(query, viewCache);\n      this.views_[queryId] = view;\n    } // This is guaranteed to exist now, we just created anything that was missing\n\n\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  };\n  /**\r\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n   *\r\n   * If query is the default query, we'll check all views for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n   *\r\n   * @param {!Query} query\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n   */\n\n\n  SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var queryId = query.queryIdentifier();\n    var removed = [];\n    var cancelEvents = [];\n    var hadCompleteView = this.hasCompleteView();\n\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      var self_1 = this;\n      util.forEach(this.views_, function (viewQueryId, view) {\n        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n\n        if (view.isEmpty()) {\n          delete self_1.views_[viewQueryId]; // We'll deal with complete views later.\n\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      });\n    } else {\n      // remove the callback from the specific view.\n      var view = util.safeGet(this.views_, queryId);\n\n      if (view) {\n        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n\n        if (view.isEmpty()) {\n          delete this.views_[queryId]; // We'll deal with complete views later.\n\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\n    }\n\n    return {\n      removed: removed,\n      events: cancelEvents\n    };\n  };\n  /**\r\n   * @return {!Array.<!View>}\r\n   */\n\n\n  SyncPoint.prototype.getQueryViews = function () {\n    var _this = this;\n\n    var values = Object.keys(this.views_).map(function (key) {\n      return _this.views_[key];\n    });\n    return values.filter(function (view) {\n      return !view.getQuery().getQueryParams().loadsAllData();\n    });\n  };\n  /**\r\n   *\r\n   * @param {!Path} path The path to the desired complete snapshot\r\n   * @return {?Node} A complete cache, if it exists\r\n   */\n\n\n  SyncPoint.prototype.getCompleteServerCache = function (path) {\n    var serverCache = null;\n    util.forEach(this.views_, function (key, view) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    });\n    return serverCache;\n  };\n  /**\r\n   * @param {!Query} query\r\n   * @return {?View}\r\n   */\n\n\n  SyncPoint.prototype.viewForQuery = function (query) {\n    var params = query.getQueryParams();\n\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      var queryId = query.queryIdentifier();\n      return util.safeGet(this.views_, queryId);\n    }\n  };\n  /**\r\n   * @param {!Query} query\r\n   * @return {boolean}\r\n   */\n\n\n  SyncPoint.prototype.viewExistsForQuery = function (query) {\n    return this.viewForQuery(query) != null;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  SyncPoint.prototype.hasCompleteView = function () {\n    return this.getCompleteView() != null;\n  };\n  /**\r\n   * @return {?View}\r\n   */\n\n\n  SyncPoint.prototype.getCompleteView = function () {\n    var completeView = util.findValue(this.views_, function (view) {\n      return view.getQuery().getQueryParams().loadsAllData();\n    });\n    return completeView || null;\n  };\n\n  return SyncPoint;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\n\n\nvar CompoundWrite =\n/** @class */\nfunction () {\n  function CompoundWrite(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n  /**\r\n   * @param {!Path} path\r\n   * @param {!Node} node\r\n   * @return {!CompoundWrite}\r\n   */\n\n\n  CompoundWrite.prototype.addWrite = function (path, node) {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n\n      if (rootmost != null) {\n        var rootMostPath = rootmost.path;\n        var value = rootmost.value;\n        var relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        var subtree = new ImmutableTree(node);\n        var newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @param {!Object.<string, !Node>} updates\r\n   * @return {!CompoundWrite}\r\n   */\n\n\n  CompoundWrite.prototype.addWrites = function (path, updates) {\n    var newWrite = this;\n    util.forEach(updates, function (childKey, node) {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  };\n  /**\r\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n   * location, which must be removed by calling this method with that path.\r\n   *\r\n   * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n   */\n\n\n  CompoundWrite.prototype.removeWrite = function (path) {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  };\n  /**\r\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n   * considered \"complete\".\r\n   *\r\n   * @param {!Path} path The path to check for\r\n   * @return {boolean} Whether there is a complete write at that path\r\n   */\n\n\n  CompoundWrite.prototype.hasCompleteWrite = function (path) {\n    return this.getCompleteNode(path) != null;\n  };\n  /**\r\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n   * writes from deeper paths, but will return child nodes from a more shallow path.\r\n   *\r\n   * @param {!Path} path The path to get a complete write\r\n   * @return {?Node} The node if complete at that path, or null otherwise.\r\n   */\n\n\n  CompoundWrite.prototype.getCompleteNode = function (path) {\n    var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n\n    if (rootmost != null) {\n      return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Returns all children that are guaranteed to be a complete overwrite.\r\n   *\r\n   * @return {!Array.<NamedNode>} A list of all complete children.\r\n   */\n\n\n  CompoundWrite.prototype.getCompleteChildren = function () {\n    var children = [];\n    var node = this.writeTree_.value;\n\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n          children.push(new NamedNode(childName, childNode));\n        });\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal(function (childName, childTree) {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n\n    return children;\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {!CompoundWrite}\r\n   */\n\n\n  CompoundWrite.prototype.childCompoundWrite = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      var shadowingNode = this.getCompleteNode(path);\n\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  };\n  /**\r\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n   * @return {boolean} Whether this CompoundWrite is empty\r\n   */\n\n\n  CompoundWrite.prototype.isEmpty = function () {\n    return this.writeTree_.isEmpty();\n  };\n  /**\r\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n   * node\r\n   * @param {!Node} node The node to apply this CompoundWrite to\r\n   * @return {!Node} The node with all writes applied\r\n   */\n\n\n  CompoundWrite.prototype.apply = function (node) {\n    return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\n  };\n  /**\r\n   * @type {!CompoundWrite}\r\n   */\n\n\n  CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\n  /**\r\n   * @param {!Path} relativePath\r\n   * @param {!ImmutableTree.<!Node>} writeTree\r\n   * @param {!Node} node\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n  CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\n    if (writeTree.value != null) {\n      // Since there a write is always a leaf, we're done here\n      return node.updateChild(relativePath, writeTree.value);\n    } else {\n      var priorityWrite_1 = null;\n      writeTree.children.inorderTraversal(function (childKey, childTree) {\n        if (childKey === '.priority') {\n          // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n          // to apply priorities to empty nodes that are later filled\n          util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n          priorityWrite_1 = childTree.value;\n        } else {\n          node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\n        }\n      }); // If there was a priority write, we only apply it if the node is not empty\n\n      if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n        node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\n      }\n\n      return node;\n    }\n  };\n\n  return CompoundWrite;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\n\n\nvar WriteTree =\n/** @class */\nfunction () {\n  function WriteTree() {\n    /**\r\n     * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n     * applyLocally=false or writes that are completely shadowed by other writes.\r\n     *\r\n     * @type {!CompoundWrite}\r\n     * @private\r\n     */\n    this.visibleWrites_ = CompoundWrite.Empty;\n    /**\r\n     * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n     * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n     * used by transactions).\r\n     *\r\n     * @type {!Array.<!WriteRecord>}\r\n     * @private\r\n     */\n\n    this.allWrites_ = [];\n    this.lastWriteId_ = -1;\n  }\n  /**\r\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {!WriteTreeRef}\r\n   */\n\n\n  WriteTree.prototype.childWrites = function (path) {\n    return new WriteTreeRef(path, this);\n  };\n  /**\r\n   * Record a new overwrite from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Node} snap\r\n   * @param {!number} writeId\r\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n   */\n\n\n  WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n    util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    this.allWrites_.push({\n      path: path,\n      snap: snap,\n      writeId: writeId,\n      visible: visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * Record a new merge from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Object.<string, !Node>} changedChildren\r\n   * @param {!number} writeId\r\n   */\n\n\n  WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n    util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n    this.allWrites_.push({\n      path: path,\n      children: changedChildren,\n      writeId: writeId,\n      visible: true\n    });\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * @param {!number} writeId\r\n   * @return {?WriteRecord}\r\n   */\n\n\n  WriteTree.prototype.getWrite = function (writeId) {\n    for (var i = 0; i < this.allWrites_.length; i++) {\n      var record = this.allWrites_[i];\n\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n   *\r\n   * @param {!number} writeId\r\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n   * events as a result).\r\n   */\n\n\n  WriteTree.prototype.removeWrite = function (writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    var _this = this;\n\n    var idx = this.allWrites_.findIndex(function (s) {\n      return s.writeId === writeId;\n    });\n    util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    var writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n    var removedWriteWasVisible = writeToRemove.visible;\n    var removedWriteOverlapsWithOtherWrites = false;\n    var i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      var currentWrite = this.allWrites_[i];\n\n      if (currentWrite.visible) {\n        if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n      } else {\n        var children = writeToRemove.children;\n        util.forEach(children, function (childName) {\n          _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n        });\n      }\n\n      return true;\n    }\n  };\n  /**\r\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n   * No server data is considered.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.getCompleteWriteData = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n   * writes), attempt to calculate a complete snapshot for the given path\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {\n          return null;\n        } else {\n          var filter = function filter(write) {\n            return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (write.path.contains(treePath) || treePath.contains(write.path));\n          };\n\n          var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  };\n  /**\r\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n   * Used when creating new views, to pre-fill their complete event children snapshot.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n    var completeChildren = ChildrenNode.EMPTY_NODE;\n    var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n          completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n        });\n      }\n\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n        var node = merge_1.childCompoundWrite(new Path(childName)).apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(childName, node);\n      }); // Add any complete children we have from the set\n\n      merge_1.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    }\n  };\n  /**\r\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n   * applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!Path} childPath\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n    util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    var path = treePath.child(childPath);\n\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      var childMerge = this.visibleWrites_.childCompoundWrite(path);\n\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n    var path = treePath.child(childKey);\n    var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        var childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.shadowingWrite = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?Node} completeServerData\r\n   * @param {!NamedNode} startPost\r\n   * @param {!number} count\r\n   * @param {boolean} reverse\r\n   * @param {!Index} index\r\n   * @return {!Array.<!NamedNode>}\r\n   */\n\n\n  WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n    var toIterate;\n    var merge = this.visibleWrites_.childCompoundWrite(treePath);\n    var shadowingNode = merge.getCompleteNode(Path.Empty);\n\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n\n    toIterate = toIterate.withIndex(index);\n\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      var nodes = [];\n      var cmp = index.getCompare();\n      var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n      var next = iter.getNext();\n\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n\n        next = iter.getNext();\n      }\n\n      return nodes;\n    } else {\n      return [];\n    }\n  };\n  /**\r\n   * @param {!WriteRecord} writeRecord\r\n   * @param {!Path} path\r\n   * @return {boolean}\r\n   * @private\r\n   */\n\n\n  WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      // findKey can return undefined, so use !! to coerce to boolean\n      return !!util.findKey(writeRecord.children, function (childSnap, childName) {\n        return writeRecord.path.child(childName).contains(path);\n      });\n    }\n  };\n  /**\r\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n   * @private\r\n   */\n\n\n  WriteTree.prototype.resetTree_ = function () {\n    this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\n\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  };\n  /**\r\n   * The default filter used when constructing the tree. Keep everything that's visible.\r\n   *\r\n   * @param {!WriteRecord} write\r\n   * @return {boolean}\r\n   * @private\r\n   */\n\n\n  WriteTree.DefaultFilter_ = function (write) {\n    return write.visible;\n  };\n  /**\r\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n   * event data at that path.\r\n   *\r\n   * @param {!Array.<!WriteRecord>} writes\r\n   * @param {!function(!WriteRecord):boolean} filter\r\n   * @param {!Path} treeRoot\r\n   * @return {!CompoundWrite}\r\n   * @private\r\n   */\n\n\n  WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n    var compoundWrite = CompoundWrite.Empty;\n\n    for (var i = 0; i < writes.length; ++i) {\n      var write = writes[i]; // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n\n      if (filter(write)) {\n        var writePath = write.path;\n        var relativePath = void 0;\n\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\n          } else {// There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\n            } else {\n              var child = util.safeGet(write.children, relativePath.getFront());\n\n              if (child) {\n                // There exists a child in this node that matches the root path\n                var deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {// There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw util.assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n\n    return compoundWrite;\n  };\n\n  return WriteTree;\n}();\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\n\n\nvar WriteTreeRef =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Path} path\r\n   * @param {!WriteTree} writeTree\r\n   */\n  function WriteTreeRef(path, writeTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n  /**\r\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n   * can lead to a more expensive calculation.\r\n   *\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n  };\n  /**\r\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n   * mix of the given server data and write data.\r\n   *\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n    return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n  };\n  /**\r\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n   * if anything, needs to be applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events should be raised\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n   *\r\n   * @param {!Path} path\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.shadowingWrite = function (path) {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window\r\n   *\r\n   * @param {?Node} completeServerData\r\n   * @param {!NamedNode} startPost\r\n   * @param {!number} count\r\n   * @param {boolean} reverse\r\n   * @param {!Index} index\r\n   * @return {!Array.<!NamedNode>}\r\n   */\n\n\n  WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n    return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerCache\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n    return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n  };\n  /**\r\n   * Return a WriteTreeRef for a child.\r\n   *\r\n   * @param {string} childName\r\n   * @return {!WriteTreeRef}\r\n   */\n\n\n  WriteTreeRef.prototype.child = function (childName) {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  };\n\n  return WriteTreeRef;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\n\n\nvar SyncTree =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  function SyncTree(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     * @type {!ImmutableTree.<!SyncPoint>}\r\n     * @private\r\n     */\n\n    this.syncPointTree_ = ImmutableTree.Empty;\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     * @type {!WriteTree}\r\n     * @private\r\n     */\n\n    this.pendingWriteTree_ = new WriteTree();\n    this.tagToQueryMap_ = {};\n    this.queryToTagMap_ = {};\n  }\n  /**\r\n   * Apply the data changes for a user-generated set() or transaction() call.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Node} newData\r\n   * @param {number} writeId\r\n   * @param {boolean=} visible\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\n    }\n  };\n  /**\r\n   * Apply the data from a user-generated update() call\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Object.<string, !Node>} changedChildren\r\n   * @param {!number} writeId\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\n  };\n  /**\r\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n   *\r\n   * @param {!number} writeId\r\n   * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n    if (revert === void 0) {\n      revert = false;\n    }\n\n    var write = this.pendingWriteTree_.getWrite(writeId);\n    var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      var affectedTree_1 = ImmutableTree.Empty;\n\n      if (write.snap != null) {\n        // overwrite\n        affectedTree_1 = affectedTree_1.set(Path.Empty, true);\n      } else {\n        util.forEach(write.children, function (pathString, node) {\n          affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\n        });\n      }\n\n      return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\n    }\n  };\n  /**\r\n   * Apply new server data for the specified path..\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Node} newData\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n    return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\n  };\n  /**\r\n   * Apply new server data to be merged in at the specified path.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Object.<string, !Node>} changedChildren\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\n  };\n  /**\r\n   * Apply a listen complete for a query\r\n   *\r\n   * @param {!Path} path\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyListenComplete = function (path) {\n    return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\n  };\n  /**\r\n   * Apply new server data for the specified tagged query.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Node} snap\r\n   * @param {!number} tag\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey != null) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  };\n  /**\r\n   * Apply server data to be merged in for the specified tagged query.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Object.<string, !Node>} changedChildren\r\n   * @param {!number} tag\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var changeTree = ImmutableTree.fromObject(changedChildren);\n      var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Apply a listen complete for a tagged query\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!number} tag\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @param {!Query} query\r\n   * @param {!EventRegistration} eventRegistration\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n    var path = query.path;\n    var serverCache = null;\n    var foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n    this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n      var relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    var syncPoint = this.syncPointTree_.get(path);\n\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    var serverCacheComplete;\n\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      var subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function (childName, childSyncPoint) {\n        var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(childName, completeCache);\n        }\n      });\n    }\n\n    var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      var queryKey = SyncTree.makeQueryKey_(query);\n      util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\n      var tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap_[queryKey] = tag; // Coerce to string to avoid sparse arrays.\n\n      this.tagToQueryMap_['_' + tag] = queryKey;\n    }\n\n    var writesCache = this.pendingWriteTree_.childWrites(path);\n    var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      var view\n      /** @type !View */\n      = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n\n    return events;\n  };\n  /**\r\n   * Remove event callback(s).\r\n   *\r\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n   *\r\n   * @param {!Query} query\r\n   * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n   */\n\n\n  SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var _this = this; // Find the syncPoint first. Then deal with whether or not it has matching listeners\n\n\n    var path = query.path;\n    var maybeSyncPoint = this.syncPointTree_.get(path);\n    var cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n\n    if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {\n      /**\r\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n       */\n      var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n\n      var removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n\n      var removingDefault = -1 !== removed.findIndex(function (query) {\n        return query.getQueryParams().loadsAllData();\n      });\n      var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        var subtree = this.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          var newViews = this.collectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n          for (var i = 0; i < newViews.length; ++i) {\n            var view = newViews[i],\n                newQuery = view.getQuery();\n            var listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n          }\n        } else {// There's nothing below us, so nothing we need to start listening on\n        }\n      } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          var defaultTag = null;\n          this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(function (queryToRemove) {\n            var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\n\n            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      } // Now, clear all of the tags we're tracking for the removed listens\n\n\n      this.removeTags_(removed);\n    } else {// No-op, this listener must've been already removed\n    }\n\n    return cancelEvents;\n  };\n  /**\r\n   * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n   * it, but as this is only used by transaction code, that should always be the case anyways.\r\n   *\r\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n   * @param {!Path} path The path to the data we want\r\n   * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n   * @return {?Node}\r\n   */\n\n\n  SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n    var includeHiddenSets = true;\n    var writeTree = this.pendingWriteTree_;\n    var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n      var relativePath = Path.relativePath(pathSoFar, path);\n      var serverCache = syncPoint.getCompleteServerCache(relativePath);\n\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n  };\n  /**\r\n   * This collapses multiple unfiltered views into a single view, since we only need a single\r\n   * listener for them.\r\n   *\r\n   * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n   * @return {!Array.<!View>}\r\n   * @private\r\n   */\n\n\n  SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n    return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n        var completeView = maybeChildSyncPoint.getCompleteView();\n        return [completeView];\n      } else {\n        // No complete view here, flatten any deeper listens into an array\n        var views_1 = [];\n\n        if (maybeChildSyncPoint) {\n          views_1 = maybeChildSyncPoint.getQueryViews();\n        }\n\n        util.forEach(childMap, function (key, childViews) {\n          views_1 = views_1.concat(childViews);\n        });\n        return views_1;\n      }\n    });\n  };\n  /**\r\n   * @param {!Array.<!Query>} queries\r\n   * @private\r\n   */\n\n\n  SyncTree.prototype.removeTags_ = function (queries) {\n    for (var j = 0; j < queries.length; ++j) {\n      var removedQuery = queries[j];\n\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        var removedQueryTag = this.queryToTagMap_[removedQueryKey];\n        delete this.queryToTagMap_[removedQueryKey];\n        delete this.tagToQueryMap_['_' + removedQueryTag];\n      }\n    }\n  };\n  /**\r\n   * Normalizes a query to a query we send the server for listening\r\n   * @param {!Query} query\r\n   * @return {!Query} The normalized query\r\n   * @private\r\n   */\n\n\n  SyncTree.queryForListening_ = function (query) {\n    if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return (\n        /** @type {!Query} */\n        query.getRef()\n      );\n    } else {\n      return query;\n    }\n  };\n  /**\r\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n   *\r\n   * @param {!Query} query\r\n   * @param {!View} view\r\n   * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n   * @private\r\n   */\n\n\n  SyncTree.prototype.setupListener_ = function (query, view) {\n    var path = query.path;\n    var tag = this.tagForQuery_(query);\n    var listener = this.createListenerForView_(view);\n    var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    var subtree = this.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n\n    if (tag) {\n      util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n        if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          var queries_1 = [];\n\n          if (maybeChildSyncPoint) {\n            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {\n              return view.getQuery();\n            }));\n          }\n\n          util.forEach(childMap, function (key, childQueries) {\n            queries_1 = queries_1.concat(childQueries);\n          });\n          return queries_1;\n        }\n      });\n\n      for (var i = 0; i < queriesToStop.length; ++i) {\n        var queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n      }\n    }\n\n    return events;\n  };\n  /**\r\n   *\r\n   * @param {!View} view\r\n   * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n   * @private\r\n   */\n\n\n  SyncTree.prototype.createListenerForView_ = function (view) {\n    var _this = this;\n\n    var query = view.getQuery();\n    var tag = this.tagForQuery_(query);\n    return {\n      hashFn: function hashFn() {\n        var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: function onComplete(status) {\n        if (status === 'ok') {\n          if (tag) {\n            return _this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return _this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          var error$$1 = errorForServerCode(status, query);\n          return _this.removeEventRegistration(query,\n          /*eventRegistration*/\n          null, error$$1);\n        }\n      }\n    };\n  };\n  /**\r\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n   * @private\r\n   * @param {!Query} query\r\n   * @return {string}\r\n   */\n\n\n  SyncTree.makeQueryKey_ = function (query) {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  };\n  /**\r\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n   * @private\r\n   * @param {!string} queryKey\r\n   * @return {{queryId: !string, path: !Path}}\r\n   */\n\n\n  SyncTree.parseQueryKey_ = function (queryKey) {\n    var splitIndex = queryKey.indexOf('$');\n    util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  };\n  /**\r\n   * Return the query associated with the given tag, if we have one\r\n   * @param {!number} tag\r\n   * @return {?string}\r\n   * @private\r\n   */\n\n\n  SyncTree.prototype.queryKeyForTag_ = function (tag) {\n    return this.tagToQueryMap_['_' + tag];\n  };\n  /**\r\n   * Return the tag associated with the given query.\r\n   * @param {!Query} query\r\n   * @return {?number}\r\n   * @private\r\n   */\n\n\n  SyncTree.prototype.tagForQuery_ = function (query) {\n    var queryKey = SyncTree.makeQueryKey_(query);\n    return util.safeGet(this.queryToTagMap_, queryKey);\n  };\n  /**\r\n   * Static accessor for query tags.\r\n   * @return {number}\r\n   * @private\r\n   */\n\n\n  SyncTree.getNextQueryTag_ = function () {\n    return SyncTree.nextQueryTag_++;\n  };\n  /**\r\n   * A helper method to apply tagged operations\r\n   *\r\n   * @param {!Path} queryPath\r\n   * @param {!Operation} operation\r\n   * @return {!Array.<!Event>}\r\n   * @private\r\n   */\n\n\n  SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n    var syncPoint = this.syncPointTree_.get(queryPath);\n    util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(operation, writesCache,\n    /*serverCache=*/\n    null);\n  };\n  /**\r\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n   *\r\n   * NOTES:\r\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n      * - We call applyOperation() on each SyncPoint passing three things:\r\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n   *   3. A snapshot Node with cached server data, if we have it.\r\n      * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n   *\r\n   * @param {!Operation} operation\r\n   * @return {!Array.<!Event>}\r\n   * @private\r\n   */\n\n\n  SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n    return this.applyOperationHelper_(operation, this.syncPointTree_,\n    /*serverCache=*/\n    null, this.pendingWriteTree_.childWrites(Path.Empty));\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   *\r\n   * @private\r\n   * @param {!Operation} operation\r\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n   * @param {?Node} serverCache\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    } else {\n      var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      var events = [];\n      var childName = operation.path.getFront();\n      var childOperation = operation.operationForChild(childName);\n      var childTree = syncPointTree.children.get(childName);\n\n      if (childTree && childOperation) {\n        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n        var childWritesCache = writesCache.child(childName);\n        events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n\n      if (syncPoint) {\n        events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n      }\n\n      return events;\n    }\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   *\r\n   * @private\r\n   * @param {!Operation} operation\r\n   * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n   * @param {?Node} serverCache\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    var _this = this;\n\n    var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    var events = [];\n    syncPointTree.children.inorderTraversal(function (childName, childTree) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writesCache.child(childName);\n      var childOperation = operation.operationForChild(childName);\n\n      if (childOperation) {\n        events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n    }\n\n    return events;\n  };\n  /**\r\n   * Static tracker for next query tag.\r\n   * @type {number}\r\n   * @private\r\n   */\n\n\n  SyncTree.nextQueryTag_ = 1;\n  return SyncTree;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\n\n\nvar SnapshotHolder =\n/** @class */\nfunction () {\n  function SnapshotHolder() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n\n  SnapshotHolder.prototype.getNode = function (path) {\n    return this.rootNode_.getChild(path);\n  };\n\n  SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  };\n\n  return SnapshotHolder;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\n\n\nvar AuthTokenProvider =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!FirebaseApp} app_\r\n   */\n  function AuthTokenProvider(app_) {\n    this.app_ = app_;\n  }\n  /**\r\n   * @param {boolean} forceRefresh\r\n   * @return {!Promise<FirebaseAuthTokenData>}\r\n   */\n\n\n  AuthTokenProvider.prototype.getToken = function (forceRefresh) {\n    return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, // .catch\n    function (error$$1) {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error$$1 && error$$1.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error$$1);\n      }\n    });\n  };\n\n  AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    this.app_['INTERNAL']['addAuthTokenListener'](listener);\n  };\n\n  AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n    this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n  };\n\n  AuthTokenProvider.prototype.notifyForInvalidToken = function () {\n    var errorMessage = 'Provided authentication credentials for the app named \"' + this.app_.name + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n    if ('credential' in this.app_.options) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n\n    warn(errorMessage);\n  };\n\n  return AuthTokenProvider;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\n\n\nvar StatsCollection =\n/** @class */\nfunction () {\n  function StatsCollection() {\n    this.counters_ = {};\n  }\n\n  StatsCollection.prototype.incrementCounter = function (name, amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    if (!util.contains(this.counters_, name)) this.counters_[name] = 0;\n    this.counters_[name] += amount;\n  };\n\n  StatsCollection.prototype.get = function () {\n    return util.deepCopy(this.counters_);\n  };\n\n  return StatsCollection;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar StatsManager =\n/** @class */\nfunction () {\n  function StatsManager() {}\n\n  StatsManager.getCollection = function (repoInfo) {\n    var hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  };\n\n  StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\n    var hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString];\n  };\n\n  StatsManager.collections_ = {};\n  StatsManager.reporters_ = {};\n  return StatsManager;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\n\n\nvar StatsListener =\n/** @class */\nfunction () {\n  function StatsListener(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  StatsListener.prototype.get = function () {\n    var newStats = this.collection_.get();\n    var delta = util.clone(newStats);\n\n    if (this.last_) {\n      util.forEach(this.last_, function (stat, value) {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n\n    this.last_ = newStats;\n    return delta;\n  };\n\n  return StatsListener;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\n\n\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.\n\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n/**\r\n * @constructor\r\n */\n\nvar StatsReporter =\n/** @class */\nfunction () {\n  /**\r\n   * @param collection\r\n   * @param server_\r\n   */\n  function StatsReporter(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  StatsReporter.prototype.includeStat = function (stat) {\n    this.statsToReport_[stat] = true;\n  };\n\n  StatsReporter.prototype.reportStats_ = function () {\n    var _this = this;\n\n    var stats = this.statsListener_.get();\n    var reportedStats = {};\n    var haveStatsToReport = false;\n    util.forEach(stats, function (stat, value) {\n      if (value > 0 && util.contains(_this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    } // queue our next run.\n\n\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  };\n\n  return StatsReporter;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\n\n\nvar EventQueue =\n/** @class */\nfunction () {\n  function EventQueue() {\n    /**\r\n     * @private\r\n     * @type {!Array.<EventList>}\r\n     */\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     * @private\r\n     * @type {!number}\r\n     */\n\n    this.recursionDepth_ = 0;\n  }\n  /**\r\n   * @param {!Array.<Event>} eventDataList The new events to queue.\r\n   */\n\n\n  EventQueue.prototype.queueEvents = function (eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    var currList = null;\n\n    for (var i = 0; i < eventDataList.length; i++) {\n      var eventData = eventDataList[i];\n      var eventPath = eventData.getPath();\n\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n   * for the specified path.\r\n   *\r\n   * It is assumed that the new events are all for the specified path.\r\n   *\r\n   * @param {!Path} path The path to raise events for.\r\n   * @param {!Array.<Event>} eventDataList The new events to raise.\r\n   */\n\n\n  EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.equals(path);\n    });\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n   * locations related to the specified change path (i.e. all ancestors and descendants).\r\n   *\r\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n   *\r\n   * @param {!Path} changedPath The path to raise events for.\r\n   * @param {!Array.<!Event>} eventDataList The events to raise\r\n   */\n\n\n  EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  };\n  /**\r\n   * @param {!function(!Path):boolean} predicate\r\n   * @private\r\n   */\n\n\n  EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\n    this.recursionDepth_++;\n    var sentAll = true;\n\n    for (var i = 0; i < this.eventLists_.length; i++) {\n      var eventList = this.eventLists_[i];\n\n      if (eventList) {\n        var eventPath = eventList.getPath();\n\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  };\n\n  return EventQueue;\n}();\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\n\n\nvar EventList =\n/** @class */\nfunction () {\n  function EventList(path_) {\n    this.path_ = path_;\n    /**\r\n     * @type {!Array.<Event>}\r\n     * @private\r\n     */\n\n    this.events_ = [];\n  }\n  /**\r\n   * @param {!Event} eventData\r\n   */\n\n\n  EventList.prototype.add = function (eventData) {\n    this.events_.push(eventData);\n  };\n  /**\r\n   * Iterates through the list and raises each event\r\n   */\n\n\n  EventList.prototype.raise = function () {\n    for (var i = 0; i < this.events_.length; i++) {\n      var eventData = this.events_[i];\n\n      if (eventData !== null) {\n        this.events_[i] = null;\n        var eventFn = eventData.getEventRunner();\n\n        if (logger$1) {\n          log('event: ' + eventData.toString());\n        }\n\n        exceptionGuard(eventFn);\n      }\n    }\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n\n\n  EventList.prototype.getPath = function () {\n    return this.path_;\n  };\n\n  return EventList;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\n\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Array.<string>} allowedEvents_\r\n   */\n  function EventEmitter(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   * @param {!string} eventType\r\n   * @param {...*} var_args\r\n   */\n\n\n  EventEmitter.prototype.trigger = function (eventType) {\n    var var_args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      var_args[_i - 1] = arguments[_i];\n    }\n\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      var listeners = this.listeners_[eventType].slice();\n\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, var_args);\n      }\n    }\n  };\n\n  EventEmitter.prototype.on = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback: callback,\n      context: context\n    });\n    var eventData = this.getInitialEvent(eventType);\n\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  };\n\n  EventEmitter.prototype.off = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    var listeners = this.listeners_[eventType] || [];\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  };\n\n  EventEmitter.prototype.validateEventType_ = function (eventType) {\n    util.assert(this.allowedEvents_.find(function (et) {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  };\n\n  return EventEmitter;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @extends {EventEmitter}\r\n */\n\n\nvar VisibilityMonitor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(VisibilityMonitor, _super);\n\n  function VisibilityMonitor() {\n    var _this = _super.call(this, ['visible']) || this;\n\n    var hidden;\n    var visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    _this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n\n        if (visible !== _this.visible_) {\n          _this.visible_ = visible;\n\n          _this.trigger('visible', visible);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  VisibilityMonitor.getInstance = function () {\n    return new VisibilityMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n    util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  };\n\n  return VisibilityMonitor;\n}(EventEmitter);\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\n\n\nvar OnlineMonitor =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(OnlineMonitor, _super);\n\n  function OnlineMonitor() {\n    var _this = _super.call(this, ['online']) || this;\n\n    _this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !util.isMobileCordova()) {\n      window.addEventListener('online', function () {\n        if (!_this.online_) {\n          _this.online_ = true;\n\n          _this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', function () {\n        if (_this.online_) {\n          _this.online_ = false;\n\n          _this.trigger('online', false);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  OnlineMonitor.getInstance = function () {\n    return new OnlineMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n    util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  OnlineMonitor.prototype.currentlyOnline = function () {\n    return this.online_;\n  };\n\n  return OnlineMonitor;\n}(EventEmitter);\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\n\n\nvar PacketReceiver =\n/** @class */\nfunction () {\n  /**\r\n   * @param onMessage_\r\n   */\n  function PacketReceiver(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  };\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   * @param {number} requestNum\r\n   * @param {Array} data\r\n   */\n\n\n  PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n    var _this = this;\n\n    this.pendingResponses[requestNum] = data;\n\n    var _loop_1 = function _loop_1() {\n      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n      delete this_1.pendingResponses[this_1.currentResponseNum];\n\n      var _loop_2 = function _loop_2(i) {\n        if (toProcess[i]) {\n          exceptionGuard(function () {\n            _this.onMessage_(toProcess[i]);\n          });\n        }\n      };\n\n      for (var i = 0; i < toProcess.length; ++i) {\n        _loop_2(i);\n      }\n\n      if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n        if (this_1.onClose) {\n          this_1.onClose();\n          this_1.onClose = null;\n        }\n\n        return \"break\";\n      }\n\n      this_1.currentResponseNum++;\n    };\n\n    var this_1 = this;\n\n    while (this.pendingResponses[this.currentResponseNum]) {\n      var state_1 = _loop_1();\n\n      if (state_1 === \"break\") break;\n    }\n  };\n\n  return PacketReceiver;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\n\n\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\n\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\n\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\n\nvar BrowserPollConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} connId An identifier for this connection, used for logging\r\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n   *                                         transport session\r\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n   *                                     connection previously\r\n   */\n  function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n\n    this.urlFn = function (params) {\n      return repoInfo.connectionURL(LONG_POLLING, params);\n    };\n  }\n  /**\r\n   *\r\n   * @param {function(Object)} onMessage Callback when messages arrive\r\n   * @param {function()} onDisconnect Callback with connection lost.\r\n   */\n\n\n  BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(function () {\n      _this.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n\n      _this.onClosed_();\n\n      _this.connectTimeoutTimer_ = null;\n    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n    executeWhenDOMReady(function () {\n      if (_this.isClosed_) return; //Set up a callback that gets triggered once a connection is set up.\n\n      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var command = args[0],\n            arg1 = args[1],\n            arg2 = args[2];\n\n        _this.incrementIncomingBytes_(args);\n\n        if (!_this.scriptTagHolder) return; // we closed the connection.\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n\n        _this.everConnected_ = true;\n\n        if (command == FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n\n            _this.myPacketOrderer.closeAfter(arg1, function () {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var pN = args[0],\n            data = args[1];\n\n        _this.incrementIncomingBytes_(args);\n\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, function () {\n        _this.onClosed_();\n      }, _this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (_this.scriptTagHolder.uniqueCallbackIdentifier) urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n      if (_this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n      }\n\n      if (_this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\n      }\n\n      if (!util.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n\n      var connectURL = _this.urlFn(urlParams);\n\n      _this.log_('Connecting via long-poll to ' + connectURL);\n\n      _this.scriptTagHolder.addTag(connectURL, function () {\n        /* do nothing */\n      });\n    });\n  };\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n\n\n  BrowserPollConnection.prototype.start = function () {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  };\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceAllow = function () {\n    BrowserPollConnection.forceAllow_ = true;\n  };\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceDisallow = function () {\n    BrowserPollConnection.forceDisallow_ = true;\n  }; // Static method, use string literal so it can be accessed in a generic way\n\n\n  BrowserPollConnection.isAvailable = function () {\n    // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n    // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n    return BrowserPollConnection.forceAllow_ || !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp() && !util.isNodeSdk();\n  };\n  /**\r\n   * No-op for polling\r\n   */\n\n\n  BrowserPollConnection.prototype.markConnectionHealthy = function () {};\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  };\n  /**\r\n   * Triggered when this transport is closed\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n\n\n  BrowserPollConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param {!Object} data The JSON data to transmit.\r\n   */\n\n\n  BrowserPollConnection.prototype.send = function (data) {\n    var dataStr = util.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n    var base64data = util.base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  };\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   * @param {!string} id\r\n   * @param {!string} pw\r\n   */\n\n\n  BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n    if (util.isNodeSdk()) return;\n    this.myDisconnFrame = document.createElement('iframe');\n    var urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  };\n  /**\r\n   * Used to track the bytes received by this client\r\n   * @param {*} args\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    var bytesReceived = util.stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  };\n\n  return BrowserPollConnection;\n}();\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\n\n\nvar FirebaseIFrameScriptHolder =\n/** @class */\nfunction () {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    /**\r\n     * @type {CountedSet.<number, number>}\r\n     */\n\n    this.outstandingRequests = new CountedSet(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!util.isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      var script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        var currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      var iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n\n        if (e.stack) {\n          log(e.stack);\n        }\n\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   * @private\r\n   * @return {Element}\r\n   */\n\n\n  FirebaseIFrameScriptHolder.createIFrame_ = function () {\n    var iframe = document.createElement('iframe');\n    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n    if (document.body) {\n      document.body.appendChild(iframe);\n\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        var a = iframe.contentWindow.document;\n\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        var domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    } // Get the document of the iframe in a browser-specific way.\n\n\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n    } else if (iframe.document) {\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  };\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.close = function () {\n    var _this = this; //Mark this iframe as dead, so no new requests are sent.\n\n\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(function () {\n        if (_this.myIFrame !== null) {\n          document.body.removeChild(_this.myIFrame);\n          _this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    if (util.isNodeSdk() && this.myID) {\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      var theURL = this.urlFn(urlParams);\n      FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\n    } // Protect from being called recursively.\n\n\n    var onDisconnect = this.onDisconnect;\n\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  };\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param {!string} id - The ID of this connection\r\n   * @param {!string} pw - The password for this connection\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n    while (this.newRequest_()) {}\n  };\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      var theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n      var curDataString = '';\n      var i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        var nextSeg = this.pendingSegs[0];\n\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          var theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    }); //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n\n    if (this.alive) {\n      this.newRequest_();\n    }\n  };\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param {!string} url - The URL of the script tag.\r\n   * @param {!number} serial - The serial number of the request.\r\n   * @private\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n    var _this = this; //remember that we sent this request.\n\n\n    this.outstandingRequests.add(serial, 1);\n\n    var doNewRequest = function doNewRequest() {\n      _this.outstandingRequests.remove(serial);\n\n      _this.newRequest_();\n    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n    var readyStateCB = function readyStateCB() {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  };\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param {!string} url - The URL for the script tag source.\r\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n    var _this = this;\n\n    if (util.isNodeSdk()) {\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(function () {\n        try {\n          // if we're already closed, don't add this poll\n          if (!_this.sendNewPolls) return;\n\n          var newScript_1 = _this.myIFrame.doc.createElement('script');\n\n          newScript_1.type = 'text/javascript';\n          newScript_1.async = true;\n          newScript_1.src = url;\n\n          newScript_1.onload = newScript_1.onreadystatechange = function () {\n            var rstate = newScript_1.readyState;\n\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              newScript_1.onload = newScript_1.onreadystatechange = null;\n\n              if (newScript_1.parentNode) {\n                newScript_1.parentNode.removeChild(newScript_1);\n              }\n\n              loadCB();\n            }\n          };\n\n          newScript_1.onerror = function () {\n            log('Long-poll script failed to load: ' + url);\n            _this.sendNewPolls = false;\n\n            _this.close();\n          };\n\n          _this.myIFrame.doc.body.appendChild(newScript_1);\n        } catch (e) {// TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  };\n\n  return FirebaseIFrameScriptHolder;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\n\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\n\n\nvar WebSocketConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} connId identifier for this transport\r\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n   */\n  function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\n  }\n  /**\r\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n   * @return {string} connection url\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\n    var urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (!util.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  };\n  /**\r\n   *\r\n   * @param onMessage Callback when messages arrive\r\n   * @param onDisconnect Callback with connection lost.\r\n   */\n\n\n  WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false; // Assume failure until proven otherwise.\n\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (util.isNodeSdk()) {\n        var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n\n        var options = {\n          headers: {\n            'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + firebase.SDK_VERSION + \"/\" + process.platform + \"/\" + device\n          }\n        }; // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n\n        var env = process['env'];\n        var proxy = this.connURL.indexOf('wss://') == 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        this.mySock = new WebSocketImpl(this.connURL);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      var error$$1 = e.message || e.data;\n\n      if (error$$1) {\n        this.log_(error$$1);\n      }\n\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = function () {\n      _this.log_('Websocket connected.');\n\n      _this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = function () {\n      _this.log_('Websocket connection was disconnected.');\n\n      _this.mySock = null;\n\n      _this.onClosed_();\n    };\n\n    this.mySock.onmessage = function (m) {\n      _this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = function (e) {\n      _this.log_('WebSocket error.  Closing connection.');\n\n      var error$$1 = e.message || e.data;\n\n      if (error$$1) {\n        _this.log_(error$$1);\n      }\n\n      _this.onClosed_();\n    };\n  };\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n\n\n  WebSocketConnection.prototype.start = function () {};\n\n  WebSocketConnection.forceDisallow = function () {\n    WebSocketConnection.forceDisallow_ = true;\n  };\n\n  WebSocketConnection.isAvailable = function () {\n    var isOldAndroid = false;\n\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  };\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   * @return {boolean}\r\n   */\n\n\n  WebSocketConnection.previouslyFailed = function () {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  };\n\n  WebSocketConnection.prototype.markConnectionHealthy = function () {\n    PersistentStorage.remove('previous_websocket_failure');\n  };\n\n  WebSocketConnection.prototype.appendFrame_ = function (data) {\n    this.frames.push(data);\n\n    if (this.frames.length == this.totalFrames) {\n      var fullMess = this.frames.join('');\n      this.frames = null;\n      var jsonMess = util.jsonEval(fullMess); //handle the message\n\n      this.onMessage(jsonMess);\n    }\n  };\n  /**\r\n   * @param {number} frameCount The number of frames we are expecting from the server\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  };\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @param {!String} data\r\n   * @return {?String} Any remaining data to be process, or null if there is none\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.extractFrameCount_ = function (data) {\n    util.assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n\n    if (data.length <= 6) {\n      var frameCount = Number(data);\n\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n\n    this.handleNewFrameCount_(1);\n    return data;\n  };\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess The frame data\r\n   */\n\n\n  WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\n    if (this.mySock === null) return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n\n    var data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      var remainingData = this.extractFrameCount_(data);\n\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  };\n  /**\r\n   * Send a message to the server\r\n   * @param {Object} data The JSON object to transmit\r\n   */\n\n\n  WebSocketConnection.prototype.send = function (data) {\n    this.resetKeepAlive();\n    var dataStr = util.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header\n\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    } //Send the actual data in segments.\n\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  };\n\n  WebSocketConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  };\n\n  WebSocketConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_(); // since this is an internal close, trigger the close listener\n\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n\n\n  WebSocketConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n\n\n  WebSocketConnection.prototype.resetKeepAlive = function () {\n    var _this = this;\n\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(function () {\n      //If there has been no websocket activity for a while, send a no-op\n      if (_this.mySock) {\n        _this.sendString_('0');\n      }\n\n      _this.resetKeepAlive();\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  };\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param {string} str String to send.\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.sendString_ = function (str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  };\n  /**\r\n   * Number of response before we consider the connection \"healthy.\"\r\n   * @type {number}\r\n   */\n\n\n  WebSocketConnection.responsesRequiredToBeHealthy = 2;\n  /**\r\n   * Time to wait for the connection te become healthy before giving up.\r\n   * @type {number}\r\n   */\n\n  WebSocketConnection.healthyTimeout = 30000;\n  return WebSocketConnection;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\n\n\nvar TransportManager =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n   */\n  function TransportManager(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n    /**\r\n     * @const\r\n     * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n     */\n    get: function get() {\n      return [BrowserPollConnection, WebSocketConnection];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @param {!RepoInfo} repoInfo\r\n   * @private\r\n   */\n\n  TransportManager.prototype.initTransports_ = function (repoInfo) {\n    var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      var transports_1 = this.transports_ = [];\n      each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\n        if (transport && transport['isAvailable']()) {\n          transports_1.push(transport);\n        }\n      });\n    }\n  };\n  /**\r\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n   * initial transport to use\r\n   */\n\n\n  TransportManager.prototype.initialTransport = function () {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  };\n  /**\r\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n   * transport, or null\r\n   */\n\n\n  TransportManager.prototype.upgradeTransport = function () {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  };\n\n  return TransportManager;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\n\n\nvar UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\n\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\n\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\n\nvar Connection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!string} id - an id for this connection\r\n   * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n   * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0\n    /* CONNECTING */\n    ;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   * @private\r\n   */\n\n\n  Connection.prototype.start_ = function () {\n    var _this = this;\n\n    var conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessageReceived = this.connReceiver_(this.conn_);\n    var onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n\n    setTimeout(function () {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    var healthyTimeout_ms = conn['healthyTimeout'] || 0;\n\n    if (healthyTimeout_ms > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(function () {\n        _this.healthyTimeout_ = null;\n\n        if (!_this.isHealthy_) {\n          if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n\n            _this.isHealthy_ = true;\n\n            _this.conn_.markConnectionHealthy();\n          } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n\n          } else {\n            _this.log_('Closing unhealthy connection after timeout.');\n\n            _this.close();\n          }\n        }\n      }, Math.floor(healthyTimeout_ms));\n    }\n  };\n  /**\r\n   * @return {!string}\r\n   * @private\r\n   */\n\n\n  Connection.prototype.nextTransportId_ = function () {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  };\n\n  Connection.prototype.disconnReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (everConnected) {\n      if (conn === _this.conn_) {\n        _this.onConnectionLost_(everConnected);\n      } else if (conn === _this.secondaryConn_) {\n        _this.log_('Secondary connection lost.');\n\n        _this.onSecondaryConnectionLost_();\n      } else {\n        _this.log_('closing an old connection');\n      }\n    };\n  };\n\n  Connection.prototype.connReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (message) {\n      if (_this.state_ != 2\n      /* DISCONNECTED */\n      ) {\n          if (conn === _this.rx_) {\n            _this.onPrimaryMessageReceived_(message);\n          } else if (conn === _this.secondaryConn_) {\n            _this.onSecondaryMessageReceived_(message);\n          } else {\n            _this.log_('message on old connection');\n          }\n        }\n    };\n  };\n  /**\r\n   *\r\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n   */\n\n\n  Connection.prototype.sendRequest = function (dataMsg) {\n    // wrap in a data message envelope and send it on\n    var msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  };\n\n  Connection.prototype.tryCleanupConnection = function () {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null; // the server will shutdown the old connection\n    }\n  };\n\n  Connection.prototype.onSecondaryControl_ = function (controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      var cmd = controlData[MESSAGE_TYPE];\n\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close\n\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  };\n\n  Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer == 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer == 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  };\n\n  Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n\n  Connection.prototype.proceedWithUpgrade_ = function () {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start(); // send ack\n\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    }); // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  };\n\n  Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer == 'c') {\n      this.onControl_(data);\n    } else if (layer == 'd') {\n      this.onDataMessage_(data);\n    }\n  };\n\n  Connection.prototype.onDataMessage_ = function (message) {\n    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level\n\n    this.onMessage_(message);\n  };\n\n  Connection.prototype.onPrimaryResponse_ = function () {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  };\n\n  Connection.prototype.onControl_ = function (controlData) {\n    var cmd = requireKey(MESSAGE_TYPE, controlData);\n\n    if (MESSAGE_DATA in controlData) {\n      var payload = controlData[MESSAGE_DATA];\n\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n\n        for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {Object} handshake The handshake data returned from the server\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onHandshake_ = function (handshake) {\n    var timestamp = handshake.ts;\n    var version = handshake.v;\n    var host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host); // if we've already closed the connection, then don't bother trying to progress further\n\n    if (this.state_ == 0\n    /* CONNECTING */\n    ) {\n        this.conn_.start();\n        this.onConnectionEstablished_(this.conn_, timestamp);\n\n        if (PROTOCOL_VERSION !== version) {\n          warn('Protocol version mismatch detected');\n        } // TODO: do we want to upgrade? when? maybe a delay?\n\n\n        this.tryStartUpgrade_();\n      }\n  };\n\n  Connection.prototype.tryStartUpgrade_ = function () {\n    var conn = this.transportManager_.upgradeTransport();\n\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  };\n\n  Connection.prototype.startUpgrade_ = function (conn) {\n    var _this = this;\n\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessage = this.connReceiver_(this.secondaryConn_);\n    var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n\n    setTimeoutNonBlocking(function () {\n      if (_this.secondaryConn_) {\n        _this.log_('Timed out trying to upgrade.');\n\n        _this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  };\n\n  Connection.prototype.onReset_ = function (host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host); // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n\n    if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.close();\n      } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  };\n\n  Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\n    var _this = this;\n\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1\n    /* CONNECTED */\n    ;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n\n\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(function () {\n        _this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  };\n\n  Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.log_('sending ping on primary.');\n        this.sendData_({\n          t: 'c',\n          d: {\n            t: PING,\n            d: {}\n          }\n        });\n      }\n  };\n\n  Connection.prototype.onSecondaryConnectionLost_ = function () {\n    var conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  };\n  /**\r\n   *\r\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onConnectionLost_ = function (everConnected) {\n    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n\n    if (!everConnected && this.state_ === 0\n    /* CONNECTING */\n    ) {\n        this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n\n        if (this.repoInfo_.isCacheableHost()) {\n          PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n\n          this.repoInfo_.internalHost = this.repoInfo_.host;\n        }\n      } else if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.log_('Realtime connection lost.');\n      }\n\n    this.close();\n  };\n  /**\r\n   *\r\n   * @param {string} reason\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onConnectionShutdown_ = function (reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    } // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n\n\n    this.onDisconnect_ = null;\n    this.close();\n  };\n\n  Connection.prototype.sendData_ = function (data) {\n    if (this.state_ !== 1\n    /* CONNECTED */\n    ) {\n        throw 'Connection is not connected';\n      } else {\n      this.tx_.send(data);\n    }\n  };\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n\n\n  Connection.prototype.close = function () {\n    if (this.state_ !== 2\n    /* DISCONNECTED */\n    ) {\n        this.log_('Closing realtime connection.');\n        this.state_ = 2\n        /* DISCONNECTED */\n        ;\n        this.closeConnections_();\n\n        if (this.onDisconnect_) {\n          this.onDisconnect_();\n          this.onDisconnect_ = null;\n        }\n      }\n  };\n  /**\r\n   *\r\n   * @private\r\n   */\n\n\n  Connection.prototype.closeConnections_ = function () {\n    this.log_('Shutting down all connections');\n\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  };\n\n  return Connection;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\n\n\nvar ServerActions =\n/** @class */\nfunction () {\n  function ServerActions() {}\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   * @param {string=} hash\r\n   */\n\n\n  ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, ?string)} onComplete\r\n   * @param {string=} hash\r\n   */\n\n\n  ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param {string} token The authentication token\r\n   */\n\n\n  ServerActions.prototype.refreshAuthToken = function (token) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};\n  /**\r\n   * @param {Object.<string, *>} stats\r\n   */\n\n\n  ServerActions.prototype.reportStats = function (stats) {};\n\n  return ServerActions;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\n\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\n\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\n\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\n\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\n\nvar PersistentConnection =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PersistentConnection, _super);\n  /**\r\n   * @implements {ServerActions}\r\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n   * @param onConnectStatus_\r\n   * @param onServerInfoUpdate_\r\n   * @param authTokenProvider_\r\n   * @param authOverride_\r\n   */\n\n\n  function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.onConnectStatus_ = onConnectStatus_;\n    _this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    _this.authOverride_ = authOverride_; // Used for diagnostic logging.\n\n    _this.id = PersistentConnection.nextPersistentConnectionId_++;\n    _this.log_ = logWrapper('p:' + _this.id + ':');\n    /** @private {Object} */\n\n    _this.interruptReasons_ = {};\n    _this.listens_ = {};\n    _this.outstandingPuts_ = [];\n    _this.outstandingPutCount_ = 0;\n    _this.onDisconnectRequestQueue_ = [];\n    _this.connected_ = false;\n    _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    _this.securityDebugCallback_ = null;\n    _this.lastSessionId = null;\n    /** @private {number|null} */\n\n    _this.establishConnectionTimer_ = null;\n    /** @private {boolean} */\n\n    _this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.\n\n    _this.requestCBHash_ = {};\n    _this.requestNumber_ = 0;\n    /** @private {?{\r\n     *   sendRequest(Object),\r\n     *   close()\r\n     * }} */\n\n    _this.realtime_ = null;\n    /** @private {string|null} */\n\n    _this.authToken_ = null;\n    _this.forceTokenRefresh_ = false;\n    _this.invalidAuthTokenCount_ = 0;\n    _this.firstConnection_ = true;\n    _this.lastConnectionAttemptTime_ = null;\n    _this.lastConnectionEstablishedTime_ = null;\n\n    if (authOverride_ && !util.isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n\n    _this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\n    }\n\n    return _this;\n  }\n  /**\r\n   * @param {!string} action\r\n   * @param {*} body\r\n   * @param {function(*)=} onResponse\r\n   * @protected\r\n   */\n\n\n  PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\n    var curReqNum = ++this.requestNumber_;\n    var msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(util.stringify(msg));\n    util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var queryId = query.queryIdentifier();\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    this.listens_[pathString] = this.listens_[pathString] || {};\n    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\n    util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\n    var listenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens_[pathString][queryId] = listenSpec;\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  };\n  /**\r\n   * @param {!{onComplete(),\r\n   *           hashFn():!string,\r\n   *           query: !Query,\r\n   *           tag: ?number}} listenSpec\r\n   * @private\r\n   */\n\n\n  PersistentConnection.prototype.sendListen_ = function (listenSpec) {\n    var _this = this;\n\n    var query = listenSpec.query;\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'q'; // Only bother to send query if it's non-default.\n\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[\n    /*hash*/\n    'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, function (message) {\n      var payload = message[\n      /*data*/\n      'd'];\n      var status = message[\n      /*status*/\n      's']; // print warnings in any case...\n\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId]; // only trigger actions if the listen hasn't been removed and readded\n\n      if (currentListenSpec === listenSpec) {\n        _this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          _this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  };\n  /**\r\n   * @param {*} payload\r\n   * @param {!Query} query\r\n   * @private\r\n   */\n\n\n  PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\n    if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\n      var warnings = util.safeGet(payload, 'w');\n\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        var indexSpec = '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        var indexPath = query.path.toString();\n        warn(\"Using an unspecified index. Your data will be downloaded and \" + (\"filtered on the client. Consider adding \" + indexSpec + \" at \") + (indexPath + \" to your security rules for better performance.\"));\n      }\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.refreshAuthToken = function (token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, function () {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  };\n  /**\r\n   * @param {!string} credential\r\n   * @private\r\n   */\n\n\n  PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    var isFirebaseSecret = credential && credential.length === 40;\n\n    if (isFirebaseSecret || util.isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  };\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n\n\n  PersistentConnection.prototype.tryAuth = function () {\n    var _this = this;\n\n    if (this.connected_ && this.authToken_) {\n      var token_1 = this.authToken_;\n      var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\n      var requestData = {\n        cred: token_1\n      };\n\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n\n      this.sendRequest(authMethod, requestData, function (res) {\n        var status = res[\n        /*status*/\n        's'];\n        var data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (_this.authToken_ === token_1) {\n          if (status === 'ok') {\n            _this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            _this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.unlisten = function (query, tag) {\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\n    var listen = this.removeListen_(pathString, queryId);\n\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  };\n\n  PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'n'; // Only bother sending queryId if it's non-default.\n\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'o',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'om',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'oc',\n        data: null,\n        onComplete: onComplete\n      });\n    }\n  };\n\n  PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, function (response) {\n      if (onComplete) {\n        setTimeout(function () {\n          onComplete(response[\n          /*status*/\n          's'], response[\n          /* data */\n          'd']);\n        }, Math.floor(0));\n      }\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  };\n\n  PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    if (hash !== undefined) request[\n    /*hash*/\n    'h'] = hash; // TODO: Only keep track of the most recent put for a given path?\n\n    this.outstandingPuts_.push({\n      action: action,\n      request: request,\n      onComplete: onComplete\n    });\n    this.outstandingPutCount_++;\n    var index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  };\n\n  PersistentConnection.prototype.sendPut_ = function (index) {\n    var _this = this;\n\n    var action = this.outstandingPuts_[index].action;\n    var request = this.outstandingPuts_[index].request;\n    var onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, function (message) {\n      _this.log_(action + ' response', message);\n\n      delete _this.outstandingPuts_[index];\n      _this.outstandingPutCount_--; // Clean up array occasionally.\n\n      if (_this.outstandingPutCount_ === 0) {\n        _this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) onComplete(message[\n      /*status*/\n      's'], message[\n      /* data */\n      'd']);\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.reportStats = function (stats) {\n    var _this = this; // If we're not connected, we just drop the stats.\n\n\n    if (this.connected_) {\n      var request = {\n        /*counters*/\n        c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest(\n      /*stats*/\n      's', request, function (result) {\n        var status = result[\n        /*status*/\n        's'];\n\n        if (status !== 'ok') {\n          var errorReason = result[\n          /* data */\n          'd'];\n\n          _this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  };\n  /**\r\n   * @param {*} message\r\n   * @private\r\n   */\n\n\n  PersistentConnection.prototype.onDataMessage_ = function (message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + util.stringify(message));\n      var reqNum = message['r'];\n      var onResponse = this.requestCBHash_[reqNum];\n\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[\n        /*body*/\n        'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  };\n\n  PersistentConnection.prototype.onDataPush_ = function (action, body) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') this.onDataUpdate_(body[\n    /*path*/\n    'p'], body[\n    /*data*/\n    'd'],\n    /*isMerge*/\n    false, body['t']);else if (action === 'm') this.onDataUpdate_(body[\n    /*path*/\n    'p'], body[\n    /*data*/\n    'd'],\n    /*isMerge=*/\n    true, body['t']);else if (action === 'c') this.onListenRevoked_(body[\n    /*path*/\n    'p'], body[\n    /*query*/\n    'q']);else if (action === 'ac') this.onAuthRevoked_(body[\n    /*status code*/\n    's'], body[\n    /* explanation */\n    'd']);else if (action === 'sd') this.onSecurityDebugPacket_(body);else error('Unrecognized action received from server: ' + util.stringify(action) + '\\nAre you using the latest client?');\n  };\n\n  PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  };\n\n  PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\n    var _this = this;\n\n    util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n\n    this.establishConnectionTimer_ = setTimeout(function () {\n      _this.establishConnectionTimer_ = null;\n\n      _this.establishConnection_();\n    }, Math.floor(timeout));\n  };\n  /**\r\n   * @param {boolean} visible\r\n   * @private\r\n   */\n\n\n  PersistentConnection.prototype.onVisible_ = function (visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n\n    this.visible_ = visible;\n  };\n\n  PersistentConnection.prototype.onOnline_ = function (online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n\n    this.cancelSentTransactions_(); // Clear out the pending requests.\n\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.\n\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n\n    this.onConnectStatus_(false);\n  };\n\n  PersistentConnection.prototype.establishConnection_ = function () {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      var onDataMessage_1 = this.onDataMessage_.bind(this);\n      var onReady_1 = this.onReady_.bind(this);\n      var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\n      var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      var self_1 = this;\n      var lastSessionId_1 = this.lastSessionId;\n      var canceled_1 = false;\n      var connection_1 = null;\n\n      var closeFn_1 = function closeFn_1() {\n        if (connection_1) {\n          connection_1.close();\n        } else {\n          canceled_1 = true;\n          onDisconnect_1();\n        }\n      };\n\n      var sendRequestFn = function sendRequestFn(msg) {\n        util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\n        connection_1.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn_1,\n        sendRequest: sendRequestFn\n      };\n      var forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false; // First fetch auth token, and establish connection after fetching the token was successful\n\n      this.authTokenProvider_.getToken(forceRefresh).then(function (result) {\n        if (!canceled_1) {\n          log('getToken() completed. Creating connection.');\n          self_1.authToken_ = result && result.accessToken;\n          connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1,\n          /* onKill= */\n          function (reason) {\n            warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\n            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId_1);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      }).then(null, function (error$$1) {\n        self_1.log_('Failed to get token: ' + error$$1);\n\n        if (!canceled_1) {\n          if (util.CONSTANTS.NODE_ADMIN) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error$$1);\n          }\n\n          closeFn_1();\n        }\n      });\n    }\n  };\n  /**\r\n   * @param {string} reason\r\n   */\n\n\n  PersistentConnection.prototype.interrupt = function (reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  };\n  /**\r\n   * @param {string} reason\r\n   */\n\n\n  PersistentConnection.prototype.resume = function (reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n\n    if (util.isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  };\n\n  PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\n    var delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  };\n\n  PersistentConnection.prototype.cancelSentTransactions_ = function () {\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      var put = this.outstandingPuts_[i];\n\n      if (put &&\n      /*hash*/\n      'h' in put.request && put.queued) {\n        if (put.onComplete) put.onComplete('disconnect');\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    } // Clean up array occasionally.\n\n\n    if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];\n  };\n  /**\r\n   * @param {!string} pathString\r\n   * @param {Array.<*>=} query\r\n   * @private\r\n   */\n\n\n  PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    var queryId;\n\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(function (q) {\n        return ObjectToUniqueKey(q);\n      }).join('$');\n    }\n\n    var listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) listen.onComplete('permission_denied');\n  };\n  /**\r\n   * @param {!string} pathString\r\n   * @param {!string} queryId\r\n   * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n   * @private\r\n   */\n\n\n  PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\n    var normalizedPathString = new Path(pathString).toString(); // normalize path.\n\n    var listen;\n\n    if (this.listens_[normalizedPathString] !== undefined) {\n      listen = this.listens_[normalizedPathString][queryId];\n      delete this.listens_[normalizedPathString][queryId];\n\n      if (util.getCount(this.listens_[normalizedPathString]) === 0) {\n        delete this.listens_[normalizedPathString];\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n\n    return listen;\n  };\n\n  PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  };\n\n  PersistentConnection.prototype.restoreState_ = function () {\n    var _this = this; //Re-authenticate ourselves if we have a credential stored.\n\n\n    this.tryAuth(); // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n\n    util.forEach(this.listens_, function (pathString, queries) {\n      util.forEach(queries, function (key, listenSpec) {\n        _this.sendListen_(listenSpec);\n      });\n    });\n\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) this.sendPut_(i);\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      var request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n  };\n  /**\r\n   * Sends client stats for first connection\r\n   * @private\r\n   */\n\n\n  PersistentConnection.prototype.sendConnectStats_ = function () {\n    var stats = {};\n    var clientName = 'js';\n\n    if (util.CONSTANTS.NODE_ADMIN) {\n      clientName = 'admin_node';\n    } else if (util.CONSTANTS.NODE_CLIENT) {\n      clientName = 'node';\n    }\n\n    stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (util.isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (util.isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n\n    this.reportStats(stats);\n  };\n  /**\r\n   * @return {boolean}\r\n   * @private\r\n   */\n\n\n  PersistentConnection.prototype.shouldReconnect_ = function () {\n    var online = OnlineMonitor.getInstance().currentlyOnline();\n    return util.isEmpty(this.interruptReasons_) && online;\n  };\n  /**\r\n   * @private\r\n   */\n\n\n  PersistentConnection.nextPersistentConnectionId_ = 0;\n  /**\r\n   * Counter for number of connections created. Mainly used for tagging in the logs\r\n   * @type {number}\r\n   * @private\r\n   */\n\n  PersistentConnection.nextConnectionId_ = 0;\n  return PersistentConnection;\n}(ServerActions);\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\n\n\nvar ReadonlyRestClient =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ReadonlyRestClient, _super);\n  /**\r\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n   * @param {AuthTokenProvider} authTokenProvider_\r\n   * @implements {ServerActions}\r\n   */\n\n\n  function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    /** @private {function(...[*])} */\n\n    _this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     *\r\n     * @private {!Object.<string, !Object>}\r\n     */\n\n    _this.listens_ = {};\n    return _this;\n  }\n\n  ReadonlyRestClient.prototype.reportStats = function (stats) {\n    throw new Error('Method not implemented.');\n  };\n  /**\r\n   * @param {!Query} query\r\n   * @param {?number=} tag\r\n   * @return {string}\r\n   * @private\r\n   */\n\n\n  ReadonlyRestClient.getListenId_ = function (query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\n      return query.path.toString();\n    }\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var _this = this;\n\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier()); // Mark this listener so we can tell if it's removed.\n\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    var thisListen = {};\n    this.listens_[listenId] = thisListen;\n    var queryStringParamaters = query.getQueryParams().toRestQueryStringParameters();\n    this.restRequest_(pathString + '.json', queryStringParamaters, function (error$$1, result) {\n      var data = result;\n\n      if (error$$1 === 404) {\n        data = null;\n        error$$1 = null;\n      }\n\n      if (error$$1 === null) {\n        _this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false, tag);\n      }\n\n      if (util.safeGet(_this.listens_, listenId) === thisListen) {\n        var status_1;\n\n        if (!error$$1) {\n          status_1 = 'ok';\n        } else if (error$$1 == 401) {\n          status_1 = 'permission_denied';\n        } else {\n          status_1 = 'rest_error:' + error$$1;\n        }\n\n        onComplete(status_1, null);\n      }\n    });\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.unlisten = function (query, tag) {\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.refreshAuthToken = function (token) {// no-op since we just always call getToken.\n  };\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   *\r\n   * @param {!string} pathString\r\n   * @param {!Object.<string, *>} queryStringParameters\r\n   * @param {?function(?number, *=)} callback\r\n   * @private\r\n   */\n\n\n  ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\n    var _this = this;\n\n    if (queryStringParameters === void 0) {\n      queryStringParameters = {};\n    }\n\n    queryStringParameters['format'] = 'export';\n    this.authTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false).then(function (authTokenData) {\n      var authToken = authTokenData && authTokenData.accessToken;\n\n      if (authToken) {\n        queryStringParameters['auth'] = authToken;\n      }\n\n      var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + util.querystring(queryStringParameters);\n\n      _this.log_('Sending REST request for ' + url);\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = function () {\n        if (callback && xhr.readyState === 4) {\n          _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n\n          var res = null;\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = util.jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n\n            callback(xhr.status);\n          }\n\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url,\n      /*asynchronous=*/\n      true);\n      xhr.send();\n    });\n  };\n\n  return ReadonlyRestClient;\n}(ServerActions);\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * A connection to a single data repository.\r\n */\n\nvar Repo =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!RepoInfo} repoInfo_\r\n   * @param {boolean} forceRestClient\r\n   * @param {!FirebaseApp} app\r\n   */\n  function Repo(repoInfo_, forceRestClient, app) {\n    var _this = this;\n\n    this.repoInfo_ = repoInfo_;\n    this.app = app;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null; // A list of data pieces and paths to be set when this client disconnects.\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @type {?PersistentConnection}\r\n     */\n\n    this.persistentConnection_ = null;\n    /** @type {!AuthTokenProvider} */\n\n    var authTokenProvider = new AuthTokenProvider(app);\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider); // Minor hack: Fire onConnect immediately, since there's no actual connection.\n\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      var authOverride = app.options['databaseAuthVariableOverride']; // Validate authOverride\n\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n        }\n\n        try {\n          util.stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(function (token) {\n      _this.server_.refreshAuthToken(token);\n    }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n\n    this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () {\n      return new StatsReporter(_this.stats_, _this.server_);\n    });\n    this.transactions_init_(); // Used for .info.\n\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: function startListening(query, tag, currentHashFn, onComplete) {\n        var infoEvents = [];\n\n        var node = _this.infoData_.getNode(query.path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n\n\n        if (!node.isEmpty()) {\n          infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\n          setTimeout(function () {\n            onComplete('ok');\n          }, 0);\n        }\n\n        return infoEvents;\n      },\n      stopListening: function stopListening() {}\n    });\n    this.updateInfo_('connected', false);\n    this.serverSyncTree_ = new SyncTree({\n      startListening: function startListening(query, tag, currentHashFn, onComplete) {\n        _this.server_.listen(query, currentHashFn, tag, function (status, data) {\n          var events = onComplete(status, data);\n\n          _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        }); // No synchronous events for network-backed sync trees\n\n\n        return [];\n      },\n      stopListening: function stopListening(query, tag) {\n        _this.server_.unlisten(query, tag);\n      }\n    });\n  }\n  /**\r\n   * @return {string}  The URL corresponding to the root of this Firebase.\r\n   */\n\n\n  Repo.prototype.toString = function () {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  };\n  /**\r\n   * @return {!string} The namespace represented by the repo.\r\n   */\n\n\n  Repo.prototype.name = function () {\n    return this.repoInfo_.namespace;\n  };\n  /**\r\n   * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n   */\n\n\n  Repo.prototype.serverTime = function () {\n    var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    var offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n  };\n  /**\r\n   * Generate ServerValues using some variables from the repo object.\r\n   * @return {!Object}\r\n   */\n\n\n  Repo.prototype.generateServerValues = function () {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  };\n  /**\r\n   * Called by realtime when we get new messages from the server.\r\n   *\r\n   * @private\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {boolean} isMerge\r\n   * @param {?number} tag\r\n   */\n\n\n  Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\n    // For testing.\n    this.dataUpdateCount++;\n    var path = new Path(pathString);\n    data = this.interceptServerDataCallback_ ? this.interceptServerDataCallback_(pathString, data) : data;\n    var events = [];\n\n    if (tag) {\n      if (isMerge) {\n        var taggedChildren = util.map(data, function (raw) {\n          return nodeFromJSON$1(raw);\n        });\n        events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\n      } else {\n        var taggedSnap = nodeFromJSON$1(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\n      }\n    } else if (isMerge) {\n      var changedChildren = util.map(data, function (raw) {\n        return nodeFromJSON$1(raw);\n      });\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      var snap = nodeFromJSON$1(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n\n    var affectedPath = path;\n\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  };\n  /**\r\n   * TODO: This should be @private but it's used by test_access.js and internal.js\r\n   * @param {?function(!string, *):*} callback\r\n   * @private\r\n   */\n\n\n  Repo.prototype.interceptServerData_ = function (callback) {\n    this.interceptServerDataCallback_ = callback;\n  };\n  /**\r\n   * @param {!boolean} connectStatus\r\n   * @private\r\n   */\n\n\n  Repo.prototype.onConnectStatus_ = function (connectStatus) {\n    this.updateInfo_('connected', connectStatus);\n\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  };\n  /**\r\n   * @param {!Object} updates\r\n   * @private\r\n   */\n\n\n  Repo.prototype.onServerInfoUpdate_ = function (updates) {\n    var _this = this;\n\n    each(updates, function (value, key) {\n      _this.updateInfo_(key, value);\n    });\n  };\n  /**\r\n   *\r\n   * @param {!string} pathString\r\n   * @param {*} value\r\n   * @private\r\n   */\n\n\n  Repo.prototype.updateInfo_ = function (pathString, value) {\n    var path = new Path('/.info/' + pathString);\n    var newNode = nodeFromJSON$1(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  };\n  /**\r\n   * @return {!number}\r\n   * @private\r\n   */\n\n\n  Repo.prototype.getNextWriteId_ = function () {\n    return this.nextWriteId_++;\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @param {*} newVal\r\n   * @param {number|string|null} newPriority\r\n   * @param {?function(?Error, *=)} onComplete\r\n   */\n\n\n  Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\n    var _this = this;\n\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n    var writeId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(path.toString(), newNodeUnresolved.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      var success = status === 'ok';\n\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\n\n      _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n    var affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath); // We queued the events above, so just flush the queue here\n\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @param {!Object} childrenToMerge\r\n   * @param {?function(?Error, *=)} onComplete\r\n   */\n\n\n  Repo.prototype.update = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n\n    this.log_('update', {\n      path: path.toString(),\n      value: childrenToMerge\n    }); // Start with our existing data and merge each child into it.\n\n    var empty = true;\n    var serverValues = this.generateServerValues();\n    var changedChildren = {};\n    util.forEach(childrenToMerge, function (changedKey, changedValue) {\n      empty = false;\n      var newNodeUnresolved = nodeFromJSON$1(changedValue);\n      changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n    });\n\n    if (!empty) {\n      var writeId_1 = this.getNextWriteId_();\n      var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n        var success = status === 'ok';\n\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\n\n        var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\n\n        _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n\n        _this.callOnCompleteCallback(onComplete, status, errorReason);\n      });\n      util.forEach(childrenToMerge, function (changedPath) {\n        var affectedPath = _this.abortTransactions_(path.child(changedPath));\n\n        _this.rerunTransactions_(affectedPath);\n      }); // We queued the events above, so just flush the queue here\n\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  };\n  /**\r\n   * Applies all of the changes stored up in the onDisconnect_ tree.\r\n   * @private\r\n   */\n\n\n  Repo.prototype.runOnDisconnectEvents_ = function () {\n    var _this = this;\n\n    this.log_('onDisconnectEvents');\n    var serverValues = this.generateServerValues();\n    var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\n    var events = [];\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\n      events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\n\n      var affectedPath = _this.abortTransactions_(path);\n\n      _this.rerunTransactions_(affectedPath);\n    });\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @param {?function(?Error, *=)} onComplete\r\n   */\n\n\n  Repo.prototype.onDisconnectCancel = function (path, onComplete) {\n    var _this = this;\n\n    this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.forget(path);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @param {*} value\r\n   * @param {?function(?Error, *=)} onComplete\r\n   */\n\n\n  Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\n    var _this = this;\n\n    var newNode = nodeFromJSON$1(value);\n    this.server_.onDisconnectPut(path.toString(), newNode.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @param {*} value\r\n   * @param {*} priority\r\n   * @param {?function(?Error, *=)} onComplete\r\n   */\n\n\n  Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\n    var _this = this;\n\n    var newNode = nodeFromJSON$1(value, priority);\n    this.server_.onDisconnectPut(path.toString(), newNode.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @param {*} childrenToMerge\r\n   * @param {?function(?Error, *=)} onComplete\r\n   */\n\n\n  Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n\n    if (util.isEmpty(childrenToMerge)) {\n      log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n      if (status === 'ok') {\n        util.forEach(childrenToMerge, function (childName, childNode) {\n          var newChildNode = nodeFromJSON$1(childNode);\n\n          _this.onDisconnect_.remember(path.child(childName), newChildNode);\n        });\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n  /**\r\n   * @param {!Query} query\r\n   * @param {!EventRegistration} eventRegistration\r\n   */\n\n\n  Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\n    var events;\n\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\n    }\n\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n  /**\r\n   * @param {!Query} query\r\n   * @param {?EventRegistration} eventRegistration\r\n   */\n\n\n  Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    var events;\n\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\n    }\n\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n\n  Repo.prototype.interrupt = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  };\n\n  Repo.prototype.resume = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  };\n\n  Repo.prototype.stats = function (showDelta) {\n    if (showDelta === void 0) {\n      showDelta = false;\n    }\n\n    if (typeof console === 'undefined') return;\n    var stats;\n\n    if (showDelta) {\n      if (!this.statsListener_) this.statsListener_ = new StatsListener(this.stats_);\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\n      return Math.max(currentValue.length, previousValue);\n    }, 0);\n    util.forEach(stats, function (stat, value) {\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (var i = stat.length; i < longestName + 2; i++) stat += ' ';\n\n      console.log(stat + value);\n    });\n  };\n\n  Repo.prototype.statsIncrementCounter = function (metric) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  };\n  /**\r\n   * @param {...*} var_args\r\n   * @private\r\n   */\n\n\n  Repo.prototype.log_ = function () {\n    var var_args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      var_args[_i] = arguments[_i];\n    }\n\n    var prefix = '';\n\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n\n    log.apply(void 0, [prefix].concat(var_args));\n  };\n  /**\r\n   * @param {?function(?Error, *=)} callback\r\n   * @param {!string} status\r\n   * @param {?string=} errorReason\r\n   */\n\n\n  Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\n    if (callback) {\n      exceptionGuard(function () {\n        if (status == 'ok') {\n          callback(null);\n        } else {\n          var code = (status || 'error').toUpperCase();\n          var message = code;\n          if (errorReason) message += ': ' + errorReason;\n          var error$$1 = new Error(message);\n          error$$1.code = code;\n          callback(error$$1);\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(Repo.prototype, \"database\", {\n    get: function get() {\n      return this.__database || (this.__database = new Database(this));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Repo;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\n\n\nvar RangedFilter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function RangedFilter(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n  /**\r\n   * @return {!NamedNode}\r\n   */\n\n\n  RangedFilter.prototype.getStartPost = function () {\n    return this.startPost_;\n  };\n  /**\r\n   * @return {!NamedNode}\r\n   */\n\n\n  RangedFilter.prototype.getEndPost = function () {\n    return this.endPost_;\n  };\n  /**\r\n   * @param {!NamedNode} node\r\n   * @return {boolean}\r\n   */\n\n\n  RangedFilter.prototype.matches = function (node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n\n    var filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    var self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.getIndexedFilter = function () {\n    return this.indexedFilter_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n\n\n  RangedFilter.getStartPost_ = function (params) {\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n\n\n  RangedFilter.getEndPost_ = function (params) {\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  };\n\n  return RangedFilter;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\n\n\nvar LimitedFilter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function LimitedFilter(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    var filtered;\n\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n\n        var count = 0;\n\n        while (iterator.hasNext() && count < this.limit_) {\n          var next = iterator.getNext();\n          var inRange = void 0;\n\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        var startPost = void 0;\n        var endPost = void 0;\n        var cmp = void 0;\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          var indexCompare_1 = this.index_.getCompare();\n\n          cmp = function cmp(a, b) {\n            return indexCompare_1(b, a);\n          };\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        var count = 0;\n        var foundStartPost = false;\n\n        while (iterator.hasNext()) {\n          var next = iterator.getNext();\n\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n\n          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.getIndexedFilter = function () {\n    return this.rangedFilter_.getIndexedFilter();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!Node} snap\r\n   * @param {string} childKey\r\n   * @param {!Node} childSnap\r\n   * @param {!CompleteChildSource} source\r\n   * @param {?ChildChangeAccumulator} changeAccumulator\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n\n  LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    var cmp;\n\n    if (this.reverse_) {\n      var indexCmp_1 = this.index_.getCompare();\n\n      cmp = function cmp(a, b) {\n        return indexCmp_1(b, a);\n      };\n    } else {\n      cmp = this.index_.getCompare();\n    }\n\n    var oldEventCache = snap;\n    util.assert(oldEventCache.numChildren() == this.limit_, '');\n    var newChildNamedNode = new NamedNode(childKey, childSnap);\n    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    var inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n    if (oldEventCache.hasChild(childKey)) {\n      var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n      while (nextChild != null && (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n\n      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\n        }\n\n        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\n          }\n\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  };\n\n  return LimitedFilter;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\n\n\nvar QueryParams =\n/** @class */\nfunction () {\n  function QueryParams() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasStart = function () {\n    return this.startSet_;\n  };\n  /**\r\n   * @return {boolean} True if it would return from left.\r\n   */\n\n\n  QueryParams.prototype.isViewFromLeft = function () {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    }\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartValue = function () {\n    util.assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartName = function () {\n    util.assert(this.startSet_, 'Only valid if start has been set');\n\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasEnd = function () {\n    return this.endSet_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndValue = function () {\n    util.assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndName = function () {\n    util.assert(this.endSet_, 'Only valid if end has been set');\n\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasLimit = function () {\n    return this.limitSet_;\n  };\n  /**\r\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n   */\n\n\n  QueryParams.prototype.hasAnchoredLimit = function () {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  };\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   * @return {!number}\r\n   */\n\n\n  QueryParams.prototype.getLimit = function () {\n    util.assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  };\n  /**\r\n   * @return {!Index}\r\n   */\n\n\n  QueryParams.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   * @private\r\n   */\n\n\n  QueryParams.prototype.copy_ = function () {\n    var copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limit = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToFirst = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToLast = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.startAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.startSet_ = true;\n\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n\n    newParams.indexStartValue_ = indexValue;\n\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.endAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.endSet_ = true;\n\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n\n    newParams.indexEndValue_ = indexValue;\n\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {!Index} index\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.orderBy = function (index) {\n    var newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  };\n  /**\r\n   * @return {!Object}\r\n   */\n\n\n  QueryParams.prototype.getQueryObject = function () {\n    var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    var obj = {};\n\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      var viewFrom = this.viewFrom_;\n\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    } // For now, priority index is the default, so we only specify if it's some other index\n\n\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n\n    return obj;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.loadsAllData = function () {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.isDefault = function () {\n    return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\n  };\n  /**\r\n   * @return {!NodeFilter}\r\n   */\n\n\n  QueryParams.prototype.getNodeFilter = function () {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  };\n  /**\r\n   * Returns a set of REST query string parameters representing this query.\r\n   *\r\n   * @return {!Object.<string,*>} query string parameters\r\n   */\n\n\n  QueryParams.prototype.toRestQueryStringParameters = function () {\n    var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    var qs = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    var orderBy;\n\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n\n    qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\n\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\n\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  };\n  /**\r\n   * Wire Protocol Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n\n  QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n  /**\r\n   * REST Query Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n  QueryParams.REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n  /**\r\n   * Default, empty query parameters\r\n   * @type {!QueryParams}\r\n   * @const\r\n   */\n\n  QueryParams.DEFAULT = new QueryParams();\n  return QueryParams;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Reference =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Reference, _super);\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   *\r\n   * @param {!Repo} repo\r\n   * @param {(!Path)} path\r\n   * @extends {Query}\r\n   */\n\n\n  function Reference(repo, path) {\n    var _this = this;\n\n    if (!(repo instanceof Repo)) {\n      throw new Error('new Reference() no longer supported - use app.database().');\n    } // call Query's constructor, passing in the repo and path.\n\n\n    _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\n    return _this;\n  }\n  /** @return {?string} */\n\n\n  Reference.prototype.getKey = function () {\n    util.validateArgCount('Reference.key', 0, 0, arguments.length);\n    if (this.path.isEmpty()) return null;else return this.path.getBack();\n  };\n  /**\r\n   * @param {!(string|Path)} pathString\r\n   * @return {!Reference}\r\n   */\n\n\n  Reference.prototype.child = function (pathString) {\n    util.validateArgCount('Reference.child', 1, 1, arguments.length);\n\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) validateRootPathString('Reference.child', 1, pathString, false);else validatePathString('Reference.child', 1, pathString, false);\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  };\n  /** @return {?Reference} */\n\n\n  Reference.prototype.getParent = function () {\n    util.validateArgCount('Reference.parent', 0, 0, arguments.length);\n    var parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  };\n  /** @return {!Reference} */\n\n\n  Reference.prototype.getRoot = function () {\n    util.validateArgCount('Reference.root', 0, 0, arguments.length);\n    var ref = this;\n\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n\n    return ref;\n  };\n  /** @return {!Database} */\n\n\n  Reference.prototype.databaseProp = function () {\n    return this.repo.database;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.set = function (newVal, onComplete) {\n    util.validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    util.validateCallback('Reference.set', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path, newVal,\n    /*priority=*/\n    null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.update = function (objectToMerge, onComplete) {\n    util.validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n\n    validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\n    util.validateCallback('Reference.update', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {string|number|null} newPriority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n    util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\n    if (this.getKey() === '.length' || this.getKey() === '.keys') throw 'Reference.setWithPriority failed: ' + this.getKey() + ' is a read-only object.';\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.remove = function (onComplete) {\n    util.validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    util.validateCallback('Reference.remove', 1, onComplete, true);\n    return this.set(null, onComplete);\n  };\n  /**\r\n   * @param {function(*):*} transactionUpdate\r\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n   * @param {boolean=} applyLocally\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n    util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    util.validateCallback('Reference.transaction', 2, onComplete, true); // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n    if (this.getKey() === '.length' || this.getKey() === '.keys') throw 'Reference.transaction failed: ' + this.getKey() + ' is a read-only object.';\n    if (applyLocally === undefined) applyLocally = true;\n    var deferred = new util.Deferred();\n\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(function () {});\n    }\n\n    var promiseComplete = function promiseComplete(error$$1, committed, snapshot) {\n      if (error$$1) {\n        deferred.reject(error$$1);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n\n      if (typeof onComplete === 'function') {\n        onComplete(error$$1, committed, snapshot);\n      }\n    };\n\n    this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\n    return deferred.promise;\n  };\n  /**\r\n   * @param {string|number|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.setPriority = function (priority, onComplete) {\n    util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    util.validateCallback('Reference.setPriority', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*=} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Reference}\r\n   */\n\n\n  Reference.prototype.push = function (value, onComplete) {\n    util.validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    util.validateCallback('Reference.push', 2, onComplete, true);\n    var now = this.repo.serverTime();\n    var name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n\n    var thennablePushRef = this.child(name);\n    var pushRef = this.child(name);\n    var promise;\n\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(function () {\n        return pushRef;\n      });\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(function () {});\n    }\n\n    return thennablePushRef;\n  };\n  /**\r\n   * @return {!OnDisconnect}\r\n   */\n\n\n  Reference.prototype.onDisconnect = function () {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  };\n\n  Object.defineProperty(Reference.prototype, \"database\", {\n    get: function get() {\n      return this.databaseProp();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"key\", {\n    get: function get() {\n      return this.getKey();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function get() {\n      return this.getParent();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    get: function get() {\n      return this.getRoot();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Reference;\n}(Query);\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\n\n\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Node in a Tree.\r\n */\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode() {\n    // TODO: Consider making accessors that create children and value lazily or\n    // separate Internal / Leaf 'types'.\n    this.children = {};\n    this.childCount = 0;\n    this.value = null;\n  }\n\n  return TreeNode;\n}();\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\n\n\nvar Tree =\n/** @class */\nfunction () {\n  /**\r\n   * @template T\r\n   * @param {string=} name_ Optional name of the node.\r\n   * @param {Tree=} parent_ Optional parent node.\r\n   * @param {TreeNode=} node_ Optional node to wrap.\r\n   */\n  function Tree(name_, parent_, node_) {\n    if (name_ === void 0) {\n      name_ = '';\n    }\n\n    if (parent_ === void 0) {\n      parent_ = null;\n    }\n\n    if (node_ === void 0) {\n      node_ = new TreeNode();\n    }\n\n    this.name_ = name_;\n    this.parent_ = parent_;\n    this.node_ = node_;\n  }\n  /**\r\n   * Returns a sub-Tree for the given path.\r\n   *\r\n   * @param {!(string|Path)} pathObj Path to look up.\r\n   * @return {!Tree.<T>} Tree for path.\r\n   */\n\n\n  Tree.prototype.subTree = function (pathObj) {\n    // TODO: Require pathObj to be Path?\n    var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    var child = this,\n        next;\n\n    while ((next = path.getFront()) !== null) {\n      var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n    }\n\n    return child;\n  };\n  /**\r\n   * Returns the data associated with this tree node.\r\n   *\r\n   * @return {?T} The data or null if no data exists.\r\n   */\n\n\n  Tree.prototype.getValue = function () {\n    return this.node_.value;\n  };\n  /**\r\n   * Sets data to this tree node.\r\n   *\r\n   * @param {!T} value Value to set.\r\n   */\n\n\n  Tree.prototype.setValue = function (value) {\n    util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  };\n  /**\r\n   * Clears the contents of the tree node (its value and all children).\r\n   */\n\n\n  Tree.prototype.clear = function () {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  };\n  /**\r\n   * @return {boolean} Whether the tree has any children.\r\n   */\n\n\n  Tree.prototype.hasChildren = function () {\n    return this.node_.childCount > 0;\n  };\n  /**\r\n   * @return {boolean} Whether the tree is empty (no value or children).\r\n   */\n\n\n  Tree.prototype.isEmpty = function () {\n    return this.getValue() === null && !this.hasChildren();\n  };\n  /**\r\n   * Calls action for each child of this tree node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n\n\n  Tree.prototype.forEachChild = function (action) {\n    var _this = this;\n\n    util.forEach(this.node_.children, function (child, childTree) {\n      action(new Tree(child, _this, childTree));\n    });\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n   *   false.\r\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n   *   parent.\r\n   */\n\n\n  Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) action(this);\n    this.forEachChild(function (child) {\n      child.forEachDescendant(action,\n      /*includeSelf=*/\n      true, childrenFirst);\n    });\n    if (includeSelf && childrenFirst) action(this);\n  };\n  /**\r\n   * Calls action on each ancestor node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n   *   true to abort.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n   * @return {boolean} true if the action callback returned true.\r\n   */\n\n\n  Tree.prototype.forEachAncestor = function (action, includeSelf) {\n    var node = includeSelf ? this : this.parent();\n\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n\n      node = node.parent();\n    }\n\n    return false;\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n   * is found, action is called on it and traversal does not continue inside the node.\r\n   * Action is *not* called on this node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n\n\n  Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n    this.forEachChild(function (child) {\n      if (child.getValue() !== null) action(child);else child.forEachImmediateDescendantWithValue(action);\n    });\n  };\n  /**\r\n   * @return {!Path} The path of this tree node, as a Path.\r\n   */\n\n\n  Tree.prototype.path = function () {\n    return new Path(this.parent_ === null ? this.name_ : this.parent_.path() + '/' + this.name_);\n  };\n  /**\r\n   * @return {string} The name of the tree node.\r\n   */\n\n\n  Tree.prototype.name = function () {\n    return this.name_;\n  };\n  /**\r\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n   */\n\n\n  Tree.prototype.parent = function () {\n    return this.parent_;\n  };\n  /**\r\n   * Adds or removes this child from its parent based on whether it's empty or not.\r\n   *\r\n   * @private\r\n   */\n\n\n  Tree.prototype.updateParents_ = function () {\n    if (this.parent_ !== null) this.parent_.updateChild_(this.name_, this);\n  };\n  /**\r\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n   *\r\n   * @param {string} childName The name of the child to update.\r\n   * @param {!Tree.<T>} child The child to update.\r\n   * @private\r\n   */\n\n\n  Tree.prototype.updateChild_ = function (childName, child) {\n    var childEmpty = child.isEmpty();\n    var childExists = util.contains(this.node_.children, childName);\n\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  };\n\n  return Tree;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\r\n * @enum {number}\r\n */\n\n\nvar TransactionStatus;\n\n(function (TransactionStatus) {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\"; // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n\n  TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\"; // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n\n  TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\"; // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n\n  TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\"; // Temporary state used to mark transactions that need to be aborted.\n\n  TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\n})(TransactionStatus || (TransactionStatus = {}));\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\n\n\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\n\nRepo.prototype.transactions_init_ = function () {\n  /**\r\n   * Stores queues of outstanding transactions for Firebase locations.\r\n   *\r\n   * @type {!Tree.<Array.<!Transaction>>}\r\n   * @private\r\n   */\n  this.transactionQueueTree_ = new Tree();\n};\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\n\n\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\n  this.log_('transaction on ' + path); // Add a watch to make sure we get server updates.\n\n  var valueCallback = function valueCallback() {};\n\n  var watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n\n  var unwatcher = function unwatcher() {\n    watchRef.off('value', valueCallback);\n  }; // Initialize transaction.\n\n\n  var transaction = {\n    path: path,\n    update: transactionUpdate,\n    onComplete: onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher: unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  }; // Run transaction initially.\n\n  var currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  var newVal = transaction.update(currentState.val());\n\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.\n\n    transaction.status = TransactionStatus.RUN;\n    var queueNode = this.transactionQueueTree_.subTree(path);\n    var nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n    queueNode.setValue(nodeQueue); // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n\n    var priorityForNode = void 0;\n\n    if (typeof newVal === 'object' && newVal !== null && util.contains(newVal, '.priority')) {\n      priorityForNode = util.safeGet(newVal, '.priority');\n      util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    priorityForNode\n    /** @type {null|number|string} */\n    = priorityForNode;\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    this.sendReadyTransactions_();\n  }\n};\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\n\n\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\n  return this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) || ChildrenNode.EMPTY_NODE;\n};\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\n\n\nRepo.prototype.sendReadyTransactions_ = function (node) {\n  var _this = this;\n\n  if (node === void 0) {\n    node = this.transactionQueueTree_;\n  } // Before recursing, make sure any completed transactions are removed.\n\n\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    var queue = this.buildTransactionQueue_(node);\n    util.assert(queue.length > 0, 'Sending zero length transaction queue');\n    var allRun = queue.every(function (transaction) {\n      return transaction.status === TransactionStatus.RUN;\n    }); // If they're all run (and not sent), we can send them.  Else, we must wait.\n\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(function (childNode) {\n      _this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\n\n\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\n  var _this = this; // Mark transactions as sent and increment retry count!\n\n\n  var setsToIgnore = queue.map(function (txn) {\n    return txn.currentWriteId;\n  });\n  var latestState = this.getLatestState_(path, setsToIgnore);\n  var snapToSend = latestState;\n  var latestHash = latestState.hash();\n\n  for (var i = 0; i < queue.length; i++) {\n    var txn = queue[i];\n    util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    var relativePath = Path.relativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.\n\n    snapToSend = snapToSend.updateChild(relativePath\n    /**@type {!Node} */\n    , txn.currentOutputSnapshotRaw);\n  }\n\n  var dataToSend = snapToSend.val(true);\n  var pathToSend = path; // Send the put.\n\n  this.server_.put(pathToSend.toString(), dataToSend, function (status) {\n    _this.log_('transaction put response', {\n      path: pathToSend.toString(),\n      status: status\n    });\n\n    var events = [];\n\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n      // the callback could trigger more transactions or sets.\n      var callbacks = [];\n\n      for (var i = 0; i < queue.length; i++) {\n        queue[i].status = TransactionStatus.COMPLETED;\n        events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\n\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this transaction is complete, it should be set\n          var node = queue[i].currentOutputSnapshotResolved;\n          var ref = new Reference(_this, queue[i].path);\n          var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\n        }\n\n        queue[i].unwatcher();\n      } // Now remove the completed transactions.\n\n\n      _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path)); // There may be pending transactions that we can now send.\n\n\n      _this.sendReadyTransactions_();\n\n      _this.eventQueue_.raiseEventsForChangedPath(path, events); // Finally, trigger onComplete callbacks.\n\n\n      for (var i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (var i = 0; i < queue.length; i++) {\n          if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) queue[i].status = TransactionStatus.NEEDS_ABORT;else queue[i].status = TransactionStatus.RUN;\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n\n        for (var i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.NEEDS_ABORT;\n          queue[i].abortReason = status;\n        }\n      }\n\n      _this.rerunTransactions_(path);\n    }\n  }, latestHash);\n};\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\n\n\nRepo.prototype.rerunTransactions_ = function (changedPath) {\n  var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  var path = rootMostTransactionNode.path();\n  var queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n  return path;\n};\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\n\n\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  } // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n\n\n  var callbacks = [];\n  var events = []; // Ignore all of the sets we're going to re-run.\n\n  var txnsToRerun = queue.filter(function (q) {\n    return q.status === TransactionStatus.RUN;\n  });\n  var setsToIgnore = txnsToRerun.map(function (q) {\n    return q.currentWriteId;\n  });\n\n  for (var i = 0; i < queue.length; i++) {\n    var transaction = queue[i];\n    var relativePath = Path.relativePath(path, transaction.path);\n    var abortTransaction = false,\n        abortReason = void 0;\n    util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        var newData = queue[i].update(currentNode.val());\n\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          var newDataNode = nodeFromJSON$1(newData);\n          var hasExplicitPriority = typeof newData === 'object' && newData != null && util.contains(newData, '.priority');\n\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          var oldWriteId = transaction.currentWriteId;\n          var serverValues = this.generateServerValues();\n          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_(); // Mutates setsToIgnore in place\n\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n        }\n      }\n    }\n\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED; // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          var ref = new Reference(this, queue[i].path); // We set this field immediately, so it's safe to cast to an actual snapshot\n\n          var lastInput\n          /** @type {!Node} */\n          = queue[i].currentInputSnapshot;\n          var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\n        }\n      }\n    }\n  } // Clean up completed transactions.\n\n\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.\n\n  for (var i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  } // Try to send the transaction result to the server.\n\n\n  this.sendReadyTransactions_();\n};\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\n\n\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\n  var front; // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n\n  var transactionNode = this.transactionQueueTree_;\n\n  while ((front = path.getFront()) !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n  }\n\n  return transactionNode;\n};\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\n\n\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  var transactionQueue = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue); // Sort them by the order the transactions were created.\n\n  transactionQueue.sort(function (a, b) {\n    return a.order - b.order;\n  });\n  return transactionQueue;\n};\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\n\n\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\n  var _this = this;\n\n  var nodeQueue = node.getValue();\n\n  if (nodeQueue !== null) {\n    for (var i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(function (child) {\n    _this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\n\n\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\n  var _this = this;\n\n  var queue = node.getValue();\n\n  if (queue) {\n    var to = 0;\n\n    for (var from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(function (childNode) {\n    _this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\n\n\nRepo.prototype.abortTransactions_ = function (path) {\n  var _this = this;\n\n  var affectedPath = this.getAncestorTransactionNode_(path).path();\n  var transactionNode = this.transactionQueueTree_.subTree(path);\n  transactionNode.forEachAncestor(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  this.abortTransactionsOnNode_(transactionNode);\n  transactionNode.forEachDescendant(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  return affectedPath;\n};\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\n\n\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\n  var queue = node.getValue();\n\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    var callbacks = []; // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n\n    var events = [];\n    var lastSent = -1;\n\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {// Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i; // Mark transaction for abort when it comes back.\n\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort'); // We can abort it immediately.\n\n        queue[i].unwatcher();\n        events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\n\n        if (queue[i].onComplete) {\n          var snapshot = null;\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\n        }\n      }\n    }\n\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    } // Now fire the callbacks.\n\n\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n\n    for (var i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** @const {string} */\n\n\nvar DATABASE_URL_OPTION = 'databaseURL';\n\nvar _staticInstance;\n/**\r\n * Creates and caches Repo instances.\r\n */\n\n\nvar RepoManager =\n/** @class */\nfunction () {\n  function RepoManager() {\n    /**\r\n     * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n     */\n    this.repos_ = {};\n    /**\r\n     * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n     * @private {boolean}\r\n     */\n\n    this.useRestClient_ = false;\n  }\n\n  RepoManager.getInstance = function () {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n\n    return _staticInstance;\n  }; // TODO(koss): Remove these functions unless used in tests?\n\n\n  RepoManager.prototype.interrupt = function () {\n    for (var appName in this.repos_) {\n      for (var dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  };\n\n  RepoManager.prototype.resume = function () {\n    for (var appName in this.repos_) {\n      for (var dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  };\n  /**\r\n   * This function should only ever be called to CREATE a new database instance.\r\n   *\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Database}\r\n   */\n\n\n  RepoManager.prototype.databaseFromApp = function (app, url) {\n    var dbUrl = url || app.options[DATABASE_URL_OPTION];\n\n    if (dbUrl === undefined) {\n      fatal(\"Can't determine Firebase Database URL.  Be sure to include \" + DATABASE_URL_OPTION + ' option when calling firebase.initializeApp().');\n    }\n\n    var parsedUrl = parseRepoInfo(dbUrl);\n    var repoInfo = parsedUrl.repoInfo;\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n\n    if (!parsedUrl.path.isEmpty()) {\n      fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n    }\n\n    var repo = this.createRepo(repoInfo, app);\n    return repo.database;\n  };\n  /**\r\n   * Remove the repo and make sure it is disconnected.\r\n   *\r\n   * @param {!Repo} repo\r\n   */\n\n\n  RepoManager.prototype.deleteRepo = function (repo) {\n    var appRepos = util.safeGet(this.repos_, repo.app.name); // This should never happen...\n\n    if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n    }\n\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  };\n  /**\r\n   * Ensures a repo doesn't already exist and then creates one using the\r\n   * provided app.\r\n   *\r\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Repo} The Repo object for the specified server / repoName.\r\n   */\n\n\n  RepoManager.prototype.createRepo = function (repoInfo, app) {\n    var appRepos = util.safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    var repo = util.safeGet(appRepos, repoInfo.toURLString());\n\n    if (repo) {\n      fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n  };\n  /**\r\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n   * @param {boolean} forceRestClient\r\n   */\n\n\n  RepoManager.prototype.forceRestClient = function (forceRestClient) {\n    this.useRestClient_ = forceRestClient;\n  };\n\n  return RepoManager;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   * @param {!Repo} repo_\r\n   */\n  function Database(repo_) {\n    this.repo_ = repo_;\n\n    if (!(repo_ instanceof Repo)) {\n      fatal(\"Don't call new Database() directly - please use firebase.database().\");\n    }\n    /** @type {Reference} */\n\n\n    this.root_ = new Reference(repo_, Path.Empty);\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  Object.defineProperty(Database.prototype, \"app\", {\n    get: function get() {\n      return this.repo_.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Database.prototype.ref = function (path) {\n    this.checkDeleted_('ref');\n    util.validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  };\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @param {string} url\r\n   * @return {!Reference} Firebase reference.\r\n   */\n\n\n  Database.prototype.refFromURL = function (url) {\n    /** @const {string} */\n    var apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    util.validateArgCount(apiName, 1, 1, arguments.length);\n    var parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n    var repoInfo = parsedURL.repoInfo;\n\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');\n    }\n\n    return this.ref(parsedURL.path.toString());\n  };\n  /**\r\n   * @param {string} apiName\r\n   */\n\n\n  Database.prototype.checkDeleted_ = function (apiName) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }; // Make individual repo go offline.\n\n\n  Database.prototype.goOffline = function () {\n    util.validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  };\n\n  Database.prototype.goOnline = function () {\n    util.validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  };\n\n  Database.ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n  return Database;\n}();\n\nvar DatabaseInternals =\n/** @class */\nfunction () {\n  /** @param {!Database} database */\n  function DatabaseInternals(database) {\n    this.database = database;\n  }\n  /** @return {Promise<void>} */\n\n\n  DatabaseInternals.prototype.delete = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        this.database.checkDeleted_('delete');\n        RepoManager.getInstance().deleteRepo(this.database.repo_);\n        this.database.repo_ = null;\n        this.database.root_ = null;\n        this.database.INTERNAL = null;\n        this.database = null;\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return DatabaseInternals;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\n\n\nvar forceLongPolling = function forceLongPolling() {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nvar forceWebSockets = function forceWebSockets() {\n  BrowserPollConnection.forceDisallow();\n};\n/* Used by App Manager */\n\n\nvar isWebSocketsAvailable = function isWebSocketsAvailable() {\n  return WebSocketConnection['isAvailable']();\n};\n\nvar setSecurityDebugCallback = function setSecurityDebugCallback(ref, callback) {\n  ref.repo.persistentConnection_.securityDebugCallback_ = callback;\n};\n\nvar stats = function stats(ref, showDelta) {\n  ref.repo.stats(showDelta);\n};\n\nvar statsIncrementCounter = function statsIncrementCounter(ref, metric) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nvar dataUpdateCount = function dataUpdateCount(ref) {\n  return ref.repo.dataUpdateCount;\n};\n\nvar interceptServerData = function interceptServerData(ref, callback) {\n  return ref.repo.interceptServerData_(callback);\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar DataConnection = PersistentConnection;\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\n\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\n\n\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n}; // RealTimeConnection properties that we use in tests.\n\n\nvar RealTimeConnection = Connection;\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\n\nvar hijackHash = function hijackHash(newHash) {\n  var oldPut = PersistentConnection.prototype.put;\n\n  PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\n    if (opt_hash !== undefined) {\n      opt_hash = newHash();\n    }\n\n    oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\n  };\n\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\n\n\nvar ConnectionTarget = RepoInfo;\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\n\nvar queryIdentifier = function queryIdentifier(query) {\n  return query.queryIdentifier();\n};\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\n\n\nvar listens = function listens(firebaseRef) {\n  return firebaseRef.repo.persistentConnection_.listens_;\n};\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\n\n\nvar forceRestClient = function forceRestClient(_forceRestClient) {\n  RepoManager.getInstance().forceRestClient(_forceRestClient);\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  listens: listens,\n  forceRestClient: forceRestClient\n});\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ServerValue = Database.ServerValue;\n\nfunction registerDatabase(instance) {\n  // Register the Database Service with the 'firebase' namespace.\n  var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) {\n    return RepoManager.getInstance().databaseFromApp(app, url);\n  }, // firebase.database namespace properties\n  {\n    Reference: Reference,\n    Query: Query,\n    Database: Database,\n    enableLogging: enableLogging,\n    INTERNAL: INTERNAL,\n    ServerValue: ServerValue,\n    TEST_ACCESS: TEST_ACCESS\n  }, null, true);\n\n  if (util.isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\nexports.registerDatabase = registerDatabase;\nexports.Database = Database;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.enableLogging = enableLogging;\nexports.ServerValue = ServerValue;\nexports.DataSnapshot = DataSnapshot;\nexports.OnDisconnect = OnDisconnect;","map":{"version":3,"sources":["C:/Users/junecsnp/Desktop/JuneWeb+Shoe/node_modules/@firebase/database/dist/index.cjs.js"],"names":["Object","defineProperty","exports","value","_interopDefault","ex","util","require","logger","tslib_1","firebase","DOMStorageWrapper","domStorage_","prefix_","prototype","set","key","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","var_args","_i","arguments","length","message","i","Array","isArray","apply","logger$1","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","concat","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","forEach","val","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","bits","Infinity","abs","pow","min","LN2","round","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","path","toUpperCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","enumerable","configurable","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","String","slice","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","j","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","pop","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN","LAST_SESSION_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","persistenceKey","domain","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","decodePath","pathStringDecoded","piece","decodeURIComponent","replace","decodeQuery","queryString","results","startsWith","_a","segment","kv","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","scheme","repoInfo","port","colonInd","slashInd","questionMarkInd","queryParams","parts","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefix","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","validateBoolean","bool","OnDisconnect","repo_","cancel","onComplete","validateArgCount","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","random","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","_super","__extends","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","MAX_NODE","setMaxNode","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat","getValue","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","nodeFromJSON","MAX_NODE$1","setNodeFromJSON","setMaxNode$1","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","clone","newIndexes","addToIndexes","_this","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","call","defineProperties","MAX","USE_HINZE","nodeFromJSON$1","json","jsonLeaf","children_1","childrenHavePriority_1","hinzeJsonObj_1","childSet","sortedChildSet","node_1","jsonObj_1","childData","ValueIndex","valueNode","VALUE_INDEX","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","childrenNode","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherCount","getCount","thisCount","otherKey","getAnyKey","thisKey","every","cb","__referenceConstructor","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","startName","getIndexStartName","endName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","on","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","off","validateContextObject","valueCallback","removeEventCallbackForQuery","once","userCallback","cancelOrContext","firstCall","catch","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","error$$1","sameRepo","samePath","sameQueryIdentifier","CountedSet","add","item","clear","SparseSnapshotTree","find","childKey","remember","forget","self_1","tree","safeToRemove","forEachTree","prefixPath","func","generateWithValues","values","Date","getTime","resolveDeferredValue","serverValues","resolveDeferredValueTree","resolvedTree","resolveDeferredValueSnapshot","rawPri","leafNode","OperationType","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","children","subtree","Empty","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap_","oldChange","oldType","getChanges","getValues","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","newViewCache","filterServerNode","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","ackUserWrite_","revertUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","remaining","existing","generateEventsForChanges_","getInitialEvents","initialChanges","eventNode","__referenceConstructor$1","SyncPoint","views_","optCompleteServerCache","view","events_1","serverCacheComplete","eventCacheComplete","removed","hadCompleteView","hasCompleteView","viewQueryId","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","completeView","findValue","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","newWriteTree","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","write","mergeAtPath","layerTree_","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","findKey","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap_","queryToTagMap_","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","needToReevaluate","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","op","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","defaultTag","stopListening","queryToRemove","tagToRemove","removeTags_","includeHiddenSets","maybeChildSyncPoint","childMap","views_1","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","getToken","forceRefresh","then","Promise","addTokenChangeListener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","options","StatsCollection","counters_","incrementCounter","amount","deepCopy","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","delta","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","visible_","getInstance","OnlineMonitor","online_","isMobileCordova","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","state_1","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","theURL","nodeRestRequest","newRequest_","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","CONSTANTS","NODE_ADMIN","headers","SDK_VERSION","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports_1","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_AUTH_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens_","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","p","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","token_1","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","sendRequestFn","accessToken","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","console","clientName","NODE_CLIENT","isReactNative","ReadonlyRestClient","getListenId_","listenId","thisListen","queryStringParamaters","toRestQueryStringParameters","restRequest_","status_1","queryStringParameters","authTokenData","authToken","querystring","xhr","XMLHttpRequest","responseText","INTERRUPT_REASON","Repo","forceRestClient","app","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactions_init_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offsetNode","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","showDelta","longestName","reduce","previousValue","currentValue","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","oldChildSnap","compareNext","remainsInWindow","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","promiseComplete","startTransaction","setPriority","thennablePushRef","pushRef","TreeNode","childCount","Tree","name_","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","TransactionStatus","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","watchRef","unwatcher","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","currentNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","allRun","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","abortTransactionsOnNode_","lastSent","DATABASE_URL_OPTION","_staticInstance","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP","delete","__awaiter","__generator","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","freeze","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","hijackHash","newHash","oldPut","opt_onComplete","opt_hash","ConnectionTarget","listens","firebaseRef","TEST_ACCESS","registerDatabase","instance","registerService","unused","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar util = require('@firebase/util');\nvar logger = require('@firebase/logger');\nvar tslib_1 = require('tslib');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < var_args.length; i++) {\r\n        if (Array.isArray(var_args[i]) ||\r\n            (var_args[i] &&\r\n                typeof var_args[i] === 'object' &&\r\n                typeof var_args[i].length === 'number')) {\r\n            message += buildLogMessage_.apply(null, var_args[i]);\r\n        }\r\n        else if (typeof var_args[i] === 'object') {\r\n            message += util.stringify(var_args[i]);\r\n        }\r\n        else {\r\n            message += var_args[i];\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger$1 = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || (logger_ === true || logger_ === false), \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger.LogLevel.VERBOSE;\r\n        logger$1 = logClient.log.bind(logClient);\r\n        if (persistent)\r\n            SessionStorage.set('logging_enabled', true);\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger$1 = logger_;\r\n    }\r\n    else {\r\n        logger$1 = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\r\nvar log = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger$1 === null && SessionStorage.get('logging_enabled') === true)\r\n            enableLogging(true);\r\n    }\r\n    if (logger$1) {\r\n        var message = buildLogMessage_.apply(null, var_args);\r\n        logger$1(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar error = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar fatal = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n */\r\nvar warn = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data != data || // NaN\r\n            data == Number.POSITIVE_INFINITY ||\r\n            data == Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete')\r\n                    wrappedFn_1();\r\n            });\r\n            // fallback to onload.\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null)\r\n        return util.stringify(obj);\r\n    var keys = [];\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0)\r\n            key += ',';\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\r\nvar each = function (obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var i = 0; i < obj.length; ++i) {\r\n            fn(i, obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        /**\r\n         * in the conversion of code we removed the goog.object.forEach\r\n         * function which did a value,key callback. We standardized on\r\n         * a single impl that does a key, value callback. So we invert\r\n         * to not have to touch the `each` code points\r\n         */\r\n        util.forEach(obj, function (key, val) { return fn(val, key); });\r\n    }\r\n};\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1)\r\n            hexByte = '0' + hexByte;\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code == 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code == 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length)\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + this.pieces_[i];\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0)\r\n                    pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0)\r\n                return cmp;\r\n        }\r\n        if (leftKeys.length === rightKeys.length)\r\n            return 0;\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length == 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost = PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return this.host !== this.internalHost || this.isCustomHost();\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        util.forEach(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var results = {};\r\n    if (queryString.startsWith('?')) {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\r\n        var segment = _a[_i];\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        var kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\r\nvar parseRepoInfo = function (dataURL) {\r\n    var parsedUrl = parseURL(dataURL), namespace = parsedUrl.subdomain;\r\n    if (parsedUrl.domain === 'firebase') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace == 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\r\nvar parseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = dataURL.length;\r\n        }\r\n        var parts = host.split('.');\r\n        if (parts.length === 3) {\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            domain = parts[1];\r\n            subdomain = parts[0].toLowerCase();\r\n        }\r\n        else if (parts.length === 2) {\r\n            domain = parts[0];\r\n        }\r\n        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        // Support `ns` query param if subdomain not already set\r\n        if (subdomain === '' && 'ns' in queryParams) {\r\n            subdomain = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString\r\n    };\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority && typeof priority === 'object' && util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false, hasActualChild_1 = false;\r\n        util.forEach(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) {\r\n                // .priority is OK\r\n            }\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    util.forEach(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined)\r\n        return;\r\n    if (isInvalidJSONNumber(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined)\r\n        return;\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined)\r\n        return;\r\n    if (!isValidKey(key))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined)\r\n        return;\r\n    if (!isValidPathString(pathString))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined)\r\n        return;\r\n    if (typeof bool !== 'boolean')\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number')\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    else\r\n        return 'string:' + priority;\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty())\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        else\r\n            return this.getValue();\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty())\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_)\r\n                cmp *= -1;\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_)\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        else\r\n            result = { key: node.key, value: node.value };\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var cmp, n;\r\n        n = this;\r\n        cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_())\r\n            n = n.moveRedLeft_();\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_())\r\n                n = n.rotateRight_();\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_())\r\n            n = n.rotateLeft_();\r\n        if (n.left.isRed_() && n.left.left.isRed_())\r\n            n = n.rotateRight_();\r\n        if (n.left.isRed_() && n.right.isRed_())\r\n            n = n.colorFlip_();\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        var blackDepth;\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty())\r\n                        node = node.right;\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length == 0) {\r\n            return null;\r\n        }\r\n        else if (length == 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         * @type {!IndexMap}\r\n         * @const\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @param {!string} indexKey\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap)\r\n            throw new Error('No index defined for ' + indexKey);\r\n        if (sortedMap === fallbackObject) {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n        else {\r\n            return sortedMap;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {boolean}\r\n     */\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = util.clone(this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = util.clone(this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name != namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null)\r\n            return this;\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty())\r\n            return null;\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            for (var key in obj)\r\n                array[key] = obj[key];\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty())\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '')\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj_1 = json;\r\n        util.forEach(hinzeJsonObj_1, function (key, child) {\r\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length == 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        var jsonObj_1 = json;\r\n        util.forEach(jsonObj_1, function (key, childData) {\r\n            if (util.contains(jsonObj_1, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty())\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        else\r\n            return !this.node_.isEmpty();\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ (change.childName));\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherCount = util.getCount(other.callbacks_);\r\n                var thisCount = util.getCount(this.callbacks_);\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    //  If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey /** @type {!string} */ = util.getAnyKey(other.callbacks_);\r\n                        var thisKey /** @type {!string} */ = util.getAnyKey(this.callbacks_);\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return util.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName != MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName != MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param cancelOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel)\r\n                ret.cancel.bind(ret.context)(err);\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error$$1 = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error$$1);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\r\nvar CountedSet = /** @class */ (function () {\r\n    function CountedSet() {\r\n        this.set = {};\r\n    }\r\n    /**\r\n     * @param {!K} item\r\n     * @param {V} val\r\n     */\r\n    CountedSet.prototype.add = function (item, val) {\r\n        this.set[item] = val !== null ? val : true;\r\n    };\r\n    /**\r\n     * @param {!K} key\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.contains = function (key) {\r\n        return util.contains(this.set, key);\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     * @return {V}\r\n     */\r\n    CountedSet.prototype.get = function (item) {\r\n        return this.contains(item) ? this.set[item] : undefined;\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     */\r\n    CountedSet.prototype.remove = function (item) {\r\n        delete this.set[item];\r\n    };\r\n    /**\r\n     * Deletes everything in the set\r\n     */\r\n    CountedSet.prototype.clear = function () {\r\n        this.set = {};\r\n    };\r\n    /**\r\n     * True if there's nothing in the set\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.set);\r\n    };\r\n    /**\r\n     * @return {number} The number of items in the set\r\n     */\r\n    CountedSet.prototype.count = function () {\r\n        return util.getCount(this.set);\r\n    };\r\n    /**\r\n     * Run a function on each k,v pair in the set\r\n     * @param {function(K, V)} fn\r\n     */\r\n    CountedSet.prototype.each = function (fn) {\r\n        util.forEach(this.set, function (k, v) { return fn(k, v); });\r\n    };\r\n    /**\r\n     * Mostly for debugging\r\n     * @return {Array.<K>} The keys present in this CountedSet\r\n     */\r\n    CountedSet.prototype.keys = function () {\r\n        var keys = [];\r\n        util.forEach(this.set, function (k) {\r\n            keys.push(k);\r\n        });\r\n        return keys;\r\n    };\r\n    return CountedSet;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.value_ = null;\r\n        /**\r\n         * @private\r\n         * @type {CountedSet}\r\n         */\r\n        this.children_ = null;\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {?Node} The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value_ != null) {\r\n            return this.value_.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children_ != null) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children_.contains(childKey)) {\r\n                var childTree = this.children_.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @param {!Node} data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = data;\r\n            this.children_ = null;\r\n        }\r\n        else if (this.value_ !== null) {\r\n            this.value_ = this.value_.updateChild(path, data);\r\n        }\r\n        else {\r\n            if (this.children_ == null) {\r\n                this.children_ = new CountedSet();\r\n            }\r\n            var childKey = path.getFront();\r\n            if (!this.children_.contains(childKey)) {\r\n                this.children_.add(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children_.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {boolean} True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = null;\r\n            this.children_ = null;\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value_ !== null) {\r\n                if (this.value_.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value_;\r\n                    this.value_ = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children_ !== null) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children_.contains(childKey)) {\r\n                    var safeToRemove = this.children_.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children_.remove(childKey);\r\n                    }\r\n                }\r\n                if (this.children_.isEmpty()) {\r\n                    this.children_ = null;\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param {!Path} prefixPath Path to look up node for.\r\n     * @param {!Function} func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value_ !== null) {\r\n            func(prefixPath, this.value_);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param {!Function} func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        if (this.children_ !== null) {\r\n            this.children_.each(function (key, tree) {\r\n                func(key, tree);\r\n            });\r\n        }\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredValue = function (value, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    else {\r\n        util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n        return serverValues[value['.sv']];\r\n    }\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (tree, serverValues) {\r\n    var resolvedTree = new SparseSnapshotTree();\r\n    tree.forEachTree(new Path(''), function (path, node) {\r\n        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\r\n    });\r\n    return resolvedTree;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredValue(rawPri, serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredValue(leafNode.getValue(), serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ affectedTree, \r\n    /**@inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        util.forEach(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /**@inheritDoc */ source, \r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap_ = {};\r\n    }\r\n    /**\r\n     * @param {!Change} change\r\n     */\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey /** @type {!string} */ = change.childName;\r\n        util.assert(type == Change.CHILD_ADDED ||\r\n            type == Change.CHILD_CHANGED ||\r\n            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = util.safeGet(this.changeMap_, childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                delete this.changeMap_[childKey];\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap_[childKey] = change;\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return util.getValues(this.changeMap_);\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache\r\n            .getEventCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap\r\n                        .getNode()\r\n                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\r\n                !eventSnap\r\n                    .getNode()\r\n                    .getPriority()\r\n                    .equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey == '.priority') {\r\n                    util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey == '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache\r\n                    .getEventCache()\r\n                    .getNode()\r\n                    .hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         *\r\n         * @type {!Object.<!string, !View>}\r\n         * @private\r\n         */\r\n        this.views_ = {};\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.views_);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} optCompleteServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = util.safeGet(this.views_, queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events_1 = [];\r\n            util.forEach(this.views_, function (key, view) {\r\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n            });\r\n            return events_1;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = util.safeGet(this.views_, queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ (serverCache), serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views_[queryId] = view;\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            // When you do ref.off(...), we search all views for the registration to remove.\r\n            var self_1 = this;\r\n            util.forEach(this.views_, function (viewQueryId, view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete self_1.views_[viewQueryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = util.safeGet(this.views_, queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete this.views_[queryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    /**\r\n     * @return {!Array.<!View>}\r\n     */\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var _this = this;\r\n        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });\r\n        return values.filter(function (view) {\r\n            return !view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path The path to the desired complete snapshot\r\n     * @return {?Node} A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var serverCache = null;\r\n        util.forEach(this.views_, function (key, view) {\r\n            serverCache = serverCache || view.getCompleteServerCache(path);\r\n        });\r\n        return serverCache;\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return util.safeGet(this.views_, queryId);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    /**\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var completeView = util.findValue(this.views_, function (view) {\r\n            return view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n        return completeView || null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Node} node\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} updates\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        util.forEach(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param {!Path} path The path to check for\r\n     * @return {boolean} Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param {!Path} path The path to get a complete write\r\n     * @return {?Node} The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return {!Array.<NamedNode>} A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return {boolean} Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param {!Node} node The node to apply this CompoundWrite to\r\n     * @return {!Node} The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\r\n    };\r\n    /**\r\n     * @type {!CompoundWrite}\r\n     */\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @param {!ImmutableTree.<!Node>} writeTree\r\n     * @param {!Node} node\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\r\n        if (writeTree.value != null) {\r\n            // Since there a write is always a leaf, we're done here\r\n            return node.updateChild(relativePath, writeTree.value);\r\n        }\r\n        else {\r\n            var priorityWrite_1 = null;\r\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n                if (childKey === '.priority') {\r\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                    // to apply priorities to empty nodes that are later filled\r\n                    util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                    priorityWrite_1 = childTree.value;\r\n                }\r\n                else {\r\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\r\n                }\r\n            });\r\n            // If there was a priority write, we only apply it if the node is not empty\r\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n            }\r\n            return node;\r\n        }\r\n    };\r\n    return CompoundWrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                util.forEach(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * @param {!WriteRecord} writeRecord\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            // findKey can return undefined, so use !! to coerce to boolean\r\n            return !!util.findKey(writeRecord.children, function (childSnap, childName) {\r\n                return writeRecord.path.child(childName).contains(path);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     * @private\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     *\r\n     * @param {!WriteRecord} write\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     *\r\n     * @param {!Array.<!WriteRecord>} writes\r\n     * @param {!function(!WriteRecord):boolean} filter\r\n     * @param {!Path} treeRoot\r\n     * @return {!CompoundWrite}\r\n     * @private\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         * @type {!ImmutableTree.<!SyncPoint>}\r\n         * @private\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         * @type {!WriteTree}\r\n         * @private\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap_ = {};\r\n        this.queryToTagMap_ = {};\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @param {number} writeId\r\n     * @param {boolean=} visible\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param {!number} writeId\r\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                util.forEach(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap_[queryKey] = tag;\r\n            // Coerce to string to avoid sparse arrays.\r\n            this.tagToQueryMap_['_' + tag] = queryKey;\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                else {\r\n                    // There's nothing below us, so nothing we need to start listening on\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        else {\r\n            // No-op, this listener must've been already removed\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n     * it, but as this is only used by transaction code, that should always be the case anyways.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     * @param {!Path} path The path to the data we want\r\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n     * @return {?Node}\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     *\r\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n     * @return {!Array.<!View>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                util.forEach(childMap, function (key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Array.<!Query>} queries\r\n     * @private\r\n     */\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\r\n                delete this.queryToTagMap_[removedQueryKey];\r\n                delete this.tagToQueryMap_['_' + removedQueryTag];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     * @param {!Query} query\r\n     * @return {!Query} The normalized query\r\n     * @private\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return /** @type {!Query} */ query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!View} view\r\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n     * @private\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    util.forEach(childMap, function (key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!View} view\r\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error$$1 = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error$$1);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     * @private\r\n     * @param {!Query} query\r\n     * @return {string}\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     * @private\r\n     * @param {!string} queryKey\r\n     * @return {{queryId: !string, path: !Path}}\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     * @param {!number} tag\r\n     * @return {?string}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap_['_' + tag];\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     * @param {!Query} query\r\n     * @return {?number}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return util.safeGet(this.queryToTagMap_, queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     *\r\n     * @param {!Path} queryPath\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar AuthTokenProvider = /** @class */ (function () {\r\n    /**\r\n     * @param {!FirebaseApp} app_\r\n     */\r\n    function AuthTokenProvider(app_) {\r\n        this.app_ = app_;\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \r\n        // .catch\r\n        function (error$$1) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error$$1 && error$$1.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error$$1);\r\n            }\r\n        });\r\n    };\r\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return AuthTokenProvider;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name))\r\n            this.counters_[name] = 0;\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = util.clone(newStats);\r\n        if (this.last_) {\r\n            util.forEach(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        util.forEach(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger$1) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} var_args\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var var_args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            var_args[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = this.listeners_[eventType].slice();\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, var_args);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId An identifier for this connection, used for logging\r\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_)\r\n                return;\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var command = args[0], arg1 = args[1], arg2 = args[2];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder)\r\n                    return; // we closed the connection.\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command == FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var pN = args[0], data = args[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (!util.isNodeSdk() &&\r\n                typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n        return (BrowserPollConnection.forceAllow_ ||\r\n            (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp() &&\r\n                !util.isNodeSdk()));\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk())\r\n            return;\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        /**\r\n         * @type {CountedSet.<number, number>}\r\n         */\r\n        this.outstandingRequests = new CountedSet();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n        }\r\n        else if (iframe.document) {\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        if (util.isNodeSdk() && this.myID) {\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            var theURL = this.urlFn(urlParams);\r\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial, 1);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.remove(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls)\r\n                        return;\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId identifier for this transport\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + firebase.SDK_VERSION + \"/\" + process.platform + \"/\" + device\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') == 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                this.mySock = new WebSocketImpl(this.connURL);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                this.log_(error$$1);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                _this.log_(error$$1);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length == this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null)\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable)\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports_1 = (this.transports_ = []);\r\n            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports_1.push(transport);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} id - an id for this connection\r\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeout_ms > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n            }, Math.floor(healthyTimeout_ms));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ != 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ == 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param onConnectStatus_\r\n     * @param onServerInfoUpdate_\r\n     * @param authTokenProvider_\r\n     * @param authOverride_\r\n     */\r\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        /** @private {Object} */\r\n        _this.interruptReasons_ = {};\r\n        _this.listens_ = {};\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        /** @private {number|null} */\r\n        _this.establishConnectionTimer_ = null;\r\n        /** @private {boolean} */\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        /** @private {?{\r\n         *   sendRequest(Object),\r\n         *   close()\r\n         * }} */\r\n        _this.realtime_ = null;\r\n        /** @private {string|null} */\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!string} action\r\n     * @param {*} body\r\n     * @param {function(*)=} onResponse\r\n     * @protected\r\n     */\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        this.listens_[pathString] = this.listens_[pathString] || {};\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens_[pathString][queryId] = listenSpec;\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!{onComplete(),\r\n     *           hashFn():!string,\r\n     *           query: !Query,\r\n     *           tag: ?number}} listenSpec\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {*} payload\r\n     * @param {!Query} query\r\n     * @private\r\n     */\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' +\r\n                    query\r\n                        .getQueryParams()\r\n                        .getIndex()\r\n                        .toString() +\r\n                    '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    /**\r\n     * @param {!string} credential\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined)\r\n            request[ /*hash*/'h'] = hash;\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete)\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        else if (action === 'm')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        else if (action === 'c')\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        else if (action === 'ac')\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        else if (action === 'sd')\r\n            this.onSecurityDebugPacket_(body);\r\n        else\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n        }, Math.floor(timeout));\r\n    };\r\n    /**\r\n     * @param {boolean} visible\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error$$1) {\r\n                self_1.log_('Failed to get token: ' + error$$1);\r\n                if (!canceled_1) {\r\n                    if (util.CONSTANTS.NODE_ADMIN) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error$$1);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete)\r\n                    put.onComplete('disconnect');\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0)\r\n            this.outstandingPuts_ = [];\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {Array.<*>=} query\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete)\r\n            listen.onComplete('permission_denied');\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {!string} queryId\r\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens_[normalizedPathString] !== undefined) {\r\n            listen = this.listens_[normalizedPathString][queryId];\r\n            delete this.listens_[normalizedPathString][queryId];\r\n            if (util.getCount(this.listens_[normalizedPathString]) === 0) {\r\n                delete this.listens_[normalizedPathString];\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var _this = this;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        util.forEach(this.listens_, function (pathString, queries) {\r\n            util.forEach(queries, function (key, listenSpec) {\r\n                _this.sendListen_(listenSpec);\r\n            });\r\n        });\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i])\r\n                this.sendPut_(i);\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.CONSTANTS.NODE_ADMIN) {\r\n            clientName = 'admin_node';\r\n        }\r\n        else if (util.CONSTANTS.NODE_CLIENT) {\r\n            clientName = 'node';\r\n        }\r\n        stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    /**\r\n     * @private\r\n     */\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParamaters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParamaters, function (error$$1, result) {\r\n            var data = result;\r\n            if (error$$1 === 404) {\r\n                data = null;\r\n                error$$1 = null;\r\n            }\r\n            if (error$$1 === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error$$1) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error$$1 == 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error$$1;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_\r\n     * @param {boolean} forceRestClient\r\n     * @param {!FirebaseApp} app\r\n     */\r\n    function Repo(repoInfo_, forceRestClient, app) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        // A list of data pieces and paths to be set when this client disconnects.\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        /**\r\n         * TODO: This should be @private but it's used by test_access.js and internal.js\r\n         * @type {?PersistentConnection}\r\n         */\r\n        this.persistentConnection_ = null;\r\n        /** @type {!AuthTokenProvider} */\r\n        var authTokenProvider = new AuthTokenProvider(app);\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactions_init_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {string}  The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return {!string} The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     * @return {!Object}\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     *\r\n     * @private\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {boolean} isMerge\r\n     * @param {?number} tag\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) {\r\n                    return nodeFromJSON$1(raw);\r\n                });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) {\r\n                return nodeFromJSON$1(raw);\r\n            });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @param {?function(!string, *):*} callback\r\n     * @private\r\n     */\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    /**\r\n     * @param {!boolean} connectStatus\r\n     * @private\r\n     */\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Object} updates\r\n     * @private\r\n     */\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (value, key) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {*} value\r\n     * @private\r\n     */\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    /**\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} newVal\r\n     * @param {number|string|null} newPriority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        util.forEach(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            var newNodeUnresolved = nodeFromJSON$1(changedValue);\r\n            changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            util.forEach(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     * @private\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {*} priority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                util.forEach(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined')\r\n            return;\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_)\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        util.forEach(stats, function (stat, value) {\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++)\r\n                stat += ' ';\r\n            console.log(stat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    /**\r\n     * @param {...*} var_args\r\n     * @private\r\n     */\r\n    Repo.prototype.log_ = function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n    /**\r\n     * @param {?function(?Error, *=)} callback\r\n     * @param {!string} status\r\n     * @param {?string=} errorReason\r\n     */\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status == 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason)\r\n                        message += ': ' + errorReason;\r\n                    var error$$1 = new Error(message);\r\n                    error$$1.code = code;\r\n                    callback(error$$1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() == this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty())\r\n            return null;\r\n        else\r\n            return this.path.getBack();\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null)\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            else\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        if (applyLocally === undefined)\r\n            applyLocally = true;\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error$$1, committed, snapshot) {\r\n            if (error$$1) {\r\n                deferred.reject(error$$1);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error$$1, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next;\r\n        while ((next = path.getFront()) !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        util.forEach(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst)\r\n            action(this);\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst)\r\n            action(this);\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null)\r\n                action(child);\r\n            else\r\n                child.forEachImmediateDescendantWithValue(action);\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null)\r\n            this.parent_.updateChild_(this.name_, this);\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\nRepo.prototype.transactions_init_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    else\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    while ((front = path.getFront()) !== null &&\r\n        transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\r\n                // Already marked.  No action needed.\r\n            }\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** @const {string} */\r\nvar DATABASE_URL_OPTION = 'databaseURL';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].interrupt();\r\n            }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].resume();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, url) {\r\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\r\n        if (dbUrl === undefined) {\r\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\r\n                DATABASE_URL_OPTION +\r\n                ' option when calling firebase.initializeApp().');\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.database.checkDeleted_('delete');\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                this.database.repo_ = null;\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\r\n        if (opt_hash !== undefined) {\r\n            opt_hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\r\nvar listens = function (firebaseRef) {\r\n    return firebaseRef.repo.persistentConnection_.listens_;\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  listens: listens,\n  forceRestClient: forceRestClient\n});\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, \r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    }, null, true);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase);\n\nexports.registerDatabase = registerDatabase;\nexports.Database = Database;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.enableLogging = enableLogging;\nexports.ServerValue = ServerValue;\nexports.DataSnapshot = DataSnapshot;\nexports.OnDisconnect = OnDisconnect;\n"]},"metadata":{},"sourceType":"script"}