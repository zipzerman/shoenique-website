{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred =\n/** @class */\nfunction () {\n  function Deferred() {\n    var _this = this;\n\n    this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n  }\n\n  return Deferred;\n}();\n\nexport { Deferred };\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\n\nexport function sequence(values, fn, initialValue) {\n  var result = Promise.resolve(initialValue);\n  values.forEach(function (value) {\n    result = result.then(function (lastResult) {\n      return fn(value, lastResult);\n    });\n  });\n  return result;\n}","map":{"version":3,"sources":["../src/util/promise.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAaH,IAAA,QAAA;AAAA;AAAA,YAAA;AAKE,WAAA,QAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,OAAL,GAAe,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAuB,MAAvB,EAAuC;AAChE,MAAA,KAAI,CAAC,OAAL,GAAe,OAAf;AACA,MAAA,KAAI,CAAC,MAAL,GAAc,MAAd;AACD,KAHc,CAAf;AAID;;AACH,SAAA,QAAA;AAAC,CAXD,EAAA;;;AAaA;;;;;;AAMG;;AACH,OAAM,SAAA,QAAA,CACJ,MADI,EAEJ,EAFI,EAGJ,YAHI,EAGY;AAEhB,MAAI,MAAM,GAAG,OAAO,CAAC,OAAR,CAAgB,YAAhB,CAAb;AACA,EAAA,MAAM,CAAC,OAAP,CAAe,UAAA,KAAA,EAAK;AAClB,IAAA,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,UAAA,UAAA,EAAU;AAAI,aAAA,EAAE,CAAC,KAAD,EAAF,UAAE,CAAF;AAAqB,KAA/C,CAAT;AACD,GAFD;AAGA,SAAO,MAAP;AACD","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AnyDuringMigration } from './misc';\n\nexport interface Resolver<R> {\n  (value?: R | Promise<R>): void;\n}\n\n// tslint:disable-next-line:no-any\nexport interface Rejecter {\n  (value?: any): void;\n}\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  resolve: Resolver<R>;\n  reject: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nexport function sequence<T, R>(\n  values: T[],\n  fn: (value: T, result?: R) => R | Promise<R>,\n  initialValue?: R\n): Promise<R> {\n  let result = Promise.resolve(initialValue);\n  values.forEach(value => {\n    result = result.then(lastResult => fn(value, lastResult));\n  });\n  return result as AnyDuringMigration;\n}\n"]},"metadata":{},"sourceType":"module"}