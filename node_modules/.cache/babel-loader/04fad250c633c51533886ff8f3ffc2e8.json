{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateNamedArrayAtLeastNumberOfElements } from '../util/input_validation'; // The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\n\nvar FieldPath =\n/** @class */\nfunction () {\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  function FieldPath() {\n    var fieldNames = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fieldNames[_i] = arguments[_i];\n    }\n\n    validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n\n    for (var i = 0; i < fieldNames.length; ++i) {\n      validateArgType('FieldPath', 'string', i, fieldNames[i]);\n\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" + 'Field names must not be empty.');\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n\n  FieldPath.documentId = function () {\n    return FieldPath._DOCUMENT_ID;\n  };\n  /**\n   * Internal Note: The backend doesn't technically support querying by\n   * document ID. Instead it queries by the entire document name (full path\n   * included), but in the cases we currently support documentId(), the net\n   * effect is the same.\n   */\n\n\n  FieldPath._DOCUMENT_ID = new FieldPath(InternalFieldPath.keyField().canonicalString());\n  return FieldPath;\n}();\n\nexport { FieldPath };\n/**\n * Matches any characters in a field path string that are reserved.\n */\n\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\n\nexport function fromDotSeparatedString(path) {\n  var found = path.search(RESERVED);\n\n  if (found >= 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" + \"'~', '*', '/', '[', or ']'\");\n  }\n\n  try {\n    return new (FieldPath.bind.apply(FieldPath, [void 0].concat(path.split('.'))))();\n  } catch (e) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" + \"begin with '.', end with '.', or contain '..'\");\n  }\n}","map":{"version":3,"sources":["../src/api/field_path.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAIH,SAAS,SAAS,IAAI,iBAAtB,QAA+C,eAA/C;AACA,SAAS,IAAT,EAAe,cAAf,QAAqC,eAArC;AACA,SACE,eADF,EAEE,yCAFF,QAGO,0BAHP,C,CAKA;AACA;AACA;AACA;;AAEA;;;;AAIG;;AACH,IAAA,SAAA;AAAA;AAAA,YAAA;AAIE;;;;;AAKG;AACH,WAAA,SAAA,GAAA;AAAY,QAAA,UAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAuB;AAAvB,MAAA,UAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACV,IAAA,yCAAyC,CACvC,WADuC,EAEvC,UAFuC,EAGvC,YAHuC,EAIvC,CAJuC,CAAzC;;AAOA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAAU,CAAC,MAA/B,EAAuC,EAAE,CAAzC,EAA4C;AAC1C,MAAA,eAAe,CAAC,WAAD,EAAc,QAAd,EAAwB,CAAxB,EAA2B,UAAU,CAAC,CAAD,CAArC,CAAf;;AACA,UAAI,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,cAAM,IAAI,cAAJ,CACJ,IAAI,CAAC,gBADD,EAEJ,8CACE,gCAHE,CAAN;AAKD;AACF;;AAED,SAAK,aAAL,GAAqB,IAAI,iBAAJ,CAAsB,UAAtB,CAArB;AACD;;AAYa,EAAA,SAAA,CAAA,UAAA,GAAd,YAAA;AACE,WAAO,SAAS,CAAC,YAAjB;AACD,GAFa;AAVd;;;;;AAKG;;;AACqB,EAAA,SAAA,CAAA,YAAA,GAAe,IAAI,SAAJ,CACrC,iBAAiB,CAAC,QAAlB,GAA6B,eAA7B,EADqC,CAAf;AAO1B,SAAA,SAAA;AAAC,CA7CD,EAAA;;SAAa,S;AA+Cb;;AAEG;;AACH,IAAM,QAAQ,GAAG,IAAI,MAAJ,CAAW,eAAX,CAAjB;AAEA;;AAEG;;AACH,OAAM,SAAA,sBAAA,CAAiC,IAAjC,EAA6C;AACjD,MAAM,KAAK,GAAG,IAAI,CAAC,MAAL,CAAY,QAAZ,CAAd;;AACA,MAAI,KAAK,IAAI,CAAb,EAAgB;AACd,UAAM,IAAI,cAAJ,CACJ,IAAI,CAAC,gBADD,EAEJ,yBAAuB,IAAvB,GAA2B,4BAA3B,GACE,4BAHE,CAAN;AAKD;;AACD,MAAI;AACF,WAAM,KAAK,SAAS,CAAA,IAAT,CAAS,KAAT,CAAA,SAAA,EAAS,CAAA,KAAA,CAAA,EAAA,MAAA,CAAI,IAAI,CAAC,KAAL,CAAW,GAAX,CAAJ,CAAT,CAAL,GAAN;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,UAAM,IAAI,cAAJ,CACJ,IAAI,CAAC,gBADD,EAEJ,yBAAuB,IAAvB,GAA2B,8BAA3B,GACE,+CAHE,CAAN;AAKD;AACF","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from 'firestore';\n\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validateArgType,\n  validateNamedArrayAtLeastNumberOfElements\n} from '../util/input_validation';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nexport class FieldPath implements firestore.FieldPath {\n  /** Internal representation of a Firestore field path. */\n  _internalPath: InternalFieldPath;\n\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    validateNamedArrayAtLeastNumberOfElements(\n      'FieldPath',\n      fieldNames,\n      'fieldNames',\n      1\n    );\n\n    for (let i = 0; i < fieldNames.length; ++i) {\n      validateArgType('FieldPath', 'string', i, fieldNames[i]);\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field name at argument $(i + 1). ` +\n            'Field names must not be empty.'\n        );\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n\n  /**\n   * Internal Note: The backend doesn't technically support querying by\n   * document ID. Instead it queries by the entire document name (full path\n   * included), but in the cases we currently support documentId(), the net\n   * effect is the same.\n   */\n  private static readonly _DOCUMENT_ID = new FieldPath(\n    InternalFieldPath.keyField().canonicalString()\n  );\n\n  public static documentId(): FieldPath {\n    return FieldPath._DOCUMENT_ID;\n  }\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path: string): FieldPath {\n  const found = path.search(RESERVED);\n  if (found >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not contain ` +\n        `'~', '*', '/', '[', or ']'`\n    );\n  }\n  try {\n    return new FieldPath(...path.split('.'));\n  } catch (e) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not be empty, ` +\n        `begin with '.', end with '.', or contain '..'`\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}