{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SDK_VERSION } from '../core/version';\nimport { error } from './log';\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\n\nexport function fail(failure) {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n  error(message); // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n\n  throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\n\nexport function assert(assertion, message) {\n  if (!assertion) {\n    fail(message);\n  }\n}","map":{"version":3,"sources":["../src/util/assert.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,WAAT,QAA4B,iBAA5B;AAEA,SAAS,KAAT,QAAsB,OAAtB;AAEA;;;;;;AAMG;;AACH,OAAM,SAAA,IAAA,CAAe,OAAf,EAA8B;AAClC;AACA;AACA,MAAM,OAAO,GACX,gBAAc,WAAd,GAAyB,+BAAzB,GAA2D,OAD7D;AAEA,EAAA,KAAK,CAAC,OAAD,CAAL,CALkC,CAOlC;AACA;AACA;;AACA,QAAM,IAAI,KAAJ,CAAU,OAAV,CAAN;AACD;AAED;;;AAGG;;AACH,OAAM,SAAA,MAAA,CAAiB,SAAjB,EAAqC,OAArC,EAAoD;AACxD,MAAI,CAAC,SAAL,EAAgB;AACd,IAAA,IAAI,CAAC,OAAD,CAAJ;AACD;AACF","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '../core/version';\n\nimport { error } from './log';\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n *\n * Returns any so it can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nexport function fail(failure: string): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message =\n    `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  error(message);\n\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n */\nexport function assert(assertion: boolean, message: string) {\n  if (!assertion) {\n    fail(message);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}