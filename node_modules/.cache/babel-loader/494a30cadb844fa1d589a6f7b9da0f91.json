{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/** Helper function to assert Uint8Array is available at runtime. */\n\nfunction assertUint8ArrayAvailable() {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n  }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\n\n\nfunction assertBase64Available() {\n  if (!PlatformSupport.getPlatform().base64Available) {\n    throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n  }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\n\n\nvar Blob =\n/** @class */\nfunction () {\n  function Blob(binaryString) {\n    assertBase64Available();\n    this._binaryString = binaryString;\n  }\n\n  Blob.fromBase64String = function (base64) {\n    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n    validateArgType('Blob.fromBase64String', 'string', 1, base64);\n    assertBase64Available();\n\n    try {\n      var binaryString = PlatformSupport.getPlatform().atob(base64);\n      return new Blob(binaryString);\n    } catch (e) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n    }\n  };\n\n  Blob.fromUint8Array = function (array) {\n    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n    assertUint8ArrayAvailable();\n\n    if (!(array instanceof Uint8Array)) {\n      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n    } // We can't call array.map directly because it expects the return type to\n    // be a Uint8Array, whereas we can convert it to a regular array by invoking\n    // map on the Array prototype.\n\n\n    var binaryString = Array.prototype.map.call(array, function (char) {\n      return String.fromCharCode(char);\n    }).join('');\n    return new Blob(binaryString);\n  };\n\n  Blob.prototype.toBase64 = function () {\n    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n    assertBase64Available();\n    return PlatformSupport.getPlatform().btoa(this._binaryString);\n  };\n\n  Blob.prototype.toUint8Array = function () {\n    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n    assertUint8ArrayAvailable();\n    var buffer = new Uint8Array(this._binaryString.length);\n\n    for (var i = 0; i < this._binaryString.length; i++) {\n      buffer[i] = this._binaryString.charCodeAt(i);\n    }\n\n    return buffer;\n  };\n\n  Blob.prototype.toString = function () {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  };\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n\n\n  Blob.prototype._equals = function (other) {\n    return this._binaryString === other._binaryString;\n  };\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n\n\n  Blob.prototype._compareTo = function (other) {\n    return primitiveComparator(this._binaryString, other._binaryString);\n  };\n\n  return Blob;\n}();\n\nexport { Blob }; // Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\n\nexport var PublicBlob = makeConstructorPrivate(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');","map":{"version":3,"sources":["../src/api/blob.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n  if (!PlatformSupport.getPlatform().base64Available) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nexport class Blob {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion.\n  // A binary string is a string with each char as Unicode code point in the\n  // range of [0, 255], essentially simulating a byte array.\n  private _binaryString: string;\n\n  private constructor(binaryString: string) {\n    assertBase64Available();\n    this._binaryString = binaryString;\n  }\n\n  static fromBase64String(base64: string): Blob {\n    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n    validateArgType('Blob.fromBase64String', 'string', 1, base64);\n    assertBase64Available();\n    try {\n      const binaryString = PlatformSupport.getPlatform().atob(base64);\n      return new Blob(binaryString);\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Blob from Base64 string: ' + e\n      );\n    }\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n    assertUint8ArrayAvailable();\n    if (!(array instanceof Uint8Array)) {\n      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n    }\n    // We can't call array.map directly because it expects the return type to\n    // be a Uint8Array, whereas we can convert it to a regular array by invoking\n    // map on the Array prototype.\n    const binaryString = Array.prototype.map\n      .call(array, (char: number) => {\n        return String.fromCharCode(char);\n      })\n      .join('');\n    return new Blob(binaryString);\n  }\n\n  public toBase64(): string {\n    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n    assertBase64Available();\n    return PlatformSupport.getPlatform().btoa(this._binaryString);\n  }\n\n  public toUint8Array(): Uint8Array {\n    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n    assertUint8ArrayAvailable();\n    const buffer = new Uint8Array(this._binaryString.length);\n    for (let i = 0; i < this._binaryString.length; i++) {\n      buffer[i] = this._binaryString.charCodeAt(i);\n    }\n    return buffer;\n  }\n\n  public toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  public _equals(other: Blob): boolean {\n    return this._binaryString === other._binaryString;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  public _compareTo(other: Blob): number {\n    return primitiveComparator(this._binaryString, other._binaryString);\n  }\n}\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nexport let PublicBlob = makeConstructorPrivate(\n  Blob,\n  'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.'\n);\n"]},"metadata":{},"sourceType":"module"}