{"ast":null,"code":"import { ErrorFactory, createSubscribe } from '@firebase/util';\nimport { __extends, __awaiter, __generator, __assign } from 'tslib';\nimport firebase from '@firebase/app';\n/**\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ERROR_CODES = {\n  AVAILABLE_IN_WINDOW: 'only-available-in-window',\n  AVAILABLE_IN_SW: 'only-available-in-sw',\n  SHOULD_BE_INHERITED: 'should-be-overriden',\n  BAD_SENDER_ID: 'bad-sender-id',\n  INCORRECT_GCM_SENDER_ID: 'incorrect-gcm-sender-id',\n  PERMISSION_DEFAULT: 'permission-default',\n  PERMISSION_BLOCKED: 'permission-blocked',\n  UNSUPPORTED_BROWSER: 'unsupported-browser',\n  NOTIFICATIONS_BLOCKED: 'notifications-blocked',\n  FAILED_DEFAULT_REGISTRATION: 'failed-serviceworker-registration',\n  SW_REGISTRATION_EXPECTED: 'sw-registration-expected',\n  GET_SUBSCRIPTION_FAILED: 'get-subscription-failed',\n  INVALID_SAVED_TOKEN: 'invalid-saved-token',\n  SW_REG_REDUNDANT: 'sw-reg-redundant',\n  TOKEN_SUBSCRIBE_FAILED: 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN: 'token-subscribe-no-token',\n  TOKEN_SUBSCRIBE_NO_PUSH_SET: 'token-subscribe-no-push-set',\n  TOKEN_UNSUBSCRIBE_FAILED: 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED: 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN: 'token-update-no-token',\n  USE_SW_BEFORE_GET_TOKEN: 'use-sw-before-get-token',\n  INVALID_DELETE_TOKEN: 'invalid-delete-token',\n  DELETE_TOKEN_NOT_FOUND: 'delete-token-not-found',\n  DELETE_SCOPE_NOT_FOUND: 'delete-scope-not-found',\n  BG_HANDLER_FUNCTION_EXPECTED: 'bg-handler-function-expected',\n  NO_WINDOW_CLIENT_TO_MSG: 'no-window-client-to-msg',\n  UNABLE_TO_RESUBSCRIBE: 'unable-to-resubscribe',\n  NO_FCM_TOKEN_FOR_RESUBSCRIBE: 'no-fcm-token-for-resubscribe',\n  FAILED_TO_DELETE_TOKEN: 'failed-to-delete-token',\n  NO_SW_IN_REG: 'no-sw-in-reg',\n  BAD_SCOPE: 'bad-scope',\n  BAD_VAPID_KEY: 'bad-vapid-key',\n  BAD_SUBSCRIPTION: 'bad-subscription',\n  BAD_TOKEN: 'bad-token',\n  BAD_PUSH_SET: 'bad-push-set',\n  FAILED_DELETE_VAPID_KEY: 'failed-delete-vapid-key',\n  INVALID_PUBLIC_VAPID_KEY: 'invalid-public-vapid-key',\n  USE_PUBLIC_KEY_BEFORE_GET_TOKEN: 'use-public-key-before-get-token',\n  PUBLIC_KEY_DECRYPTION_FAILED: 'public-vapid-key-decryption-failed'\n};\nvar ERROR_MAP = (_a = {}, _a[ERROR_CODES.AVAILABLE_IN_WINDOW] = 'This method is available in a Window context.', _a[ERROR_CODES.AVAILABLE_IN_SW] = 'This method is available in a service worker ' + 'context.', _a[ERROR_CODES.SHOULD_BE_INHERITED] = 'This method should be overriden by ' + 'extended classes.', _a[ERROR_CODES.BAD_SENDER_ID] = \"Please ensure that 'messagingSenderId' is set \" + 'correctly in the options passed into firebase.initializeApp().', _a[ERROR_CODES.PERMISSION_DEFAULT] = 'The required permissions were not granted and ' + 'dismissed instead.', _a[ERROR_CODES.PERMISSION_BLOCKED] = 'The required permissions were not granted and ' + 'blocked instead.', _a[ERROR_CODES.UNSUPPORTED_BROWSER] = \"This browser doesn't support the API's \" + 'required to use the firebase SDK.', _a[ERROR_CODES.NOTIFICATIONS_BLOCKED] = 'Notifications have been blocked.', _a[ERROR_CODES.FAILED_DEFAULT_REGISTRATION] = 'We are unable to register the ' + 'default service worker. {$browserErrorMessage}', _a[ERROR_CODES.SW_REGISTRATION_EXPECTED] = 'A service worker registration was the ' + 'expected input.', _a[ERROR_CODES.GET_SUBSCRIPTION_FAILED] = 'There was an error when trying to get ' + 'any existing Push Subscriptions.', _a[ERROR_CODES.INVALID_SAVED_TOKEN] = 'Unable to access details of the saved token.', _a[ERROR_CODES.SW_REG_REDUNDANT] = 'The service worker being used for push was made ' + 'redundant.', _a[ERROR_CODES.TOKEN_SUBSCRIBE_FAILED] = 'A problem occured while subscribing the ' + 'user to FCM: {$message}', _a[ERROR_CODES.TOKEN_SUBSCRIBE_NO_TOKEN] = 'FCM returned no token when subscribing ' + 'the user to push.', _a[ERROR_CODES.TOKEN_SUBSCRIBE_NO_PUSH_SET] = 'FCM returned an invalid response ' + 'when getting an FCM token.', _a[ERROR_CODES.TOKEN_UNSUBSCRIBE_FAILED] = 'A problem occured while unsubscribing the ' + 'user from FCM: {$message}', _a[ERROR_CODES.TOKEN_UPDATE_FAILED] = 'A problem occured while updating the ' + 'user from FCM: {$message}', _a[ERROR_CODES.TOKEN_UPDATE_NO_TOKEN] = 'FCM returned no token when updating ' + 'the user to push.', _a[ERROR_CODES.USE_SW_BEFORE_GET_TOKEN] = 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.', _a[ERROR_CODES.INVALID_DELETE_TOKEN] = 'You must pass a valid token into ' + 'deleteToken(), i.e. the token from getToken().', _a[ERROR_CODES.DELETE_TOKEN_NOT_FOUND] = 'The deletion attempt for token could not ' + 'be performed as the token was not found.', _a[ERROR_CODES.DELETE_SCOPE_NOT_FOUND] = 'The deletion attempt for service worker ' + 'scope could not be performed as the scope was not found.', _a[ERROR_CODES.BG_HANDLER_FUNCTION_EXPECTED] = 'The input to ' + 'setBackgroundMessageHandler() must be a function.', _a[ERROR_CODES.NO_WINDOW_CLIENT_TO_MSG] = 'An attempt was made to message a ' + 'non-existant window client.', _a[ERROR_CODES.UNABLE_TO_RESUBSCRIBE] = 'There was an error while re-subscribing ' + 'the FCM token for push messaging. Will have to resubscribe the ' + 'user on next visit. {$message}', _a[ERROR_CODES.NO_FCM_TOKEN_FOR_RESUBSCRIBE] = 'Could not find an FCM token ' + 'and as a result, unable to resubscribe. Will have to resubscribe the ' + 'user on next visit.', _a[ERROR_CODES.FAILED_TO_DELETE_TOKEN] = 'Unable to delete the currently saved token.', _a[ERROR_CODES.NO_SW_IN_REG] = 'Even though the service worker registration was ' + 'successful, there was a problem accessing the service worker itself.', _a[ERROR_CODES.INCORRECT_GCM_SENDER_ID] = \"Please change your web app manifest's \" + \"'gcm_sender_id' value to '103953800507' to use Firebase messaging.\", _a[ERROR_CODES.BAD_SCOPE] = 'The service worker scope must be a string with at ' + 'least one character.', _a[ERROR_CODES.BAD_VAPID_KEY] = 'The public VAPID key is not a Uint8Array with 65 bytes.', _a[ERROR_CODES.BAD_SUBSCRIPTION] = 'The subscription must be a valid ' + 'PushSubscription.', _a[ERROR_CODES.BAD_TOKEN] = 'The FCM Token used for storage / lookup was not ' + 'a valid token string.', _a[ERROR_CODES.BAD_PUSH_SET] = 'The FCM push set used for storage / lookup was not ' + 'not a valid push set string.', _a[ERROR_CODES.FAILED_DELETE_VAPID_KEY] = 'The VAPID key could not be deleted.', _a[ERROR_CODES.INVALID_PUBLIC_VAPID_KEY] = 'The public VAPID key must be a string.', _a[ERROR_CODES.PUBLIC_KEY_DECRYPTION_FAILED] = 'The public VAPID key did not equal ' + '65 bytes when decrypted.', _a);\nvar errorFactory = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n\nvar _a;\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_PUBLIC_VAPID_KEY = new Uint8Array([0x04, 0x33, 0x94, 0xf7, 0xdf, 0xa1, 0xeb, 0xb1, 0xdc, 0x03, 0xa2, 0x5e, 0x15, 0x71, 0xdb, 0x48, 0xd3, 0x2e, 0xed, 0xed, 0xb2, 0x34, 0xdb, 0xb7, 0x47, 0x3a, 0x0c, 0x8f, 0xc4, 0xcc, 0xe1, 0x6f, 0x3c, 0x8c, 0x84, 0xdf, 0xab, 0xb6, 0x66, 0x3e, 0xf2, 0x0c, 0xd4, 0x8b, 0xfe, 0xe3, 0xf9, 0x76, 0x2f, 0x14, 0x1c, 0x63, 0x08, 0x6a, 0x6f, 0x2d, 0xb1, 0x1a, 0x95, 0xb0, 0xce, 0x37, 0xc0, 0x9c, 0x6e]);\nvar ENDPOINT = 'https://fcm.googleapis.com';\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar MessageParameter;\n\n(function (MessageParameter) {\n  MessageParameter[\"TYPE_OF_MSG\"] = \"firebase-messaging-msg-type\";\n  MessageParameter[\"DATA\"] = \"firebase-messaging-msg-data\";\n})(MessageParameter || (MessageParameter = {}));\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[\"PUSH_MSG_RECEIVED\"] = \"push-msg-received\";\n  MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\n})(MessageType || (MessageType = {}));\n/**\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isArrayBufferEqual(a, b) {\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (a === b) {\n    return true;\n  }\n\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n\n  var viewA = new DataView(a);\n  var viewB = new DataView(b);\n\n  for (var i = 0; i < a.byteLength; i++) {\n    if (viewA.getUint8(i) !== viewB.getUint8(i)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction toBase64(arrayBuffer) {\n  var uint8Version = new Uint8Array(arrayBuffer);\n  return btoa(String.fromCharCode.apply(null, uint8Version));\n}\n\nfunction arrayBufferToBase64(arrayBuffer) {\n  var base64String = toBase64(arrayBuffer);\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar IIDModel =\n/** @class */\nfunction () {\n  function IIDModel() {}\n\n  IIDModel.prototype.getToken = function (senderId, subscription, publicVapidKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var p256dh, auth, fcmSubscribeBody, applicationPubKey, headers, subscribeOptions, responseData, response, err_1, message;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            p256dh = arrayBufferToBase64(subscription.getKey('p256dh'));\n            auth = arrayBufferToBase64(subscription.getKey('auth'));\n            fcmSubscribeBody = \"authorized_entity=\" + senderId + \"&\" + (\"endpoint=\" + subscription.endpoint + \"&\") + (\"encryption_key=\" + p256dh + \"&\") + (\"encryption_auth=\" + auth);\n\n            if (publicVapidKey !== DEFAULT_PUBLIC_VAPID_KEY) {\n              applicationPubKey = arrayBufferToBase64(publicVapidKey);\n              fcmSubscribeBody += \"&application_pub_key=\" + applicationPubKey;\n            }\n\n            headers = new Headers();\n            headers.append('Content-Type', 'application/x-www-form-urlencoded');\n            subscribeOptions = {\n              method: 'POST',\n              headers: headers,\n              body: fcmSubscribeBody\n            };\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , fetch(ENDPOINT + '/fcm/connect/subscribe', subscribeOptions)];\n\n          case 2:\n            response = _a.sent();\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 3:\n            responseData = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_1 = _a.sent();\n            throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_FAILED);\n\n          case 5:\n            if (responseData.error) {\n              message = responseData.error.message;\n              throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_FAILED, {\n                message: message\n              });\n            }\n\n            if (!responseData.token) {\n              throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_NO_TOKEN);\n            }\n\n            if (!responseData.pushSet) {\n              throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_NO_PUSH_SET);\n            }\n\n            return [2\n            /*return*/\n            , {\n              token: responseData.token,\n              pushSet: responseData.pushSet\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Update the underlying token details for fcmToken.\r\n   */\n\n\n  IIDModel.prototype.updateToken = function (senderId, fcmToken, fcmPushSet, subscription, publicVapidKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var p256dh, auth, fcmUpdateBody, applicationPubKey, headers, updateOptions, responseData, response, err_2, message;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            p256dh = arrayBufferToBase64(subscription.getKey('p256dh'));\n            auth = arrayBufferToBase64(subscription.getKey('auth'));\n            fcmUpdateBody = \"push_set=\" + fcmPushSet + \"&\" + (\"token=\" + fcmToken + \"&\") + (\"authorized_entity=\" + senderId + \"&\") + (\"endpoint=\" + subscription.endpoint + \"&\") + (\"encryption_key=\" + p256dh + \"&\") + (\"encryption_auth=\" + auth);\n\n            if (publicVapidKey !== DEFAULT_PUBLIC_VAPID_KEY) {\n              applicationPubKey = arrayBufferToBase64(publicVapidKey);\n              fcmUpdateBody += \"&application_pub_key=\" + applicationPubKey;\n            }\n\n            headers = new Headers();\n            headers.append('Content-Type', 'application/x-www-form-urlencoded');\n            updateOptions = {\n              method: 'POST',\n              headers: headers,\n              body: fcmUpdateBody\n            };\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , fetch(ENDPOINT + '/fcm/connect/subscribe', updateOptions)];\n\n          case 2:\n            response = _a.sent();\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 3:\n            responseData = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_2 = _a.sent();\n            throw errorFactory.create(ERROR_CODES.TOKEN_UPDATE_FAILED);\n\n          case 5:\n            if (responseData.error) {\n              message = responseData.error.message;\n              throw errorFactory.create(ERROR_CODES.TOKEN_UPDATE_FAILED, {\n                message: message\n              });\n            }\n\n            if (!responseData.token) {\n              throw errorFactory.create(ERROR_CODES.TOKEN_UPDATE_NO_TOKEN);\n            }\n\n            return [2\n            /*return*/\n            , responseData.token];\n        }\n      });\n    });\n  };\n  /**\r\n   * Given a fcmToken, pushSet and messagingSenderId, delete an FCM token.\r\n   */\n\n\n  IIDModel.prototype.deleteToken = function (senderId, fcmToken, fcmPushSet) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fcmUnsubscribeBody, headers, unsubscribeOptions, response, responseData, message, err_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fcmUnsubscribeBody = \"authorized_entity=\" + senderId + \"&\" + (\"token=\" + fcmToken + \"&\") + (\"pushSet=\" + fcmPushSet);\n            headers = new Headers();\n            headers.append('Content-Type', 'application/x-www-form-urlencoded');\n            unsubscribeOptions = {\n              method: 'POST',\n              headers: headers,\n              body: fcmUnsubscribeBody\n            };\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , fetch(ENDPOINT + '/fcm/connect/unsubscribe', unsubscribeOptions)];\n\n          case 2:\n            response = _a.sent();\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 3:\n            responseData = _a.sent();\n\n            if (responseData.error) {\n              message = responseData.error.message;\n              throw errorFactory.create(ERROR_CODES.TOKEN_UNSUBSCRIBE_FAILED, {\n                message: message\n              });\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_3 = _a.sent();\n            throw errorFactory.create(ERROR_CODES.TOKEN_UNSUBSCRIBE_FAILED);\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return IIDModel;\n}();\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction base64ToArrayBuffer(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar OLD_DB_NAME = 'undefined';\nvar OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nfunction handleDb(db) {\n  if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n    // We found a database with the name 'undefined', but our expected object\n    // store isn't defined.\n    return;\n  }\n\n  var transaction = db.transaction(OLD_OBJECT_STORE_NAME);\n  var objectStore = transaction.objectStore(OLD_OBJECT_STORE_NAME);\n  var iidModel = new IIDModel();\n  var openCursorRequest = objectStore.openCursor();\n\n  openCursorRequest.onerror = function (event) {\n    // NOOP - Nothing we can do.\n    console.warn('Unable to cleanup old IDB.', event);\n  };\n\n  openCursorRequest.onsuccess = function () {\n    var cursor = openCursorRequest.result;\n\n    if (cursor) {\n      // cursor.value contains the current record being iterated through\n      // this is where you'd do something with the result\n      var tokenDetails = cursor.value;\n      iidModel.deleteToken(tokenDetails.fcmSenderId, tokenDetails.fcmToken, tokenDetails.fcmPushSet);\n      cursor.continue();\n    } else {\n      db.close();\n      indexedDB.deleteDatabase(OLD_DB_NAME);\n    }\n  };\n}\n\nfunction cleanV1() {\n  var request = indexedDB.open(OLD_DB_NAME);\n\n  request.onerror = function (event) {// NOOP - Nothing we can do.\n  };\n\n  request.onsuccess = function (event) {\n    var db = request.result;\n    handleDb(db);\n  };\n}\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DBInterface =\n/** @class */\nfunction () {\n  function DBInterface() {\n    this.dbPromise = null;\n  }\n  /** Gets record(s) from the objectStore that match the given key. */\n\n\n  DBInterface.prototype.get = function (key) {\n    return this.createTransaction(function (objectStore) {\n      return objectStore.get(key);\n    });\n  };\n  /** Gets record(s) from the objectStore that match the given index. */\n\n\n  DBInterface.prototype.getIndex = function (index, key) {\n    function runRequest(objectStore) {\n      var idbIndex = objectStore.index(index);\n      return idbIndex.get(key);\n    }\n\n    return this.createTransaction(runRequest);\n  };\n  /** Assigns or overwrites the record for the given value. */\n  // tslint:disable-next-line:no-any IndexedDB values are of type \"any\"\n\n\n  DBInterface.prototype.put = function (value) {\n    return this.createTransaction(function (objectStore) {\n      return objectStore.put(value);\n    }, 'readwrite');\n  };\n  /** Deletes record(s) from the objectStore that match the given key. */\n\n\n  DBInterface.prototype.delete = function (key) {\n    return this.createTransaction(function (objectStore) {\n      return objectStore.delete(key);\n    }, 'readwrite');\n  };\n  /**\r\n   * Close the currently open database.\r\n   */\n\n\n  DBInterface.prototype.closeDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var db;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.dbPromise) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.dbPromise];\n\n          case 1:\n            db = _a.sent();\n            db.close();\n            this.dbPromise = null;\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates an IndexedDB Transaction and passes its objectStore to the\r\n   * runRequest function, which runs the database request.\r\n   *\r\n   * @return Promise that resolves with the result of the runRequest function\r\n   */\n\n\n  DBInterface.prototype.createTransaction = function (runRequest, mode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var db, transaction, request, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getDb()];\n\n          case 1:\n            db = _a.sent();\n            transaction = db.transaction(this.objectStoreName, mode);\n            request = transaction.objectStore(this.objectStoreName);\n            return [4\n            /*yield*/\n            , promisify(runRequest(request))];\n\n          case 2:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              transaction.oncomplete = function () {\n                resolve(result);\n              };\n\n              transaction.onerror = function () {\n                reject(transaction.error);\n              };\n            })];\n        }\n      });\n    });\n  };\n  /** Gets the cached db connection or opens a new one. */\n\n\n  DBInterface.prototype.getDb = function () {\n    var _this = this;\n\n    if (!this.dbPromise) {\n      this.dbPromise = new Promise(function (resolve, reject) {\n        var request = indexedDB.open(_this.dbName, _this.dbVersion);\n\n        request.onsuccess = function () {\n          resolve(request.result);\n        };\n\n        request.onerror = function () {\n          _this.dbPromise = null;\n          reject(request.error);\n        };\n\n        request.onupgradeneeded = function (event) {\n          return _this.onDbUpgrade(request, event);\n        };\n      });\n    }\n\n    return this.dbPromise;\n  };\n\n  return DBInterface;\n}();\n/** Promisifies an IDBRequest. Resolves with the IDBRequest's result. */\n\n\nfunction promisify(request) {\n  return new Promise(function (resolve, reject) {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n\n    request.onerror = function () {\n      reject(request.error);\n    };\n  });\n}\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar TokenDetailsModel =\n/** @class */\nfunction (_super) {\n  __extends(TokenDetailsModel, _super);\n\n  function TokenDetailsModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.dbName = 'fcm_token_details_db';\n    _this.dbVersion = 3;\n    _this.objectStoreName = 'fcm_token_object_Store';\n    return _this;\n  }\n\n  TokenDetailsModel.prototype.onDbUpgrade = function (request, event) {\n    var db = request.result; // Lack of 'break' statements is intentional.\n\n    switch (event.oldVersion) {\n      case 0:\n        {\n          // New IDB instance\n          var objectStore = db.createObjectStore(this.objectStoreName, {\n            keyPath: 'swScope'\n          }); // Make sure the sender ID can be searched\n\n          objectStore.createIndex('fcmSenderId', 'fcmSenderId', {\n            unique: false\n          });\n          objectStore.createIndex('fcmToken', 'fcmToken', {\n            unique: true\n          });\n        }\n\n      case 1:\n        {\n          // Prior to version 2, we were using either 'fcm_token_details_db'\n          // or 'undefined' as the database name due to bug in the SDK\n          // So remove the old tokens and databases.\n          cleanV1();\n        }\n\n      case 2:\n        {\n          var objectStore = request.transaction.objectStore(this.objectStoreName);\n          var cursorRequest_1 = objectStore.openCursor();\n\n          cursorRequest_1.onsuccess = function () {\n            var cursor = cursorRequest_1.result;\n\n            if (cursor) {\n              var value = cursor.value;\n\n              var newValue = __assign({}, value);\n\n              if (!value.createTime) {\n                newValue.createTime = Date.now();\n              }\n\n              if (typeof value.vapidKey === 'string') {\n                newValue.vapidKey = base64ToArrayBuffer(value.vapidKey);\n              }\n\n              if (typeof value.auth === 'string') {\n                newValue.auth = base64ToArrayBuffer(value.auth).buffer;\n              }\n\n              if (typeof value.auth === 'string') {\n                newValue.p256dh = base64ToArrayBuffer(value.p256dh).buffer;\n              }\n\n              cursor.update(newValue);\n              cursor.continue();\n            }\n          };\n        }\n    }\n  };\n  /**\r\n   * Given a token, this method will look up the details in indexedDB.\r\n   */\n\n\n  TokenDetailsModel.prototype.getTokenDetailsFromToken = function (fcmToken) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!fcmToken) {\n          throw errorFactory.create(ERROR_CODES.BAD_TOKEN);\n        }\n\n        validateInputs({\n          fcmToken: fcmToken\n        });\n        return [2\n        /*return*/\n        , this.getIndex('fcmToken', fcmToken)];\n      });\n    });\n  };\n  /**\r\n   * Given a service worker scope, this method will look up the details in\r\n   * indexedDB.\r\n   * @return The details associated with that token.\r\n   */\n\n\n  TokenDetailsModel.prototype.getTokenDetailsFromSWScope = function (swScope) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!swScope) {\n          throw errorFactory.create(ERROR_CODES.BAD_SCOPE);\n        }\n\n        validateInputs({\n          swScope: swScope\n        });\n        return [2\n        /*return*/\n        , this.get(swScope)];\n      });\n    });\n  };\n  /**\r\n   * Save the details for the fcm token for re-use at a later date.\r\n   * @param input A plain js object containing args to save.\r\n   */\n\n\n  TokenDetailsModel.prototype.saveTokenDetails = function (tokenDetails) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!tokenDetails.swScope) {\n          throw errorFactory.create(ERROR_CODES.BAD_SCOPE);\n        }\n\n        if (!tokenDetails.vapidKey) {\n          throw errorFactory.create(ERROR_CODES.BAD_VAPID_KEY);\n        }\n\n        if (!tokenDetails.endpoint || !tokenDetails.auth || !tokenDetails.p256dh) {\n          throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);\n        }\n\n        if (!tokenDetails.fcmSenderId) {\n          throw errorFactory.create(ERROR_CODES.BAD_SENDER_ID);\n        }\n\n        if (!tokenDetails.fcmToken) {\n          throw errorFactory.create(ERROR_CODES.BAD_TOKEN);\n        }\n\n        if (!tokenDetails.fcmPushSet) {\n          throw errorFactory.create(ERROR_CODES.BAD_PUSH_SET);\n        }\n\n        validateInputs(tokenDetails);\n        return [2\n        /*return*/\n        , this.put(tokenDetails)];\n      });\n    });\n  };\n  /**\r\n   * This method deletes details of the current FCM token.\r\n   * It's returning a promise in case we need to move to an async\r\n   * method for deleting at a later date.\r\n   *\r\n   * @return Resolves once the FCM token details have been deleted and returns\r\n   * the deleted details.\r\n   */\n\n\n  TokenDetailsModel.prototype.deleteToken = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var details;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof token !== 'string' || token.length === 0) {\n              return [2\n              /*return*/\n              , Promise.reject(errorFactory.create(ERROR_CODES.INVALID_DELETE_TOKEN))];\n            }\n\n            return [4\n            /*yield*/\n            , this.getTokenDetailsFromToken(token)];\n\n          case 1:\n            details = _a.sent();\n\n            if (!details) {\n              throw errorFactory.create(ERROR_CODES.DELETE_TOKEN_NOT_FOUND);\n            }\n\n            return [4\n            /*yield*/\n            , this.delete(details.swScope)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , details];\n        }\n      });\n    });\n  };\n\n  return TokenDetailsModel;\n}(DBInterface);\n/**\r\n * This method takes an object and will check for known arguments and\r\n * validate the input.\r\n * @return Promise that resolves if input is valid, rejects otherwise.\r\n */\n\n\nfunction validateInputs(input) {\n  if (input.fcmToken) {\n    if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {\n      throw errorFactory.create(ERROR_CODES.BAD_TOKEN);\n    }\n  }\n\n  if (input.swScope) {\n    if (typeof input.swScope !== 'string' || input.swScope.length === 0) {\n      throw errorFactory.create(ERROR_CODES.BAD_SCOPE);\n    }\n  }\n\n  if (input.vapidKey) {\n    if (!(input.vapidKey instanceof Uint8Array) || input.vapidKey.length !== 65) {\n      throw errorFactory.create(ERROR_CODES.BAD_VAPID_KEY);\n    }\n  }\n\n  if (input.endpoint) {\n    if (typeof input.endpoint !== 'string' || input.endpoint.length === 0) {\n      throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);\n    }\n  }\n\n  if (input.auth) {\n    if (!(input.auth instanceof ArrayBuffer)) {\n      throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);\n    }\n  }\n\n  if (input.p256dh) {\n    if (!(input.p256dh instanceof ArrayBuffer)) {\n      throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);\n    }\n  }\n\n  if (input.fcmSenderId) {\n    if (typeof input.fcmSenderId !== 'string' || input.fcmSenderId.length === 0) {\n      throw errorFactory.create(ERROR_CODES.BAD_SENDER_ID);\n    }\n  }\n\n  if (input.fcmPushSet) {\n    if (typeof input.fcmPushSet !== 'string' || input.fcmPushSet.length === 0) {\n      throw errorFactory.create(ERROR_CODES.BAD_PUSH_SET);\n    }\n  }\n}\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;\n\nvar VapidDetailsModel =\n/** @class */\nfunction (_super) {\n  __extends(VapidDetailsModel, _super);\n\n  function VapidDetailsModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.dbName = 'fcm_vapid_details_db';\n    _this.dbVersion = 1;\n    _this.objectStoreName = 'fcm_vapid_object_Store';\n    return _this;\n  }\n\n  VapidDetailsModel.prototype.onDbUpgrade = function (request) {\n    var db = request.result;\n    db.createObjectStore(this.objectStoreName, {\n      keyPath: 'swScope'\n    });\n  };\n  /**\r\n   * Given a service worker scope, this method will look up the vapid key\r\n   * in indexedDB.\r\n   */\n\n\n  VapidDetailsModel.prototype.getVapidFromSWScope = function (swScope) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof swScope !== 'string' || swScope.length === 0) {\n              throw errorFactory.create(ERROR_CODES.BAD_SCOPE);\n            }\n\n            return [4\n            /*yield*/\n            , this.get(swScope)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result ? result.vapidKey : undefined];\n        }\n      });\n    });\n  };\n  /**\r\n   * Save a vapid key against a swScope for later date.\r\n   */\n\n\n  VapidDetailsModel.prototype.saveVapidDetails = function (swScope, vapidKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var details;\n      return __generator(this, function (_a) {\n        if (typeof swScope !== 'string' || swScope.length === 0) {\n          throw errorFactory.create(ERROR_CODES.BAD_SCOPE);\n        }\n\n        if (vapidKey === null || vapidKey.length !== UNCOMPRESSED_PUBLIC_KEY_SIZE) {\n          throw errorFactory.create(ERROR_CODES.BAD_VAPID_KEY);\n        }\n\n        details = {\n          swScope: swScope,\n          vapidKey: vapidKey\n        };\n        return [2\n        /*return*/\n        , this.put(details)];\n      });\n    });\n  };\n  /**\r\n   * This method deletes details of the current FCM VAPID key for a SW scope.\r\n   * Resolves once the scope/vapid details have been deleted and returns the\r\n   * deleted vapid key.\r\n   */\n\n\n  VapidDetailsModel.prototype.deleteVapidDetails = function (swScope) {\n    return __awaiter(this, void 0, void 0, function () {\n      var vapidKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getVapidFromSWScope(swScope)];\n\n          case 1:\n            vapidKey = _a.sent();\n\n            if (!vapidKey) {\n              throw errorFactory.create(ERROR_CODES.DELETE_SCOPE_NOT_FOUND);\n            }\n\n            return [4\n            /*yield*/\n            , this.delete(swScope)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , vapidKey];\n        }\n      });\n    });\n  };\n\n  return VapidDetailsModel;\n}(DBInterface);\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar SENDER_ID_OPTION_NAME = 'messagingSenderId'; // Database cache should be invalidated once a week.\n\nvar TOKEN_EXPIRATION_MILLIS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nvar ControllerInterface =\n/** @class */\nfunction () {\n  /**\r\n   * An interface of the Messaging Service API\r\n   */\n  function ControllerInterface(app) {\n    var _this = this;\n\n    if (!app.options[SENDER_ID_OPTION_NAME] || typeof app.options[SENDER_ID_OPTION_NAME] !== 'string') {\n      throw errorFactory.create(ERROR_CODES.BAD_SENDER_ID);\n    }\n\n    this.messagingSenderId = app.options[SENDER_ID_OPTION_NAME];\n    this.tokenDetailsModel = new TokenDetailsModel();\n    this.vapidDetailsModel = new VapidDetailsModel();\n    this.iidModel = new IIDModel();\n    this.app = app;\n    this.INTERNAL = {\n      delete: function _delete() {\n        return _this.delete();\n      }\n    };\n  }\n  /**\r\n   * @export\r\n   */\n\n\n  ControllerInterface.prototype.getToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentPermission, swReg, publicVapidKey, pushSubscription, tokenDetails;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            currentPermission = this.getNotificationPermission_();\n\n            if (currentPermission !== 'granted') {\n              if (currentPermission === 'denied') {\n                return [2\n                /*return*/\n                , Promise.reject(errorFactory.create(ERROR_CODES.NOTIFICATIONS_BLOCKED))];\n              } // We must wait for permission to be granted\n\n\n              return [2\n              /*return*/\n              , Promise.resolve(null)];\n            }\n\n            return [4\n            /*yield*/\n            , this.getSWRegistration_()];\n\n          case 1:\n            swReg = _a.sent();\n            return [4\n            /*yield*/\n            , this.getPublicVapidKey_()];\n\n          case 2:\n            publicVapidKey = _a.sent();\n            return [4\n            /*yield*/\n            , this.getPushSubscription(swReg, publicVapidKey)];\n\n          case 3:\n            pushSubscription = _a.sent();\n            return [4\n            /*yield*/\n            , this.tokenDetailsModel.getTokenDetailsFromSWScope(swReg.scope)];\n\n          case 4:\n            tokenDetails = _a.sent();\n\n            if (tokenDetails) {\n              return [2\n              /*return*/\n              , this.manageExistingToken(swReg, pushSubscription, publicVapidKey, tokenDetails)];\n            }\n\n            return [2\n            /*return*/\n            , this.getNewToken(swReg, pushSubscription, publicVapidKey)];\n        }\n      });\n    });\n  };\n  /**\r\n   * manageExistingToken is triggered if there's an existing FCM token in the\r\n   * database and it can take 3 different actions:\r\n   * 1) Retrieve the existing FCM token from the database.\r\n   * 2) If VAPID details have changed: Delete the existing token and create a\r\n   * new one with the new VAPID key.\r\n   * 3) If the database cache is invalidated: Send a request to FCM to update\r\n   * the token, and to check if the token is still valid on FCM-side.\r\n   */\n\n\n  ControllerInterface.prototype.manageExistingToken = function (swReg, pushSubscription, publicVapidKey, tokenDetails) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isTokenValid, now;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            isTokenValid = isTokenStillValid(pushSubscription, publicVapidKey, tokenDetails);\n\n            if (isTokenValid) {\n              now = Date.now();\n\n              if (now < tokenDetails.createTime + TOKEN_EXPIRATION_MILLIS) {\n                return [2\n                /*return*/\n                , tokenDetails.fcmToken];\n              } else {\n                return [2\n                /*return*/\n                , this.updateToken(swReg, pushSubscription, publicVapidKey, tokenDetails)];\n              }\n            } // If the token is no longer valid (for example if the VAPID details\n            // have changed), delete the existing token from the FCM client and server\n            // database. No need to unsubscribe from the Service Worker as we have a\n            // good push subscription that we'd like to use in getNewToken.\n\n\n            return [4\n            /*yield*/\n            , this.deleteTokenFromDB(tokenDetails.fcmToken)];\n\n          case 1:\n            // If the token is no longer valid (for example if the VAPID details\n            // have changed), delete the existing token from the FCM client and server\n            // database. No need to unsubscribe from the Service Worker as we have a\n            // good push subscription that we'd like to use in getNewToken.\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this.getNewToken(swReg, pushSubscription, publicVapidKey)];\n        }\n      });\n    });\n  };\n\n  ControllerInterface.prototype.updateToken = function (swReg, pushSubscription, publicVapidKey, tokenDetails) {\n    return __awaiter(this, void 0, void 0, function () {\n      var updatedToken, allDetails, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 6]);\n\n            return [4\n            /*yield*/\n            , this.iidModel.updateToken(this.messagingSenderId, tokenDetails.fcmToken, tokenDetails.fcmPushSet, pushSubscription, publicVapidKey)];\n\n          case 1:\n            updatedToken = _a.sent();\n            allDetails = {\n              swScope: swReg.scope,\n              vapidKey: publicVapidKey,\n              fcmSenderId: this.messagingSenderId,\n              fcmToken: updatedToken,\n              fcmPushSet: tokenDetails.fcmPushSet,\n              createTime: Date.now(),\n              endpoint: pushSubscription.endpoint,\n              auth: pushSubscription.getKey('auth'),\n              p256dh: pushSubscription.getKey('p256dh')\n            };\n            return [4\n            /*yield*/\n            , this.tokenDetailsModel.saveTokenDetails(allDetails)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.vapidDetailsModel.saveVapidDetails(swReg.scope, publicVapidKey)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , updatedToken];\n\n          case 4:\n            e_1 = _a.sent();\n            return [4\n            /*yield*/\n            , this.deleteToken(tokenDetails.fcmToken)];\n\n          case 5:\n            _a.sent();\n\n            throw e_1;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ControllerInterface.prototype.getNewToken = function (swReg, pushSubscription, publicVapidKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenDetails, allDetails;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.iidModel.getToken(this.messagingSenderId, pushSubscription, publicVapidKey)];\n\n          case 1:\n            tokenDetails = _a.sent();\n            allDetails = {\n              swScope: swReg.scope,\n              vapidKey: publicVapidKey,\n              fcmSenderId: this.messagingSenderId,\n              fcmToken: tokenDetails.token,\n              fcmPushSet: tokenDetails.pushSet,\n              createTime: Date.now(),\n              endpoint: pushSubscription.endpoint,\n              auth: pushSubscription.getKey('auth'),\n              p256dh: pushSubscription.getKey('p256dh')\n            };\n            return [4\n            /*yield*/\n            , this.tokenDetailsModel.saveTokenDetails(allDetails)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.vapidDetailsModel.saveVapidDetails(swReg.scope, publicVapidKey)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , tokenDetails.token];\n        }\n      });\n    });\n  };\n  /**\r\n   * This method deletes tokens that the token manager looks after,\r\n   * unsubscribes the token from FCM  and then unregisters the push\r\n   * subscription if it exists. It returns a promise that indicates\r\n   * whether or not the unsubscribe request was processed successfully.\r\n   * @export\r\n   */\n\n\n  ControllerInterface.prototype.deleteToken = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var registration, pushSubscription;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Delete the token details from the database.\n            return [4\n            /*yield*/\n            , this.deleteTokenFromDB(token)];\n\n          case 1:\n            // Delete the token details from the database.\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.getSWRegistration_()];\n\n          case 2:\n            registration = _a.sent();\n            if (!registration) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , registration.pushManager.getSubscription()];\n\n          case 3:\n            pushSubscription = _a.sent();\n\n            if (pushSubscription) {\n              return [2\n              /*return*/\n              , pushSubscription.unsubscribe()];\n            }\n\n            _a.label = 4;\n\n          case 4:\n            // If there's no SW, consider it a success.\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n  /**\r\n   * This method will delete the token from the client database, and make a\r\n   * call to FCM to remove it from the server DB. Does not temper with the\r\n   * push subscription.\r\n   */\n\n\n  ControllerInterface.prototype.deleteTokenFromDB = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var details;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.tokenDetailsModel.deleteToken(token)];\n\n          case 1:\n            details = _a.sent();\n            return [4\n            /*yield*/\n            , this.iidModel.deleteToken(details.fcmSenderId, details.fcmToken, details.fcmPushSet)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets a PushSubscription for the current user.\r\n   */\n\n\n  ControllerInterface.prototype.getPushSubscription = function (swRegistration, publicVapidKey) {\n    return swRegistration.pushManager.getSubscription().then(function (subscription) {\n      if (subscription) {\n        return subscription;\n      }\n\n      return swRegistration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: publicVapidKey\n      });\n    });\n  }; //\n  // The following methods should only be available in the window.\n  //\n\n\n  ControllerInterface.prototype.requestPermission = function () {\n    throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);\n  };\n\n  ControllerInterface.prototype.useServiceWorker = function (registration) {\n    throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);\n  };\n\n  ControllerInterface.prototype.usePublicVapidKey = function (b64PublicKey) {\n    throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);\n  };\n\n  ControllerInterface.prototype.onMessage = function (nextOrObserver, error, completed) {\n    throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);\n  };\n\n  ControllerInterface.prototype.onTokenRefresh = function (nextOrObserver, error, completed) {\n    throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);\n  }; //\n  // The following methods are used by the service worker only.\n  //\n\n\n  ControllerInterface.prototype.setBackgroundMessageHandler = function (callback) {\n    throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_SW);\n  }; //\n  // The following methods are used by the service themselves and not exposed\n  // publicly or not expected to be used by developers.\n  //\n\n  /**\r\n   * This method is required to adhere to the Firebase interface.\r\n   * It closes any currently open indexdb database connections.\r\n   */\n\n\n  ControllerInterface.prototype.delete = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.tokenDetailsModel.closeDatabase(), this.vapidDetailsModel.closeDatabase()])];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the current Notification Permission state.\r\n   */\n\n\n  ControllerInterface.prototype.getNotificationPermission_ = function () {\n    // TODO: Remove the cast when this issue is fixed:\n    // https://github.com/Microsoft/TypeScript/issues/14701\n    // tslint:disable-next-line no-any\n    return Notification.permission;\n  };\n\n  ControllerInterface.prototype.getTokenDetailsModel = function () {\n    return this.tokenDetailsModel;\n  };\n\n  ControllerInterface.prototype.getVapidDetailsModel = function () {\n    return this.vapidDetailsModel;\n  }; // Visible for testing\n  // TODO: make protected\n\n\n  ControllerInterface.prototype.getIIDModel = function () {\n    return this.iidModel;\n  };\n\n  return ControllerInterface;\n}();\n/**\r\n * Checks if the tokenDetails match the details provided in the clients.\r\n */\n\n\nfunction isTokenStillValid(pushSubscription, publicVapidKey, tokenDetails) {\n  if (!isArrayBufferEqual(publicVapidKey.buffer, tokenDetails.vapidKey.buffer)) {\n    return false;\n  }\n\n  var isEndpointEqual = pushSubscription.endpoint === tokenDetails.endpoint;\n  var isAuthEqual = isArrayBufferEqual(pushSubscription.getKey('auth'), tokenDetails.auth);\n  var isP256dhEqual = isArrayBufferEqual(pushSubscription.getKey('p256dh'), tokenDetails.p256dh);\n  return isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar FCM_MSG = 'FCM_MSG';\n\nvar SWController =\n/** @class */\nfunction (_super) {\n  __extends(SWController, _super);\n\n  function SWController(app) {\n    var _this = _super.call(this, app) || this;\n\n    _this.bgMessageHandler = null;\n    self.addEventListener('push', function (e) {\n      _this.onPush(e);\n    });\n    self.addEventListener('pushsubscriptionchange', function (e) {\n      _this.onSubChange(e);\n    });\n    self.addEventListener('notificationclick', function (e) {\n      _this.onNotificationClick(e);\n    });\n    return _this;\n  } // Visible for testing\n  // TODO: Make private\n\n\n  SWController.prototype.onPush = function (event) {\n    event.waitUntil(this.onPush_(event));\n  }; // Visible for testing\n  // TODO: Make private\n\n\n  SWController.prototype.onSubChange = function (event) {\n    event.waitUntil(this.onSubChange_(event));\n  }; // Visible for testing\n  // TODO: Make private\n\n\n  SWController.prototype.onNotificationClick = function (event) {\n    event.waitUntil(this.onNotificationClick_(event));\n  };\n  /**\r\n   * A handler for push events that shows notifications based on the content of\r\n   * the payload.\r\n   *\r\n   * The payload must be a JSON-encoded Object with a `notification` key. The\r\n   * value of the `notification` property will be used as the NotificationOptions\r\n   * object passed to showNotification. Additionally, the `title` property of the\r\n   * notification object will be used as the title.\r\n   *\r\n   * If there is no notification data in the payload then no notification will be\r\n   * shown.\r\n   */\n\n\n  SWController.prototype.onPush_ = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var msgPayload, hasVisibleClients, notificationDetails, notificationTitle, reg;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!event.data) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            try {\n              msgPayload = event.data.json();\n            } catch (err) {\n              // Not JSON so not an FCM message\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , this.hasVisibleClients_()];\n\n          case 1:\n            hasVisibleClients = _a.sent();\n\n            if (hasVisibleClients) {\n              // Do not need to show a notification.\n              if (msgPayload.notification || this.bgMessageHandler) {\n                // Send to page\n                return [2\n                /*return*/\n                , this.sendMessageToWindowClients_(msgPayload)];\n              }\n\n              return [2\n              /*return*/\n              ];\n            }\n\n            notificationDetails = this.getNotificationData_(msgPayload);\n            if (!notificationDetails) return [3\n            /*break*/\n            , 3];\n            notificationTitle = notificationDetails.title || '';\n            return [4\n            /*yield*/\n            , this.getSWRegistration_()];\n\n          case 2:\n            reg = _a.sent();\n            return [2\n            /*return*/\n            , reg.showNotification(notificationTitle, notificationDetails)];\n\n          case 3:\n            if (!this.bgMessageHandler) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.bgMessageHandler(msgPayload)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SWController.prototype.onSubChange_ = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var registration, err_1, err_2, tokenDetailsModel, tokenDetails;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.getSWRegistration_()];\n\n          case 1:\n            registration = _a.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            err_1 = _a.sent();\n            throw errorFactory.create(ERROR_CODES.UNABLE_TO_RESUBSCRIBE, {\n              message: err_1\n            });\n\n          case 3:\n            _a.trys.push([3, 5,, 8]);\n\n            return [4\n            /*yield*/\n            , registration.pushManager.getSubscription()];\n\n          case 4:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 5:\n            err_2 = _a.sent();\n            tokenDetailsModel = this.getTokenDetailsModel();\n            return [4\n            /*yield*/\n            , tokenDetailsModel.getTokenDetailsFromSWScope(registration.scope)];\n\n          case 6:\n            tokenDetails = _a.sent();\n\n            if (!tokenDetails) {\n              // This should rarely occure, but could if indexedDB\n              // is corrupted or wiped\n              throw err_2;\n            } // Attempt to delete the token if we know it's bad\n\n\n            return [4\n            /*yield*/\n            , this.deleteToken(tokenDetails.fcmToken)];\n\n          case 7:\n            // Attempt to delete the token if we know it's bad\n            _a.sent();\n\n            throw err_2;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SWController.prototype.onNotificationClick_ = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var msgPayload, clickAction, windowClient, internalMsg;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!event.notification || !event.notification.data || !event.notification.data[FCM_MSG]) {\n              // Not an FCM notification, do nothing.\n              return [2\n              /*return*/\n              ];\n            } // Prevent other listeners from receiving the event\n\n\n            event.stopImmediatePropagation();\n            event.notification.close();\n            msgPayload = event.notification.data[FCM_MSG];\n\n            if (!msgPayload.notification) {\n              // Nothing to do.\n              return [2\n              /*return*/\n              ];\n            }\n\n            clickAction = msgPayload.notification.click_action;\n\n            if (!clickAction) {\n              // Nothing to do.\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , this.getWindowClient_(clickAction)];\n\n          case 1:\n            windowClient = _a.sent();\n            if (!!windowClient) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , self.clients.openWindow(clickAction)];\n\n          case 2:\n            // Unable to find window client so need to open one.\n            windowClient = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            return [4\n            /*yield*/\n            , windowClient.focus()];\n\n          case 4:\n            windowClient = _a.sent();\n            _a.label = 5;\n\n          case 5:\n            if (!windowClient) {\n              // Window Client will not be returned if it's for a third party origin.\n              return [2\n              /*return*/\n              ];\n            } // Delete notification data from payload before sending to the page.\n\n\n            delete msgPayload.notification;\n            internalMsg = createNewMsg(MessageType.NOTIFICATION_CLICKED, msgPayload); // Attempt to send a message to the client to handle the data\n            // Is affected by: https://github.com/slightlyoff/ServiceWorker/issues/728\n\n            return [2\n            /*return*/\n            , this.attemptToMessageClient_(windowClient, internalMsg)];\n        }\n      });\n    });\n  }; // Visible for testing\n  // TODO: Make private\n\n\n  SWController.prototype.getNotificationData_ = function (msgPayload) {\n    if (!msgPayload) {\n      return;\n    }\n\n    if (typeof msgPayload.notification !== 'object') {\n      return;\n    }\n\n    var notificationInformation = __assign({}, msgPayload.notification); // Put the message payload under FCM_MSG name so we can identify the\n    // notification as being an FCM notification vs a notification from\n    // somewhere else (i.e. normal web push or developer generated\n    // notification).\n\n\n    notificationInformation.data = (_a = {}, _a[FCM_MSG] = msgPayload, _a);\n    return notificationInformation;\n\n    var _a;\n  };\n  /**\r\n   * Calling setBackgroundMessageHandler will opt in to some specific\r\n   * behaviours.\r\n   * 1.) If a notification doesn't need to be shown due to a window already\r\n   * being visible, then push messages will be sent to the page.\r\n   * 2.) If a notification needs to be shown, and the message contains no\r\n   * notification data this method will be called\r\n   * and the promise it returns will be passed to event.waitUntil.\r\n   * If you do not set this callback then all push messages will let and the\r\n   * developer can handle them in a their own 'push' event callback\r\n   *\r\n   * @param callback The callback to be called when a push message is received\r\n   * and a notification must be shown. The callback will be given the data from\r\n   * the push message.\r\n   */\n\n\n  SWController.prototype.setBackgroundMessageHandler = function (callback) {\n    if (!callback || typeof callback !== 'function') {\n      throw errorFactory.create(ERROR_CODES.BG_HANDLER_FUNCTION_EXPECTED);\n    }\n\n    this.bgMessageHandler = callback;\n  };\n  /**\r\n   * @param url The URL to look for when focusing a client.\r\n   * @return Returns an existing window client or a newly opened WindowClient.\r\n   */\n  // Visible for testing\n  // TODO: Make private\n\n\n  SWController.prototype.getWindowClient_ = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parsedURL, clientList, suitableClient, i, parsedClientUrl;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parsedURL = new URL(url, self.location.href).href;\n            return [4\n            /*yield*/\n            , getClientList()];\n\n          case 1:\n            clientList = _a.sent();\n            suitableClient = null;\n\n            for (i = 0; i < clientList.length; i++) {\n              parsedClientUrl = new URL(clientList[i].url, self.location.href).href;\n\n              if (parsedClientUrl === parsedURL) {\n                suitableClient = clientList[i];\n                break;\n              }\n            }\n\n            return [2\n            /*return*/\n            , suitableClient];\n        }\n      });\n    });\n  };\n  /**\r\n   * This message will attempt to send the message to a window client.\r\n   * @param client The WindowClient to send the message to.\r\n   * @param message The message to send to the client.\r\n   * @returns Returns a promise that resolves after sending the message. This\r\n   * does not guarantee that the message was successfully received.\r\n   */\n  // Visible for testing\n  // TODO: Make private\n\n\n  SWController.prototype.attemptToMessageClient_ = function (client, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // NOTE: This returns a promise in case this API is abstracted later on to\n        // do additional work\n        if (!client) {\n          throw errorFactory.create(ERROR_CODES.NO_WINDOW_CLIENT_TO_MSG);\n        }\n\n        client.postMessage(message);\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\r\n   * @returns If there is currently a visible WindowClient, this method will\r\n   * resolve to true, otherwise false.\r\n   */\n  // Visible for testing\n  // TODO: Make private\n\n\n  SWController.prototype.hasVisibleClients_ = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientList;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getClientList()];\n\n          case 1:\n            clientList = _a.sent();\n            return [2\n            /*return*/\n            , clientList.some(function (client) {\n              return client.visibilityState === 'visible';\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * @param msgPayload The data from the push event that should be sent to all\r\n   * available pages.\r\n   * @returns Returns a promise that resolves once the message has been sent to\r\n   * all WindowClients.\r\n   */\n  // Visible for testing\n  // TODO: Make private\n\n\n  SWController.prototype.sendMessageToWindowClients_ = function (msgPayload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      var clientList, internalMsg;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getClientList()];\n\n          case 1:\n            clientList = _a.sent();\n            internalMsg = createNewMsg(MessageType.PUSH_MSG_RECEIVED, msgPayload);\n            return [4\n            /*yield*/\n            , Promise.all(clientList.map(function (client) {\n              return _this.attemptToMessageClient_(client, internalMsg);\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * This will register the default service worker and return the registration.\r\n   * @return he service worker registration to be used for the push service.\r\n   */\n\n\n  SWController.prototype.getSWRegistration_ = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , self.registration];\n      });\n    });\n  };\n  /**\r\n   * This will return the default VAPID key or the uint8array version of the\r\n   * public VAPID key provided by the developer.\r\n   */\n\n\n  SWController.prototype.getPublicVapidKey_ = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var swReg, vapidKeyFromDatabase;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getSWRegistration_()];\n\n          case 1:\n            swReg = _a.sent();\n\n            if (!swReg) {\n              throw errorFactory.create(ERROR_CODES.SW_REGISTRATION_EXPECTED);\n            }\n\n            return [4\n            /*yield*/\n            , this.getVapidDetailsModel().getVapidFromSWScope(swReg.scope)];\n\n          case 2:\n            vapidKeyFromDatabase = _a.sent();\n\n            if (vapidKeyFromDatabase == null) {\n              return [2\n              /*return*/\n              , DEFAULT_PUBLIC_VAPID_KEY];\n            }\n\n            return [2\n            /*return*/\n            , vapidKeyFromDatabase];\n        }\n      });\n    });\n  };\n\n  return SWController;\n}(ControllerInterface);\n\nfunction getClientList() {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n\n  });\n}\n\nfunction createNewMsg(msgType, msgData) {\n  return _a = {}, _a[MessageParameter.TYPE_OF_MSG] = msgType, _a[MessageParameter.DATA] = msgData, _a;\n\n  var _a;\n}\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nvar DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar WindowController =\n/** @class */\nfunction (_super) {\n  __extends(WindowController, _super);\n  /**\r\n   * A service that provides a MessagingService instance.\r\n   */\n\n\n  function WindowController(app) {\n    var _this = _super.call(this, app) || this;\n\n    _this.registrationToUse = null;\n    _this.publicVapidKeyToUse = null;\n    _this.manifestCheckPromise = null;\n    _this.messageObserver = null; // @ts-ignore: Unused variable error, this is not implemented yet.\n\n    _this.tokenRefreshObserver = null;\n    _this.onMessageInternal = createSubscribe(function (observer) {\n      _this.messageObserver = observer;\n    });\n    _this.onTokenRefreshInternal = createSubscribe(function (observer) {\n      _this.tokenRefreshObserver = observer;\n    });\n\n    _this.setupSWMessageListener_();\n\n    return _this;\n  }\n  /**\r\n   * This method returns an FCM token if it can be generated.\r\n   * The return promise will reject if the browser doesn't support\r\n   * FCM, if permission is denied for notifications or it's not\r\n   * possible to generate a token.\r\n   *\r\n   * @return Returns a promise that resolves to an FCM token or null if\r\n   * permission isn't granted.\r\n   */\n\n\n  WindowController.prototype.getToken = function () {\n    var _this = this; // Check that the required API's are available\n\n\n    if (!this.isSupported_()) {\n      return Promise.reject(errorFactory.create(ERROR_CODES.UNSUPPORTED_BROWSER));\n    }\n\n    return this.manifestCheck_().then(function () {\n      return _super.prototype.getToken.call(_this);\n    });\n  };\n  /**\r\n   * The method checks that a manifest is defined and has the correct GCM\r\n   * sender ID.\r\n   * @return Returns a promise that resolves if the manifest matches\r\n   * our required sender ID\r\n   */\n  // Visible for testing\n  // TODO: make private\n\n\n  WindowController.prototype.manifestCheck_ = function () {\n    if (this.manifestCheckPromise) {\n      return this.manifestCheckPromise;\n    }\n\n    var manifestTag = document.querySelector('link[rel=\"manifest\"]');\n\n    if (!manifestTag) {\n      this.manifestCheckPromise = Promise.resolve();\n    } else {\n      this.manifestCheckPromise = fetch(manifestTag.href).then(function (response) {\n        return response.json();\n      }).catch(function () {// If the download or parsing fails allow check.\n        // We only want to error if we KNOW that the gcm_sender_id is incorrect.\n      }).then(function (manifestContent) {\n        if (!manifestContent) {\n          return;\n        }\n\n        if (!manifestContent['gcm_sender_id']) {\n          return;\n        }\n\n        if (manifestContent['gcm_sender_id'] !== '103953800507') {\n          throw errorFactory.create(ERROR_CODES.INCORRECT_GCM_SENDER_ID);\n        }\n      });\n    }\n\n    return this.manifestCheckPromise;\n  };\n  /**\r\n   * Request permission if it is not currently granted\r\n   *\r\n   * @return Resolves if the permission was granted, otherwise rejects\r\n   */\n\n\n  WindowController.prototype.requestPermission = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if ( // TODO: Remove the cast when this issue is fixed:\n        // https://github.com/Microsoft/TypeScript/issues/14701\n        // tslint:disable-next-line no-any\n        Notification.permission === 'granted') {\n          return [2\n          /*return*/\n          ];\n        }\n\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var managePermissionResult = function managePermissionResult(result) {\n            if (result === 'granted') {\n              return resolve();\n            } else if (result === 'denied') {\n              return reject(errorFactory.create(ERROR_CODES.PERMISSION_BLOCKED));\n            } else {\n              return reject(errorFactory.create(ERROR_CODES.PERMISSION_DEFAULT));\n            }\n          }; // The Notification.requestPermission API was changed to\n          // return a promise so now have to handle both in case\n          // browsers stop support callbacks for promised version\n\n\n          var permissionPromise = Notification.requestPermission(managePermissionResult);\n\n          if (permissionPromise) {\n            // Prefer the promise version as it's the future API.\n            permissionPromise.then(managePermissionResult);\n          }\n        })];\n      });\n    });\n  };\n  /**\r\n   * This method allows a developer to override the default service worker and\r\n   * instead use a custom service worker.\r\n   *\r\n   * @param registration The service worker registration that should be used to\r\n   * receive the push messages.\r\n   */\n\n\n  WindowController.prototype.useServiceWorker = function (registration) {\n    if (!(registration instanceof ServiceWorkerRegistration)) {\n      throw errorFactory.create(ERROR_CODES.SW_REGISTRATION_EXPECTED);\n    }\n\n    if (this.registrationToUse != null) {\n      throw errorFactory.create(ERROR_CODES.USE_SW_BEFORE_GET_TOKEN);\n    }\n\n    this.registrationToUse = registration;\n  };\n  /**\r\n   * This method allows a developer to override the default vapid key\r\n   * and instead use a custom VAPID public key.\r\n   *\r\n   * @param publicKey A URL safe base64 encoded string.\r\n   */\n\n\n  WindowController.prototype.usePublicVapidKey = function (publicKey) {\n    if (typeof publicKey !== 'string') {\n      throw errorFactory.create(ERROR_CODES.INVALID_PUBLIC_VAPID_KEY);\n    }\n\n    if (this.publicVapidKeyToUse != null) {\n      throw errorFactory.create(ERROR_CODES.USE_PUBLIC_KEY_BEFORE_GET_TOKEN);\n    }\n\n    var parsedKey = base64ToArrayBuffer(publicKey);\n\n    if (parsedKey.length !== 65) {\n      throw errorFactory.create(ERROR_CODES.PUBLIC_KEY_DECRYPTION_FAILED);\n    }\n\n    this.publicVapidKeyToUse = parsedKey;\n  };\n  /**\r\n   * @export\r\n   * @param nextOrObserver An observer object or a function triggered on\r\n   * message.\r\n   * @param error A function triggered on message error.\r\n   * @param completed function triggered when the observer is removed.\r\n   * @return The unsubscribe function for the observer.\r\n   */\n\n\n  WindowController.prototype.onMessage = function (nextOrObserver, error, completed) {\n    if (typeof nextOrObserver === 'function') {\n      return this.onMessageInternal(nextOrObserver, error, completed);\n    } else {\n      return this.onMessageInternal(nextOrObserver);\n    }\n  };\n  /**\r\n   * @param nextOrObserver An observer object or a function triggered on token\r\n   * refresh.\r\n   * @param error A function triggered on token refresh error.\r\n   * @param completed function triggered when the observer is removed.\r\n   * @return The unsubscribe function for the observer.\r\n   */\n\n\n  WindowController.prototype.onTokenRefresh = function (nextOrObserver, error, completed) {\n    if (typeof nextOrObserver === 'function') {\n      return this.onTokenRefreshInternal(nextOrObserver, error, completed);\n    } else {\n      return this.onTokenRefreshInternal(nextOrObserver);\n    }\n  };\n  /**\r\n   * Given a registration, wait for the service worker it relates to\r\n   * become activer\r\n   * @param registration Registration to wait for service worker to become active\r\n   * @return Wait for service worker registration to become active\r\n   */\n  // Visible for testing\n  // TODO: Make private\n\n\n  WindowController.prototype.waitForRegistrationToActivate_ = function (registration) {\n    var serviceWorker = registration.installing || registration.waiting || registration.active;\n    return new Promise(function (resolve, reject) {\n      if (!serviceWorker) {\n        // This is a rare scenario but has occured in firefox\n        reject(errorFactory.create(ERROR_CODES.NO_SW_IN_REG));\n        return;\n      } // Because the Promise function is called on next tick there is a\n      // small chance that the worker became active or redundant already.\n\n\n      if (serviceWorker.state === 'activated') {\n        resolve(registration);\n        return;\n      }\n\n      if (serviceWorker.state === 'redundant') {\n        reject(errorFactory.create(ERROR_CODES.SW_REG_REDUNDANT));\n        return;\n      }\n\n      var stateChangeListener = function stateChangeListener() {\n        if (serviceWorker.state === 'activated') {\n          resolve(registration);\n        } else if (serviceWorker.state === 'redundant') {\n          reject(errorFactory.create(ERROR_CODES.SW_REG_REDUNDANT));\n        } else {\n          // Return early and wait to next state change\n          return;\n        }\n\n        serviceWorker.removeEventListener('statechange', stateChangeListener);\n      };\n\n      serviceWorker.addEventListener('statechange', stateChangeListener);\n    });\n  };\n  /**\r\n   * This will register the default service worker and return the registration\r\n   * @return The service worker registration to be used for the push service.\r\n   */\n\n\n  WindowController.prototype.getSWRegistration_ = function () {\n    var _this = this;\n\n    if (this.registrationToUse) {\n      return this.waitForRegistrationToActivate_(this.registrationToUse);\n    } // Make the registration null so we know useServiceWorker will not\n    // use a new service worker as registrationToUse is no longer undefined\n\n\n    this.registrationToUse = null;\n    return navigator.serviceWorker.register(DEFAULT_SW_PATH, {\n      scope: DEFAULT_SW_SCOPE\n    }).catch(function (err) {\n      throw errorFactory.create(ERROR_CODES.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: err.message\n      });\n    }).then(function (registration) {\n      return _this.waitForRegistrationToActivate_(registration).then(function () {\n        _this.registrationToUse = registration; // We update after activation due to an issue with Firefox v49 where\n        // a race condition occassionally causes the service work to not\n        // install\n\n        registration.update();\n        return registration;\n      });\n    });\n  };\n  /**\r\n   * This will return the default VAPID key or the uint8array version of the public VAPID key\r\n   * provided by the developer.\r\n   */\n\n\n  WindowController.prototype.getPublicVapidKey_ = function () {\n    if (this.publicVapidKeyToUse) {\n      return Promise.resolve(this.publicVapidKeyToUse);\n    }\n\n    return Promise.resolve(DEFAULT_PUBLIC_VAPID_KEY);\n  };\n  /**\r\n   * This method will set up a message listener to handle\r\n   * events from the service worker that should trigger\r\n   * events in the page.\r\n   */\n  // Visible for testing\n  // TODO: Make private\n\n\n  WindowController.prototype.setupSWMessageListener_ = function () {\n    var _this = this;\n\n    if (!('serviceWorker' in navigator)) {\n      return;\n    }\n\n    navigator.serviceWorker.addEventListener('message', function (event) {\n      if (!event.data || !event.data[MessageParameter.TYPE_OF_MSG]) {\n        // Not a message from FCM\n        return;\n      }\n\n      var workerPageMessage = event.data;\n\n      switch (workerPageMessage[MessageParameter.TYPE_OF_MSG]) {\n        case MessageType.PUSH_MSG_RECEIVED:\n        case MessageType.NOTIFICATION_CLICKED:\n          var pushMessage = workerPageMessage[MessageParameter.DATA];\n\n          if (_this.messageObserver) {\n            _this.messageObserver.next(pushMessage);\n          }\n\n          break;\n\n        default:\n          // Noop.\n          break;\n      }\n    }, false);\n  };\n  /**\r\n   * Checks to see if the required API's are valid or not.\r\n   * @return Returns true if the desired APIs are available.\r\n   */\n  // Visible for testing\n  // TODO: Make private\n\n\n  WindowController.prototype.isSupported_ = function () {\n    return 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n  };\n\n  return WindowController;\n}(ControllerInterface);\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerMessaging(instance) {\n  var messagingName = 'messaging';\n\n  var factoryMethod = function factoryMethod(app) {\n    if (self && 'ServiceWorkerGlobalScope' in self) {\n      return new SWController(app);\n    } // Assume we are in the window context.\n\n\n    return new WindowController(app);\n  };\n\n  var namespaceExports = {\n    // no-inline\n    Messaging: WindowController\n  };\n  instance.INTERNAL.registerService(messagingName, factoryMethod, namespaceExports);\n}\n\nregisterMessaging(firebase);\nexport { registerMessaging };","map":{"version":3,"sources":["C:/Users/junecsnp/Desktop/JuneWeb+Shoe/node_modules/@firebase/messaging/dist/index.esm.js"],"names":["ErrorFactory","createSubscribe","__extends","__awaiter","__generator","__assign","firebase","ERROR_CODES","AVAILABLE_IN_WINDOW","AVAILABLE_IN_SW","SHOULD_BE_INHERITED","BAD_SENDER_ID","INCORRECT_GCM_SENDER_ID","PERMISSION_DEFAULT","PERMISSION_BLOCKED","UNSUPPORTED_BROWSER","NOTIFICATIONS_BLOCKED","FAILED_DEFAULT_REGISTRATION","SW_REGISTRATION_EXPECTED","GET_SUBSCRIPTION_FAILED","INVALID_SAVED_TOKEN","SW_REG_REDUNDANT","TOKEN_SUBSCRIBE_FAILED","TOKEN_SUBSCRIBE_NO_TOKEN","TOKEN_SUBSCRIBE_NO_PUSH_SET","TOKEN_UNSUBSCRIBE_FAILED","TOKEN_UPDATE_FAILED","TOKEN_UPDATE_NO_TOKEN","USE_SW_BEFORE_GET_TOKEN","INVALID_DELETE_TOKEN","DELETE_TOKEN_NOT_FOUND","DELETE_SCOPE_NOT_FOUND","BG_HANDLER_FUNCTION_EXPECTED","NO_WINDOW_CLIENT_TO_MSG","UNABLE_TO_RESUBSCRIBE","NO_FCM_TOKEN_FOR_RESUBSCRIBE","FAILED_TO_DELETE_TOKEN","NO_SW_IN_REG","BAD_SCOPE","BAD_VAPID_KEY","BAD_SUBSCRIPTION","BAD_TOKEN","BAD_PUSH_SET","FAILED_DELETE_VAPID_KEY","INVALID_PUBLIC_VAPID_KEY","USE_PUBLIC_KEY_BEFORE_GET_TOKEN","PUBLIC_KEY_DECRYPTION_FAILED","ERROR_MAP","_a","errorFactory","DEFAULT_PUBLIC_VAPID_KEY","Uint8Array","ENDPOINT","MessageParameter","MessageType","isArrayBufferEqual","a","b","byteLength","viewA","DataView","viewB","i","getUint8","toBase64","arrayBuffer","uint8Version","btoa","String","fromCharCode","apply","arrayBufferToBase64","base64String","replace","IIDModel","prototype","getToken","senderId","subscription","publicVapidKey","p256dh","auth","fcmSubscribeBody","applicationPubKey","headers","subscribeOptions","responseData","response","err_1","message","label","getKey","endpoint","Headers","append","method","body","trys","push","fetch","sent","json","create","error","token","pushSet","updateToken","fcmToken","fcmPushSet","fcmUpdateBody","updateOptions","err_2","deleteToken","fcmUnsubscribeBody","unsubscribeOptions","err_3","base64ToArrayBuffer","padding","repeat","length","base64","rawData","window","atob","outputArray","charCodeAt","OLD_DB_NAME","OLD_OBJECT_STORE_NAME","handleDb","db","objectStoreNames","contains","transaction","objectStore","iidModel","openCursorRequest","openCursor","onerror","event","console","warn","onsuccess","cursor","result","tokenDetails","value","fcmSenderId","continue","close","indexedDB","deleteDatabase","cleanV1","request","open","DBInterface","dbPromise","get","key","createTransaction","getIndex","index","runRequest","idbIndex","put","delete","closeDatabase","mode","getDb","objectStoreName","promisify","Promise","resolve","reject","oncomplete","_this","dbName","dbVersion","onupgradeneeded","onDbUpgrade","TokenDetailsModel","_super","arguments","oldVersion","createObjectStore","keyPath","createIndex","unique","cursorRequest_1","newValue","createTime","Date","now","vapidKey","buffer","update","getTokenDetailsFromToken","validateInputs","getTokenDetailsFromSWScope","swScope","saveTokenDetails","details","input","ArrayBuffer","UNCOMPRESSED_PUBLIC_KEY_SIZE","VapidDetailsModel","getVapidFromSWScope","undefined","saveVapidDetails","deleteVapidDetails","SENDER_ID_OPTION_NAME","TOKEN_EXPIRATION_MILLIS","ControllerInterface","app","options","messagingSenderId","tokenDetailsModel","vapidDetailsModel","INTERNAL","currentPermission","swReg","pushSubscription","getNotificationPermission_","getSWRegistration_","getPublicVapidKey_","getPushSubscription","scope","manageExistingToken","getNewToken","isTokenValid","isTokenStillValid","deleteTokenFromDB","updatedToken","allDetails","e_1","registration","pushManager","getSubscription","unsubscribe","swRegistration","then","subscribe","userVisibleOnly","applicationServerKey","requestPermission","useServiceWorker","usePublicVapidKey","b64PublicKey","onMessage","nextOrObserver","completed","onTokenRefresh","setBackgroundMessageHandler","callback","all","Notification","permission","getTokenDetailsModel","getVapidDetailsModel","getIIDModel","isEndpointEqual","isAuthEqual","isP256dhEqual","FCM_MSG","SWController","call","bgMessageHandler","self","addEventListener","e","onPush","onSubChange","onNotificationClick","waitUntil","onPush_","onSubChange_","onNotificationClick_","msgPayload","hasVisibleClients","notificationDetails","notificationTitle","reg","data","err","hasVisibleClients_","notification","sendMessageToWindowClients_","getNotificationData_","title","showNotification","clickAction","windowClient","internalMsg","stopImmediatePropagation","click_action","getWindowClient_","clients","openWindow","focus","createNewMsg","NOTIFICATION_CLICKED","attemptToMessageClient_","notificationInformation","url","parsedURL","clientList","suitableClient","parsedClientUrl","URL","location","href","getClientList","client","postMessage","some","visibilityState","PUSH_MSG_RECEIVED","map","vapidKeyFromDatabase","matchAll","type","includeUncontrolled","msgType","msgData","TYPE_OF_MSG","DATA","DEFAULT_SW_PATH","DEFAULT_SW_SCOPE","WindowController","registrationToUse","publicVapidKeyToUse","manifestCheckPromise","messageObserver","tokenRefreshObserver","onMessageInternal","observer","onTokenRefreshInternal","setupSWMessageListener_","isSupported_","manifestCheck_","manifestTag","document","querySelector","catch","manifestContent","managePermissionResult","permissionPromise","ServiceWorkerRegistration","publicKey","parsedKey","waitForRegistrationToActivate_","serviceWorker","installing","waiting","active","state","stateChangeListener","removeEventListener","navigator","register","browserErrorMessage","workerPageMessage","pushMessage","next","hasOwnProperty","PushSubscription","registerMessaging","instance","messagingName","factoryMethod","namespaceExports","Messaging","registerService"],"mappings":"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","sourcesContent":["import { ErrorFactory, createSubscribe } from '@firebase/util';\nimport { __extends, __awaiter, __generator, __assign } from 'tslib';\nimport firebase from '@firebase/app';\n\n/**\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ERROR_CODES = {\r\n    AVAILABLE_IN_WINDOW: 'only-available-in-window',\r\n    AVAILABLE_IN_SW: 'only-available-in-sw',\r\n    SHOULD_BE_INHERITED: 'should-be-overriden',\r\n    BAD_SENDER_ID: 'bad-sender-id',\r\n    INCORRECT_GCM_SENDER_ID: 'incorrect-gcm-sender-id',\r\n    PERMISSION_DEFAULT: 'permission-default',\r\n    PERMISSION_BLOCKED: 'permission-blocked',\r\n    UNSUPPORTED_BROWSER: 'unsupported-browser',\r\n    NOTIFICATIONS_BLOCKED: 'notifications-blocked',\r\n    FAILED_DEFAULT_REGISTRATION: 'failed-serviceworker-registration',\r\n    SW_REGISTRATION_EXPECTED: 'sw-registration-expected',\r\n    GET_SUBSCRIPTION_FAILED: 'get-subscription-failed',\r\n    INVALID_SAVED_TOKEN: 'invalid-saved-token',\r\n    SW_REG_REDUNDANT: 'sw-reg-redundant',\r\n    TOKEN_SUBSCRIBE_FAILED: 'token-subscribe-failed',\r\n    TOKEN_SUBSCRIBE_NO_TOKEN: 'token-subscribe-no-token',\r\n    TOKEN_SUBSCRIBE_NO_PUSH_SET: 'token-subscribe-no-push-set',\r\n    TOKEN_UNSUBSCRIBE_FAILED: 'token-unsubscribe-failed',\r\n    TOKEN_UPDATE_FAILED: 'token-update-failed',\r\n    TOKEN_UPDATE_NO_TOKEN: 'token-update-no-token',\r\n    USE_SW_BEFORE_GET_TOKEN: 'use-sw-before-get-token',\r\n    INVALID_DELETE_TOKEN: 'invalid-delete-token',\r\n    DELETE_TOKEN_NOT_FOUND: 'delete-token-not-found',\r\n    DELETE_SCOPE_NOT_FOUND: 'delete-scope-not-found',\r\n    BG_HANDLER_FUNCTION_EXPECTED: 'bg-handler-function-expected',\r\n    NO_WINDOW_CLIENT_TO_MSG: 'no-window-client-to-msg',\r\n    UNABLE_TO_RESUBSCRIBE: 'unable-to-resubscribe',\r\n    NO_FCM_TOKEN_FOR_RESUBSCRIBE: 'no-fcm-token-for-resubscribe',\r\n    FAILED_TO_DELETE_TOKEN: 'failed-to-delete-token',\r\n    NO_SW_IN_REG: 'no-sw-in-reg',\r\n    BAD_SCOPE: 'bad-scope',\r\n    BAD_VAPID_KEY: 'bad-vapid-key',\r\n    BAD_SUBSCRIPTION: 'bad-subscription',\r\n    BAD_TOKEN: 'bad-token',\r\n    BAD_PUSH_SET: 'bad-push-set',\r\n    FAILED_DELETE_VAPID_KEY: 'failed-delete-vapid-key',\r\n    INVALID_PUBLIC_VAPID_KEY: 'invalid-public-vapid-key',\r\n    USE_PUBLIC_KEY_BEFORE_GET_TOKEN: 'use-public-key-before-get-token',\r\n    PUBLIC_KEY_DECRYPTION_FAILED: 'public-vapid-key-decryption-failed'\r\n};\r\nvar ERROR_MAP = (_a = {}, _a[ERROR_CODES.AVAILABLE_IN_WINDOW] = 'This method is available in a Window context.', _a[ERROR_CODES.AVAILABLE_IN_SW] = 'This method is available in a service worker ' + 'context.', _a[ERROR_CODES.SHOULD_BE_INHERITED] = 'This method should be overriden by ' + 'extended classes.', _a[ERROR_CODES.BAD_SENDER_ID] = \"Please ensure that 'messagingSenderId' is set \" +\r\n        'correctly in the options passed into firebase.initializeApp().', _a[ERROR_CODES.PERMISSION_DEFAULT] = 'The required permissions were not granted and ' + 'dismissed instead.', _a[ERROR_CODES.PERMISSION_BLOCKED] = 'The required permissions were not granted and ' + 'blocked instead.', _a[ERROR_CODES.UNSUPPORTED_BROWSER] = \"This browser doesn't support the API's \" +\r\n        'required to use the firebase SDK.', _a[ERROR_CODES.NOTIFICATIONS_BLOCKED] = 'Notifications have been blocked.', _a[ERROR_CODES.FAILED_DEFAULT_REGISTRATION] = 'We are unable to register the ' +\r\n        'default service worker. {$browserErrorMessage}', _a[ERROR_CODES.SW_REGISTRATION_EXPECTED] = 'A service worker registration was the ' + 'expected input.', _a[ERROR_CODES.GET_SUBSCRIPTION_FAILED] = 'There was an error when trying to get ' +\r\n        'any existing Push Subscriptions.', _a[ERROR_CODES.INVALID_SAVED_TOKEN] = 'Unable to access details of the saved token.', _a[ERROR_CODES.SW_REG_REDUNDANT] = 'The service worker being used for push was made ' + 'redundant.', _a[ERROR_CODES.TOKEN_SUBSCRIBE_FAILED] = 'A problem occured while subscribing the ' + 'user to FCM: {$message}', _a[ERROR_CODES.TOKEN_SUBSCRIBE_NO_TOKEN] = 'FCM returned no token when subscribing ' + 'the user to push.', _a[ERROR_CODES.TOKEN_SUBSCRIBE_NO_PUSH_SET] = 'FCM returned an invalid response ' + 'when getting an FCM token.', _a[ERROR_CODES.TOKEN_UNSUBSCRIBE_FAILED] = 'A problem occured while unsubscribing the ' + 'user from FCM: {$message}', _a[ERROR_CODES.TOKEN_UPDATE_FAILED] = 'A problem occured while updating the ' + 'user from FCM: {$message}', _a[ERROR_CODES.TOKEN_UPDATE_NO_TOKEN] = 'FCM returned no token when updating ' + 'the user to push.', _a[ERROR_CODES.USE_SW_BEFORE_GET_TOKEN] = 'The useServiceWorker() method may only be called once and must be ' +\r\n        'called before calling getToken() to ensure your service worker is used.', _a[ERROR_CODES.INVALID_DELETE_TOKEN] = 'You must pass a valid token into ' +\r\n        'deleteToken(), i.e. the token from getToken().', _a[ERROR_CODES.DELETE_TOKEN_NOT_FOUND] = 'The deletion attempt for token could not ' +\r\n        'be performed as the token was not found.', _a[ERROR_CODES.DELETE_SCOPE_NOT_FOUND] = 'The deletion attempt for service worker ' +\r\n        'scope could not be performed as the scope was not found.', _a[ERROR_CODES.BG_HANDLER_FUNCTION_EXPECTED] = 'The input to ' + 'setBackgroundMessageHandler() must be a function.', _a[ERROR_CODES.NO_WINDOW_CLIENT_TO_MSG] = 'An attempt was made to message a ' + 'non-existant window client.', _a[ERROR_CODES.UNABLE_TO_RESUBSCRIBE] = 'There was an error while re-subscribing ' +\r\n        'the FCM token for push messaging. Will have to resubscribe the ' +\r\n        'user on next visit. {$message}', _a[ERROR_CODES.NO_FCM_TOKEN_FOR_RESUBSCRIBE] = 'Could not find an FCM token ' +\r\n        'and as a result, unable to resubscribe. Will have to resubscribe the ' +\r\n        'user on next visit.', _a[ERROR_CODES.FAILED_TO_DELETE_TOKEN] = 'Unable to delete the currently saved token.', _a[ERROR_CODES.NO_SW_IN_REG] = 'Even though the service worker registration was ' +\r\n        'successful, there was a problem accessing the service worker itself.', _a[ERROR_CODES.INCORRECT_GCM_SENDER_ID] = \"Please change your web app manifest's \" +\r\n        \"'gcm_sender_id' value to '103953800507' to use Firebase messaging.\", _a[ERROR_CODES.BAD_SCOPE] = 'The service worker scope must be a string with at ' +\r\n        'least one character.', _a[ERROR_CODES.BAD_VAPID_KEY] = 'The public VAPID key is not a Uint8Array with 65 bytes.', _a[ERROR_CODES.BAD_SUBSCRIPTION] = 'The subscription must be a valid ' + 'PushSubscription.', _a[ERROR_CODES.BAD_TOKEN] = 'The FCM Token used for storage / lookup was not ' +\r\n        'a valid token string.', _a[ERROR_CODES.BAD_PUSH_SET] = 'The FCM push set used for storage / lookup was not ' +\r\n        'not a valid push set string.', _a[ERROR_CODES.FAILED_DELETE_VAPID_KEY] = 'The VAPID key could not be deleted.', _a[ERROR_CODES.INVALID_PUBLIC_VAPID_KEY] = 'The public VAPID key must be a string.', _a[ERROR_CODES.PUBLIC_KEY_DECRYPTION_FAILED] = 'The public VAPID key did not equal ' + '65 bytes when decrypted.', _a);\r\nvar errorFactory = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\r\nvar _a;\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DEFAULT_PUBLIC_VAPID_KEY = new Uint8Array([\r\n    0x04,\r\n    0x33,\r\n    0x94,\r\n    0xf7,\r\n    0xdf,\r\n    0xa1,\r\n    0xeb,\r\n    0xb1,\r\n    0xdc,\r\n    0x03,\r\n    0xa2,\r\n    0x5e,\r\n    0x15,\r\n    0x71,\r\n    0xdb,\r\n    0x48,\r\n    0xd3,\r\n    0x2e,\r\n    0xed,\r\n    0xed,\r\n    0xb2,\r\n    0x34,\r\n    0xdb,\r\n    0xb7,\r\n    0x47,\r\n    0x3a,\r\n    0x0c,\r\n    0x8f,\r\n    0xc4,\r\n    0xcc,\r\n    0xe1,\r\n    0x6f,\r\n    0x3c,\r\n    0x8c,\r\n    0x84,\r\n    0xdf,\r\n    0xab,\r\n    0xb6,\r\n    0x66,\r\n    0x3e,\r\n    0xf2,\r\n    0x0c,\r\n    0xd4,\r\n    0x8b,\r\n    0xfe,\r\n    0xe3,\r\n    0xf9,\r\n    0x76,\r\n    0x2f,\r\n    0x14,\r\n    0x1c,\r\n    0x63,\r\n    0x08,\r\n    0x6a,\r\n    0x6f,\r\n    0x2d,\r\n    0xb1,\r\n    0x1a,\r\n    0x95,\r\n    0xb0,\r\n    0xce,\r\n    0x37,\r\n    0xc0,\r\n    0x9c,\r\n    0x6e\r\n]);\r\nvar ENDPOINT = 'https://fcm.googleapis.com';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MessageParameter;\r\n(function (MessageParameter) {\r\n    MessageParameter[\"TYPE_OF_MSG\"] = \"firebase-messaging-msg-type\";\r\n    MessageParameter[\"DATA\"] = \"firebase-messaging-msg-data\";\r\n})(MessageParameter || (MessageParameter = {}));\r\nvar MessageType;\r\n(function (MessageType) {\r\n    MessageType[\"PUSH_MSG_RECEIVED\"] = \"push-msg-received\";\r\n    MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\r\n})(MessageType || (MessageType = {}));\n\n/**\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isArrayBufferEqual(a, b) {\r\n    if (a == null || b == null) {\r\n        return false;\r\n    }\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    if (a.byteLength !== b.byteLength) {\r\n        return false;\r\n    }\r\n    var viewA = new DataView(a);\r\n    var viewB = new DataView(b);\r\n    for (var i = 0; i < a.byteLength; i++) {\r\n        if (viewA.getUint8(i) !== viewB.getUint8(i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction toBase64(arrayBuffer) {\r\n    var uint8Version = new Uint8Array(arrayBuffer);\r\n    return btoa(String.fromCharCode.apply(null, uint8Version));\r\n}\r\nfunction arrayBufferToBase64(arrayBuffer) {\r\n    var base64String = toBase64(arrayBuffer);\r\n    return base64String\r\n        .replace(/=/g, '')\r\n        .replace(/\\+/g, '-')\r\n        .replace(/\\//g, '_');\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar IIDModel = /** @class */ (function () {\r\n    function IIDModel() {\r\n    }\r\n    IIDModel.prototype.getToken = function (senderId, subscription, publicVapidKey) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var p256dh, auth, fcmSubscribeBody, applicationPubKey, headers, subscribeOptions, responseData, response, err_1, message;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        p256dh = arrayBufferToBase64(subscription.getKey('p256dh'));\r\n                        auth = arrayBufferToBase64(subscription.getKey('auth'));\r\n                        fcmSubscribeBody = \"authorized_entity=\" + senderId + \"&\" +\r\n                            (\"endpoint=\" + subscription.endpoint + \"&\") +\r\n                            (\"encryption_key=\" + p256dh + \"&\") +\r\n                            (\"encryption_auth=\" + auth);\r\n                        if (publicVapidKey !== DEFAULT_PUBLIC_VAPID_KEY) {\r\n                            applicationPubKey = arrayBufferToBase64(publicVapidKey);\r\n                            fcmSubscribeBody += \"&application_pub_key=\" + applicationPubKey;\r\n                        }\r\n                        headers = new Headers();\r\n                        headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n                        subscribeOptions = {\r\n                            method: 'POST',\r\n                            headers: headers,\r\n                            body: fcmSubscribeBody\r\n                        };\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 4, , 5]);\r\n                        return [4 /*yield*/, fetch(ENDPOINT + '/fcm/connect/subscribe', subscribeOptions)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 3:\r\n                        responseData = _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        err_1 = _a.sent();\r\n                        throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_FAILED);\r\n                    case 5:\r\n                        if (responseData.error) {\r\n                            message = responseData.error.message;\r\n                            throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_FAILED, {\r\n                                message: message\r\n                            });\r\n                        }\r\n                        if (!responseData.token) {\r\n                            throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_NO_TOKEN);\r\n                        }\r\n                        if (!responseData.pushSet) {\r\n                            throw errorFactory.create(ERROR_CODES.TOKEN_SUBSCRIBE_NO_PUSH_SET);\r\n                        }\r\n                        return [2 /*return*/, {\r\n                                token: responseData.token,\r\n                                pushSet: responseData.pushSet\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the underlying token details for fcmToken.\r\n     */\r\n    IIDModel.prototype.updateToken = function (senderId, fcmToken, fcmPushSet, subscription, publicVapidKey) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var p256dh, auth, fcmUpdateBody, applicationPubKey, headers, updateOptions, responseData, response, err_2, message;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        p256dh = arrayBufferToBase64(subscription.getKey('p256dh'));\r\n                        auth = arrayBufferToBase64(subscription.getKey('auth'));\r\n                        fcmUpdateBody = \"push_set=\" + fcmPushSet + \"&\" +\r\n                            (\"token=\" + fcmToken + \"&\") +\r\n                            (\"authorized_entity=\" + senderId + \"&\") +\r\n                            (\"endpoint=\" + subscription.endpoint + \"&\") +\r\n                            (\"encryption_key=\" + p256dh + \"&\") +\r\n                            (\"encryption_auth=\" + auth);\r\n                        if (publicVapidKey !== DEFAULT_PUBLIC_VAPID_KEY) {\r\n                            applicationPubKey = arrayBufferToBase64(publicVapidKey);\r\n                            fcmUpdateBody += \"&application_pub_key=\" + applicationPubKey;\r\n                        }\r\n                        headers = new Headers();\r\n                        headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n                        updateOptions = {\r\n                            method: 'POST',\r\n                            headers: headers,\r\n                            body: fcmUpdateBody\r\n                        };\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 4, , 5]);\r\n                        return [4 /*yield*/, fetch(ENDPOINT + '/fcm/connect/subscribe', updateOptions)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 3:\r\n                        responseData = _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        err_2 = _a.sent();\r\n                        throw errorFactory.create(ERROR_CODES.TOKEN_UPDATE_FAILED);\r\n                    case 5:\r\n                        if (responseData.error) {\r\n                            message = responseData.error.message;\r\n                            throw errorFactory.create(ERROR_CODES.TOKEN_UPDATE_FAILED, {\r\n                                message: message\r\n                            });\r\n                        }\r\n                        if (!responseData.token) {\r\n                            throw errorFactory.create(ERROR_CODES.TOKEN_UPDATE_NO_TOKEN);\r\n                        }\r\n                        return [2 /*return*/, responseData.token];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Given a fcmToken, pushSet and messagingSenderId, delete an FCM token.\r\n     */\r\n    IIDModel.prototype.deleteToken = function (senderId, fcmToken, fcmPushSet) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var fcmUnsubscribeBody, headers, unsubscribeOptions, response, responseData, message, err_3;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        fcmUnsubscribeBody = \"authorized_entity=\" + senderId + \"&\" +\r\n                            (\"token=\" + fcmToken + \"&\") +\r\n                            (\"pushSet=\" + fcmPushSet);\r\n                        headers = new Headers();\r\n                        headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n                        unsubscribeOptions = {\r\n                            method: 'POST',\r\n                            headers: headers,\r\n                            body: fcmUnsubscribeBody\r\n                        };\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 4, , 5]);\r\n                        return [4 /*yield*/, fetch(ENDPOINT + '/fcm/connect/unsubscribe', unsubscribeOptions)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 3:\r\n                        responseData = _a.sent();\r\n                        if (responseData.error) {\r\n                            message = responseData.error.message;\r\n                            throw errorFactory.create(ERROR_CODES.TOKEN_UNSUBSCRIBE_FAILED, {\r\n                                message: message\r\n                            });\r\n                        }\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        err_3 = _a.sent();\r\n                        throw errorFactory.create(ERROR_CODES.TOKEN_UNSUBSCRIBE_FAILED);\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return IIDModel;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction base64ToArrayBuffer(base64String) {\r\n    var padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n    var base64 = (base64String + padding)\r\n        .replace(/\\-/g, '+')\r\n        .replace(/_/g, '/');\r\n    var rawData = window.atob(base64);\r\n    var outputArray = new Uint8Array(rawData.length);\r\n    for (var i = 0; i < rawData.length; ++i) {\r\n        outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar OLD_DB_NAME = 'undefined';\r\nvar OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\r\nfunction handleDb(db) {\r\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\r\n        // We found a database with the name 'undefined', but our expected object\r\n        // store isn't defined.\r\n        return;\r\n    }\r\n    var transaction = db.transaction(OLD_OBJECT_STORE_NAME);\r\n    var objectStore = transaction.objectStore(OLD_OBJECT_STORE_NAME);\r\n    var iidModel = new IIDModel();\r\n    var openCursorRequest = objectStore.openCursor();\r\n    openCursorRequest.onerror = function (event) {\r\n        // NOOP - Nothing we can do.\r\n        console.warn('Unable to cleanup old IDB.', event);\r\n    };\r\n    openCursorRequest.onsuccess = function () {\r\n        var cursor = openCursorRequest.result;\r\n        if (cursor) {\r\n            // cursor.value contains the current record being iterated through\r\n            // this is where you'd do something with the result\r\n            var tokenDetails = cursor.value;\r\n            iidModel.deleteToken(tokenDetails.fcmSenderId, tokenDetails.fcmToken, tokenDetails.fcmPushSet);\r\n            cursor.continue();\r\n        }\r\n        else {\r\n            db.close();\r\n            indexedDB.deleteDatabase(OLD_DB_NAME);\r\n        }\r\n    };\r\n}\r\nfunction cleanV1() {\r\n    var request = indexedDB.open(OLD_DB_NAME);\r\n    request.onerror = function (event) {\r\n        // NOOP - Nothing we can do.\r\n    };\r\n    request.onsuccess = function (event) {\r\n        var db = request.result;\r\n        handleDb(db);\r\n    };\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DBInterface = /** @class */ (function () {\r\n    function DBInterface() {\r\n        this.dbPromise = null;\r\n    }\r\n    /** Gets record(s) from the objectStore that match the given key. */\r\n    DBInterface.prototype.get = function (key) {\r\n        return this.createTransaction(function (objectStore) { return objectStore.get(key); });\r\n    };\r\n    /** Gets record(s) from the objectStore that match the given index. */\r\n    DBInterface.prototype.getIndex = function (index, key) {\r\n        function runRequest(objectStore) {\r\n            var idbIndex = objectStore.index(index);\r\n            return idbIndex.get(key);\r\n        }\r\n        return this.createTransaction(runRequest);\r\n    };\r\n    /** Assigns or overwrites the record for the given value. */\r\n    // tslint:disable-next-line:no-any IndexedDB values are of type \"any\"\r\n    DBInterface.prototype.put = function (value) {\r\n        return this.createTransaction(function (objectStore) { return objectStore.put(value); }, 'readwrite');\r\n    };\r\n    /** Deletes record(s) from the objectStore that match the given key. */\r\n    DBInterface.prototype.delete = function (key) {\r\n        return this.createTransaction(function (objectStore) { return objectStore.delete(key); }, 'readwrite');\r\n    };\r\n    /**\r\n     * Close the currently open database.\r\n     */\r\n    DBInterface.prototype.closeDatabase = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var db;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.dbPromise) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.dbPromise];\r\n                    case 1:\r\n                        db = _a.sent();\r\n                        db.close();\r\n                        this.dbPromise = null;\r\n                        _a.label = 2;\r\n                    case 2: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates an IndexedDB Transaction and passes its objectStore to the\r\n     * runRequest function, which runs the database request.\r\n     *\r\n     * @return Promise that resolves with the result of the runRequest function\r\n     */\r\n    DBInterface.prototype.createTransaction = function (runRequest, mode) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var db, transaction, request, result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getDb()];\r\n                    case 1:\r\n                        db = _a.sent();\r\n                        transaction = db.transaction(this.objectStoreName, mode);\r\n                        request = transaction.objectStore(this.objectStoreName);\r\n                        return [4 /*yield*/, promisify(runRequest(request))];\r\n                    case 2:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                                transaction.oncomplete = function () {\r\n                                    resolve(result);\r\n                                };\r\n                                transaction.onerror = function () {\r\n                                    reject(transaction.error);\r\n                                };\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /** Gets the cached db connection or opens a new one. */\r\n    DBInterface.prototype.getDb = function () {\r\n        var _this = this;\r\n        if (!this.dbPromise) {\r\n            this.dbPromise = new Promise(function (resolve, reject) {\r\n                var request = indexedDB.open(_this.dbName, _this.dbVersion);\r\n                request.onsuccess = function () {\r\n                    resolve(request.result);\r\n                };\r\n                request.onerror = function () {\r\n                    _this.dbPromise = null;\r\n                    reject(request.error);\r\n                };\r\n                request.onupgradeneeded = function (event) { return _this.onDbUpgrade(request, event); };\r\n            });\r\n        }\r\n        return this.dbPromise;\r\n    };\r\n    return DBInterface;\r\n}());\r\n/** Promisifies an IDBRequest. Resolves with the IDBRequest's result. */\r\nfunction promisify(request) {\r\n    return new Promise(function (resolve, reject) {\r\n        request.onsuccess = function () {\r\n            resolve(request.result);\r\n        };\r\n        request.onerror = function () {\r\n            reject(request.error);\r\n        };\r\n    });\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TokenDetailsModel = /** @class */ (function (_super) {\r\n    __extends(TokenDetailsModel, _super);\r\n    function TokenDetailsModel() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.dbName = 'fcm_token_details_db';\r\n        _this.dbVersion = 3;\r\n        _this.objectStoreName = 'fcm_token_object_Store';\r\n        return _this;\r\n    }\r\n    TokenDetailsModel.prototype.onDbUpgrade = function (request, event) {\r\n        var db = request.result;\r\n        // Lack of 'break' statements is intentional.\r\n        switch (event.oldVersion) {\r\n            case 0: {\r\n                // New IDB instance\r\n                var objectStore = db.createObjectStore(this.objectStoreName, {\r\n                    keyPath: 'swScope'\r\n                });\r\n                // Make sure the sender ID can be searched\r\n                objectStore.createIndex('fcmSenderId', 'fcmSenderId', {\r\n                    unique: false\r\n                });\r\n                objectStore.createIndex('fcmToken', 'fcmToken', { unique: true });\r\n            }\r\n            case 1: {\r\n                // Prior to version 2, we were using either 'fcm_token_details_db'\r\n                // or 'undefined' as the database name due to bug in the SDK\r\n                // So remove the old tokens and databases.\r\n                cleanV1();\r\n            }\r\n            case 2: {\r\n                var objectStore = request.transaction.objectStore(this.objectStoreName);\r\n                var cursorRequest_1 = objectStore.openCursor();\r\n                cursorRequest_1.onsuccess = function () {\r\n                    var cursor = cursorRequest_1.result;\r\n                    if (cursor) {\r\n                        var value = cursor.value;\r\n                        var newValue = __assign({}, value);\r\n                        if (!value.createTime) {\r\n                            newValue.createTime = Date.now();\r\n                        }\r\n                        if (typeof value.vapidKey === 'string') {\r\n                            newValue.vapidKey = base64ToArrayBuffer(value.vapidKey);\r\n                        }\r\n                        if (typeof value.auth === 'string') {\r\n                            newValue.auth = base64ToArrayBuffer(value.auth).buffer;\r\n                        }\r\n                        if (typeof value.auth === 'string') {\r\n                            newValue.p256dh = base64ToArrayBuffer(value.p256dh).buffer;\r\n                        }\r\n                        cursor.update(newValue);\r\n                        cursor.continue();\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Given a token, this method will look up the details in indexedDB.\r\n     */\r\n    TokenDetailsModel.prototype.getTokenDetailsFromToken = function (fcmToken) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (!fcmToken) {\r\n                    throw errorFactory.create(ERROR_CODES.BAD_TOKEN);\r\n                }\r\n                validateInputs({ fcmToken: fcmToken });\r\n                return [2 /*return*/, this.getIndex('fcmToken', fcmToken)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Given a service worker scope, this method will look up the details in\r\n     * indexedDB.\r\n     * @return The details associated with that token.\r\n     */\r\n    TokenDetailsModel.prototype.getTokenDetailsFromSWScope = function (swScope) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (!swScope) {\r\n                    throw errorFactory.create(ERROR_CODES.BAD_SCOPE);\r\n                }\r\n                validateInputs({ swScope: swScope });\r\n                return [2 /*return*/, this.get(swScope)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Save the details for the fcm token for re-use at a later date.\r\n     * @param input A plain js object containing args to save.\r\n     */\r\n    TokenDetailsModel.prototype.saveTokenDetails = function (tokenDetails) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (!tokenDetails.swScope) {\r\n                    throw errorFactory.create(ERROR_CODES.BAD_SCOPE);\r\n                }\r\n                if (!tokenDetails.vapidKey) {\r\n                    throw errorFactory.create(ERROR_CODES.BAD_VAPID_KEY);\r\n                }\r\n                if (!tokenDetails.endpoint || !tokenDetails.auth || !tokenDetails.p256dh) {\r\n                    throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);\r\n                }\r\n                if (!tokenDetails.fcmSenderId) {\r\n                    throw errorFactory.create(ERROR_CODES.BAD_SENDER_ID);\r\n                }\r\n                if (!tokenDetails.fcmToken) {\r\n                    throw errorFactory.create(ERROR_CODES.BAD_TOKEN);\r\n                }\r\n                if (!tokenDetails.fcmPushSet) {\r\n                    throw errorFactory.create(ERROR_CODES.BAD_PUSH_SET);\r\n                }\r\n                validateInputs(tokenDetails);\r\n                return [2 /*return*/, this.put(tokenDetails)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This method deletes details of the current FCM token.\r\n     * It's returning a promise in case we need to move to an async\r\n     * method for deleting at a later date.\r\n     *\r\n     * @return Resolves once the FCM token details have been deleted and returns\r\n     * the deleted details.\r\n     */\r\n    TokenDetailsModel.prototype.deleteToken = function (token) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var details;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (typeof token !== 'string' || token.length === 0) {\r\n                            return [2 /*return*/, Promise.reject(errorFactory.create(ERROR_CODES.INVALID_DELETE_TOKEN))];\r\n                        }\r\n                        return [4 /*yield*/, this.getTokenDetailsFromToken(token)];\r\n                    case 1:\r\n                        details = _a.sent();\r\n                        if (!details) {\r\n                            throw errorFactory.create(ERROR_CODES.DELETE_TOKEN_NOT_FOUND);\r\n                        }\r\n                        return [4 /*yield*/, this.delete(details.swScope)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, details];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return TokenDetailsModel;\r\n}(DBInterface));\r\n/**\r\n * This method takes an object and will check for known arguments and\r\n * validate the input.\r\n * @return Promise that resolves if input is valid, rejects otherwise.\r\n */\r\nfunction validateInputs(input) {\r\n    if (input.fcmToken) {\r\n        if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {\r\n            throw errorFactory.create(ERROR_CODES.BAD_TOKEN);\r\n        }\r\n    }\r\n    if (input.swScope) {\r\n        if (typeof input.swScope !== 'string' || input.swScope.length === 0) {\r\n            throw errorFactory.create(ERROR_CODES.BAD_SCOPE);\r\n        }\r\n    }\r\n    if (input.vapidKey) {\r\n        if (!(input.vapidKey instanceof Uint8Array) ||\r\n            input.vapidKey.length !== 65) {\r\n            throw errorFactory.create(ERROR_CODES.BAD_VAPID_KEY);\r\n        }\r\n    }\r\n    if (input.endpoint) {\r\n        if (typeof input.endpoint !== 'string' || input.endpoint.length === 0) {\r\n            throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);\r\n        }\r\n    }\r\n    if (input.auth) {\r\n        if (!(input.auth instanceof ArrayBuffer)) {\r\n            throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);\r\n        }\r\n    }\r\n    if (input.p256dh) {\r\n        if (!(input.p256dh instanceof ArrayBuffer)) {\r\n            throw errorFactory.create(ERROR_CODES.BAD_SUBSCRIPTION);\r\n        }\r\n    }\r\n    if (input.fcmSenderId) {\r\n        if (typeof input.fcmSenderId !== 'string' ||\r\n            input.fcmSenderId.length === 0) {\r\n            throw errorFactory.create(ERROR_CODES.BAD_SENDER_ID);\r\n        }\r\n    }\r\n    if (input.fcmPushSet) {\r\n        if (typeof input.fcmPushSet !== 'string' || input.fcmPushSet.length === 0) {\r\n            throw errorFactory.create(ERROR_CODES.BAD_PUSH_SET);\r\n        }\r\n    }\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;\r\nvar VapidDetailsModel = /** @class */ (function (_super) {\r\n    __extends(VapidDetailsModel, _super);\r\n    function VapidDetailsModel() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.dbName = 'fcm_vapid_details_db';\r\n        _this.dbVersion = 1;\r\n        _this.objectStoreName = 'fcm_vapid_object_Store';\r\n        return _this;\r\n    }\r\n    VapidDetailsModel.prototype.onDbUpgrade = function (request) {\r\n        var db = request.result;\r\n        db.createObjectStore(this.objectStoreName, { keyPath: 'swScope' });\r\n    };\r\n    /**\r\n     * Given a service worker scope, this method will look up the vapid key\r\n     * in indexedDB.\r\n     */\r\n    VapidDetailsModel.prototype.getVapidFromSWScope = function (swScope) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (typeof swScope !== 'string' || swScope.length === 0) {\r\n                            throw errorFactory.create(ERROR_CODES.BAD_SCOPE);\r\n                        }\r\n                        return [4 /*yield*/, this.get(swScope)];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result ? result.vapidKey : undefined];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Save a vapid key against a swScope for later date.\r\n     */\r\n    VapidDetailsModel.prototype.saveVapidDetails = function (swScope, vapidKey) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var details;\r\n            return __generator(this, function (_a) {\r\n                if (typeof swScope !== 'string' || swScope.length === 0) {\r\n                    throw errorFactory.create(ERROR_CODES.BAD_SCOPE);\r\n                }\r\n                if (vapidKey === null || vapidKey.length !== UNCOMPRESSED_PUBLIC_KEY_SIZE) {\r\n                    throw errorFactory.create(ERROR_CODES.BAD_VAPID_KEY);\r\n                }\r\n                details = {\r\n                    swScope: swScope,\r\n                    vapidKey: vapidKey\r\n                };\r\n                return [2 /*return*/, this.put(details)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This method deletes details of the current FCM VAPID key for a SW scope.\r\n     * Resolves once the scope/vapid details have been deleted and returns the\r\n     * deleted vapid key.\r\n     */\r\n    VapidDetailsModel.prototype.deleteVapidDetails = function (swScope) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var vapidKey;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getVapidFromSWScope(swScope)];\r\n                    case 1:\r\n                        vapidKey = _a.sent();\r\n                        if (!vapidKey) {\r\n                            throw errorFactory.create(ERROR_CODES.DELETE_SCOPE_NOT_FOUND);\r\n                        }\r\n                        return [4 /*yield*/, this.delete(swScope)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, vapidKey];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return VapidDetailsModel;\r\n}(DBInterface));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar SENDER_ID_OPTION_NAME = 'messagingSenderId';\r\n// Database cache should be invalidated once a week.\r\nvar TOKEN_EXPIRATION_MILLIS = 7 * 24 * 60 * 60 * 1000; // 7 days\r\nvar ControllerInterface = /** @class */ (function () {\r\n    /**\r\n     * An interface of the Messaging Service API\r\n     */\r\n    function ControllerInterface(app) {\r\n        var _this = this;\r\n        if (!app.options[SENDER_ID_OPTION_NAME] ||\r\n            typeof app.options[SENDER_ID_OPTION_NAME] !== 'string') {\r\n            throw errorFactory.create(ERROR_CODES.BAD_SENDER_ID);\r\n        }\r\n        this.messagingSenderId = app.options[SENDER_ID_OPTION_NAME];\r\n        this.tokenDetailsModel = new TokenDetailsModel();\r\n        this.vapidDetailsModel = new VapidDetailsModel();\r\n        this.iidModel = new IIDModel();\r\n        this.app = app;\r\n        this.INTERNAL = {\r\n            delete: function () { return _this.delete(); }\r\n        };\r\n    }\r\n    /**\r\n     * @export\r\n     */\r\n    ControllerInterface.prototype.getToken = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var currentPermission, swReg, publicVapidKey, pushSubscription, tokenDetails;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        currentPermission = this.getNotificationPermission_();\r\n                        if (currentPermission !== 'granted') {\r\n                            if (currentPermission === 'denied') {\r\n                                return [2 /*return*/, Promise.reject(errorFactory.create(ERROR_CODES.NOTIFICATIONS_BLOCKED))];\r\n                            }\r\n                            // We must wait for permission to be granted\r\n                            return [2 /*return*/, Promise.resolve(null)];\r\n                        }\r\n                        return [4 /*yield*/, this.getSWRegistration_()];\r\n                    case 1:\r\n                        swReg = _a.sent();\r\n                        return [4 /*yield*/, this.getPublicVapidKey_()];\r\n                    case 2:\r\n                        publicVapidKey = _a.sent();\r\n                        return [4 /*yield*/, this.getPushSubscription(swReg, publicVapidKey)];\r\n                    case 3:\r\n                        pushSubscription = _a.sent();\r\n                        return [4 /*yield*/, this.tokenDetailsModel.getTokenDetailsFromSWScope(swReg.scope)];\r\n                    case 4:\r\n                        tokenDetails = _a.sent();\r\n                        if (tokenDetails) {\r\n                            return [2 /*return*/, this.manageExistingToken(swReg, pushSubscription, publicVapidKey, tokenDetails)];\r\n                        }\r\n                        return [2 /*return*/, this.getNewToken(swReg, pushSubscription, publicVapidKey)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * manageExistingToken is triggered if there's an existing FCM token in the\r\n     * database and it can take 3 different actions:\r\n     * 1) Retrieve the existing FCM token from the database.\r\n     * 2) If VAPID details have changed: Delete the existing token and create a\r\n     * new one with the new VAPID key.\r\n     * 3) If the database cache is invalidated: Send a request to FCM to update\r\n     * the token, and to check if the token is still valid on FCM-side.\r\n     */\r\n    ControllerInterface.prototype.manageExistingToken = function (swReg, pushSubscription, publicVapidKey, tokenDetails) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var isTokenValid, now;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        isTokenValid = isTokenStillValid(pushSubscription, publicVapidKey, tokenDetails);\r\n                        if (isTokenValid) {\r\n                            now = Date.now();\r\n                            if (now < tokenDetails.createTime + TOKEN_EXPIRATION_MILLIS) {\r\n                                return [2 /*return*/, tokenDetails.fcmToken];\r\n                            }\r\n                            else {\r\n                                return [2 /*return*/, this.updateToken(swReg, pushSubscription, publicVapidKey, tokenDetails)];\r\n                            }\r\n                        }\r\n                        // If the token is no longer valid (for example if the VAPID details\r\n                        // have changed), delete the existing token from the FCM client and server\r\n                        // database. No need to unsubscribe from the Service Worker as we have a\r\n                        // good push subscription that we'd like to use in getNewToken.\r\n                        return [4 /*yield*/, this.deleteTokenFromDB(tokenDetails.fcmToken)];\r\n                    case 1:\r\n                        // If the token is no longer valid (for example if the VAPID details\r\n                        // have changed), delete the existing token from the FCM client and server\r\n                        // database. No need to unsubscribe from the Service Worker as we have a\r\n                        // good push subscription that we'd like to use in getNewToken.\r\n                        _a.sent();\r\n                        return [2 /*return*/, this.getNewToken(swReg, pushSubscription, publicVapidKey)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ControllerInterface.prototype.updateToken = function (swReg, pushSubscription, publicVapidKey, tokenDetails) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var updatedToken, allDetails, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 4, , 6]);\r\n                        return [4 /*yield*/, this.iidModel.updateToken(this.messagingSenderId, tokenDetails.fcmToken, tokenDetails.fcmPushSet, pushSubscription, publicVapidKey)];\r\n                    case 1:\r\n                        updatedToken = _a.sent();\r\n                        allDetails = {\r\n                            swScope: swReg.scope,\r\n                            vapidKey: publicVapidKey,\r\n                            fcmSenderId: this.messagingSenderId,\r\n                            fcmToken: updatedToken,\r\n                            fcmPushSet: tokenDetails.fcmPushSet,\r\n                            createTime: Date.now(),\r\n                            endpoint: pushSubscription.endpoint,\r\n                            auth: pushSubscription.getKey('auth'),\r\n                            p256dh: pushSubscription.getKey('p256dh')\r\n                        };\r\n                        return [4 /*yield*/, this.tokenDetailsModel.saveTokenDetails(allDetails)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.vapidDetailsModel.saveVapidDetails(swReg.scope, publicVapidKey)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/, updatedToken];\r\n                    case 4:\r\n                        e_1 = _a.sent();\r\n                        return [4 /*yield*/, this.deleteToken(tokenDetails.fcmToken)];\r\n                    case 5:\r\n                        _a.sent();\r\n                        throw e_1;\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ControllerInterface.prototype.getNewToken = function (swReg, pushSubscription, publicVapidKey) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var tokenDetails, allDetails;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.iidModel.getToken(this.messagingSenderId, pushSubscription, publicVapidKey)];\r\n                    case 1:\r\n                        tokenDetails = _a.sent();\r\n                        allDetails = {\r\n                            swScope: swReg.scope,\r\n                            vapidKey: publicVapidKey,\r\n                            fcmSenderId: this.messagingSenderId,\r\n                            fcmToken: tokenDetails.token,\r\n                            fcmPushSet: tokenDetails.pushSet,\r\n                            createTime: Date.now(),\r\n                            endpoint: pushSubscription.endpoint,\r\n                            auth: pushSubscription.getKey('auth'),\r\n                            p256dh: pushSubscription.getKey('p256dh')\r\n                        };\r\n                        return [4 /*yield*/, this.tokenDetailsModel.saveTokenDetails(allDetails)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.vapidDetailsModel.saveVapidDetails(swReg.scope, publicVapidKey)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/, tokenDetails.token];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This method deletes tokens that the token manager looks after,\r\n     * unsubscribes the token from FCM  and then unregisters the push\r\n     * subscription if it exists. It returns a promise that indicates\r\n     * whether or not the unsubscribe request was processed successfully.\r\n     * @export\r\n     */\r\n    ControllerInterface.prototype.deleteToken = function (token) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var registration, pushSubscription;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: \r\n                    // Delete the token details from the database.\r\n                    return [4 /*yield*/, this.deleteTokenFromDB(token)];\r\n                    case 1:\r\n                        // Delete the token details from the database.\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.getSWRegistration_()];\r\n                    case 2:\r\n                        registration = _a.sent();\r\n                        if (!registration) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, registration.pushManager.getSubscription()];\r\n                    case 3:\r\n                        pushSubscription = _a.sent();\r\n                        if (pushSubscription) {\r\n                            return [2 /*return*/, pushSubscription.unsubscribe()];\r\n                        }\r\n                        _a.label = 4;\r\n                    case 4: \r\n                    // If there's no SW, consider it a success.\r\n                    return [2 /*return*/, true];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This method will delete the token from the client database, and make a\r\n     * call to FCM to remove it from the server DB. Does not temper with the\r\n     * push subscription.\r\n     */\r\n    ControllerInterface.prototype.deleteTokenFromDB = function (token) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var details;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.tokenDetailsModel.deleteToken(token)];\r\n                    case 1:\r\n                        details = _a.sent();\r\n                        return [4 /*yield*/, this.iidModel.deleteToken(details.fcmSenderId, details.fcmToken, details.fcmPushSet)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Gets a PushSubscription for the current user.\r\n     */\r\n    ControllerInterface.prototype.getPushSubscription = function (swRegistration, publicVapidKey) {\r\n        return swRegistration.pushManager.getSubscription().then(function (subscription) {\r\n            if (subscription) {\r\n                return subscription;\r\n            }\r\n            return swRegistration.pushManager.subscribe({\r\n                userVisibleOnly: true,\r\n                applicationServerKey: publicVapidKey\r\n            });\r\n        });\r\n    };\r\n    //\r\n    // The following methods should only be available in the window.\r\n    //\r\n    ControllerInterface.prototype.requestPermission = function () {\r\n        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);\r\n    };\r\n    ControllerInterface.prototype.useServiceWorker = function (registration) {\r\n        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);\r\n    };\r\n    ControllerInterface.prototype.usePublicVapidKey = function (b64PublicKey) {\r\n        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);\r\n    };\r\n    ControllerInterface.prototype.onMessage = function (nextOrObserver, error, completed) {\r\n        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);\r\n    };\r\n    ControllerInterface.prototype.onTokenRefresh = function (nextOrObserver, error, completed) {\r\n        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_WINDOW);\r\n    };\r\n    //\r\n    // The following methods are used by the service worker only.\r\n    //\r\n    ControllerInterface.prototype.setBackgroundMessageHandler = function (callback) {\r\n        throw errorFactory.create(ERROR_CODES.AVAILABLE_IN_SW);\r\n    };\r\n    //\r\n    // The following methods are used by the service themselves and not exposed\r\n    // publicly or not expected to be used by developers.\r\n    //\r\n    /**\r\n     * This method is required to adhere to the Firebase interface.\r\n     * It closes any currently open indexdb database connections.\r\n     */\r\n    ControllerInterface.prototype.delete = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, Promise.all([\r\n                            this.tokenDetailsModel.closeDatabase(),\r\n                            this.vapidDetailsModel.closeDatabase()\r\n                        ])];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns the current Notification Permission state.\r\n     */\r\n    ControllerInterface.prototype.getNotificationPermission_ = function () {\r\n        // TODO: Remove the cast when this issue is fixed:\r\n        // https://github.com/Microsoft/TypeScript/issues/14701\r\n        // tslint:disable-next-line no-any\r\n        return Notification.permission;\r\n    };\r\n    ControllerInterface.prototype.getTokenDetailsModel = function () {\r\n        return this.tokenDetailsModel;\r\n    };\r\n    ControllerInterface.prototype.getVapidDetailsModel = function () {\r\n        return this.vapidDetailsModel;\r\n    };\r\n    // Visible for testing\r\n    // TODO: make protected\r\n    ControllerInterface.prototype.getIIDModel = function () {\r\n        return this.iidModel;\r\n    };\r\n    return ControllerInterface;\r\n}());\r\n/**\r\n * Checks if the tokenDetails match the details provided in the clients.\r\n */\r\nfunction isTokenStillValid(pushSubscription, publicVapidKey, tokenDetails) {\r\n    if (!isArrayBufferEqual(publicVapidKey.buffer, tokenDetails.vapidKey.buffer)) {\r\n        return false;\r\n    }\r\n    var isEndpointEqual = pushSubscription.endpoint === tokenDetails.endpoint;\r\n    var isAuthEqual = isArrayBufferEqual(pushSubscription.getKey('auth'), tokenDetails.auth);\r\n    var isP256dhEqual = isArrayBufferEqual(pushSubscription.getKey('p256dh'), tokenDetails.p256dh);\r\n    return isEndpointEqual && isAuthEqual && isP256dhEqual;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar FCM_MSG = 'FCM_MSG';\r\nvar SWController = /** @class */ (function (_super) {\r\n    __extends(SWController, _super);\r\n    function SWController(app) {\r\n        var _this = _super.call(this, app) || this;\r\n        _this.bgMessageHandler = null;\r\n        self.addEventListener('push', function (e) {\r\n            _this.onPush(e);\r\n        });\r\n        self.addEventListener('pushsubscriptionchange', function (e) {\r\n            _this.onSubChange(e);\r\n        });\r\n        self.addEventListener('notificationclick', function (e) {\r\n            _this.onNotificationClick(e);\r\n        });\r\n        return _this;\r\n    }\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    SWController.prototype.onPush = function (event) {\r\n        event.waitUntil(this.onPush_(event));\r\n    };\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    SWController.prototype.onSubChange = function (event) {\r\n        event.waitUntil(this.onSubChange_(event));\r\n    };\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    SWController.prototype.onNotificationClick = function (event) {\r\n        event.waitUntil(this.onNotificationClick_(event));\r\n    };\r\n    /**\r\n     * A handler for push events that shows notifications based on the content of\r\n     * the payload.\r\n     *\r\n     * The payload must be a JSON-encoded Object with a `notification` key. The\r\n     * value of the `notification` property will be used as the NotificationOptions\r\n     * object passed to showNotification. Additionally, the `title` property of the\r\n     * notification object will be used as the title.\r\n     *\r\n     * If there is no notification data in the payload then no notification will be\r\n     * shown.\r\n     */\r\n    SWController.prototype.onPush_ = function (event) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var msgPayload, hasVisibleClients, notificationDetails, notificationTitle, reg;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!event.data) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        try {\r\n                            msgPayload = event.data.json();\r\n                        }\r\n                        catch (err) {\r\n                            // Not JSON so not an FCM message\r\n                            return [2 /*return*/];\r\n                        }\r\n                        return [4 /*yield*/, this.hasVisibleClients_()];\r\n                    case 1:\r\n                        hasVisibleClients = _a.sent();\r\n                        if (hasVisibleClients) {\r\n                            // Do not need to show a notification.\r\n                            if (msgPayload.notification || this.bgMessageHandler) {\r\n                                // Send to page\r\n                                return [2 /*return*/, this.sendMessageToWindowClients_(msgPayload)];\r\n                            }\r\n                            return [2 /*return*/];\r\n                        }\r\n                        notificationDetails = this.getNotificationData_(msgPayload);\r\n                        if (!notificationDetails) return [3 /*break*/, 3];\r\n                        notificationTitle = notificationDetails.title || '';\r\n                        return [4 /*yield*/, this.getSWRegistration_()];\r\n                    case 2:\r\n                        reg = _a.sent();\r\n                        return [2 /*return*/, reg.showNotification(notificationTitle, notificationDetails)];\r\n                    case 3:\r\n                        if (!this.bgMessageHandler) return [3 /*break*/, 5];\r\n                        return [4 /*yield*/, this.bgMessageHandler(msgPayload)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SWController.prototype.onSubChange_ = function (event) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var registration, err_1, err_2, tokenDetailsModel, tokenDetails;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.getSWRegistration_()];\r\n                    case 1:\r\n                        registration = _a.sent();\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        err_1 = _a.sent();\r\n                        throw errorFactory.create(ERROR_CODES.UNABLE_TO_RESUBSCRIBE, {\r\n                            message: err_1\r\n                        });\r\n                    case 3:\r\n                        _a.trys.push([3, 5, , 8]);\r\n                        return [4 /*yield*/, registration.pushManager.getSubscription()];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 8];\r\n                    case 5:\r\n                        err_2 = _a.sent();\r\n                        tokenDetailsModel = this.getTokenDetailsModel();\r\n                        return [4 /*yield*/, tokenDetailsModel.getTokenDetailsFromSWScope(registration.scope)];\r\n                    case 6:\r\n                        tokenDetails = _a.sent();\r\n                        if (!tokenDetails) {\r\n                            // This should rarely occure, but could if indexedDB\r\n                            // is corrupted or wiped\r\n                            throw err_2;\r\n                        }\r\n                        // Attempt to delete the token if we know it's bad\r\n                        return [4 /*yield*/, this.deleteToken(tokenDetails.fcmToken)];\r\n                    case 7:\r\n                        // Attempt to delete the token if we know it's bad\r\n                        _a.sent();\r\n                        throw err_2;\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SWController.prototype.onNotificationClick_ = function (event) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var msgPayload, clickAction, windowClient, internalMsg;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!event.notification ||\r\n                            !event.notification.data ||\r\n                            !event.notification.data[FCM_MSG]) {\r\n                            // Not an FCM notification, do nothing.\r\n                            return [2 /*return*/];\r\n                        }\r\n                        // Prevent other listeners from receiving the event\r\n                        event.stopImmediatePropagation();\r\n                        event.notification.close();\r\n                        msgPayload = event.notification.data[FCM_MSG];\r\n                        if (!msgPayload.notification) {\r\n                            // Nothing to do.\r\n                            return [2 /*return*/];\r\n                        }\r\n                        clickAction = msgPayload.notification.click_action;\r\n                        if (!clickAction) {\r\n                            // Nothing to do.\r\n                            return [2 /*return*/];\r\n                        }\r\n                        return [4 /*yield*/, this.getWindowClient_(clickAction)];\r\n                    case 1:\r\n                        windowClient = _a.sent();\r\n                        if (!!windowClient) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, self.clients.openWindow(clickAction)];\r\n                    case 2:\r\n                        // Unable to find window client so need to open one.\r\n                        windowClient = _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 3: return [4 /*yield*/, windowClient.focus()];\r\n                    case 4:\r\n                        windowClient = _a.sent();\r\n                        _a.label = 5;\r\n                    case 5:\r\n                        if (!windowClient) {\r\n                            // Window Client will not be returned if it's for a third party origin.\r\n                            return [2 /*return*/];\r\n                        }\r\n                        // Delete notification data from payload before sending to the page.\r\n                        delete msgPayload.notification;\r\n                        internalMsg = createNewMsg(MessageType.NOTIFICATION_CLICKED, msgPayload);\r\n                        // Attempt to send a message to the client to handle the data\r\n                        // Is affected by: https://github.com/slightlyoff/ServiceWorker/issues/728\r\n                        return [2 /*return*/, this.attemptToMessageClient_(windowClient, internalMsg)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    SWController.prototype.getNotificationData_ = function (msgPayload) {\r\n        if (!msgPayload) {\r\n            return;\r\n        }\r\n        if (typeof msgPayload.notification !== 'object') {\r\n            return;\r\n        }\r\n        var notificationInformation = __assign({}, msgPayload.notification);\r\n        // Put the message payload under FCM_MSG name so we can identify the\r\n        // notification as being an FCM notification vs a notification from\r\n        // somewhere else (i.e. normal web push or developer generated\r\n        // notification).\r\n        notificationInformation.data = (_a = {}, _a[FCM_MSG] = msgPayload, _a);\r\n        return notificationInformation;\r\n        var _a;\r\n    };\r\n    /**\r\n     * Calling setBackgroundMessageHandler will opt in to some specific\r\n     * behaviours.\r\n     * 1.) If a notification doesn't need to be shown due to a window already\r\n     * being visible, then push messages will be sent to the page.\r\n     * 2.) If a notification needs to be shown, and the message contains no\r\n     * notification data this method will be called\r\n     * and the promise it returns will be passed to event.waitUntil.\r\n     * If you do not set this callback then all push messages will let and the\r\n     * developer can handle them in a their own 'push' event callback\r\n     *\r\n     * @param callback The callback to be called when a push message is received\r\n     * and a notification must be shown. The callback will be given the data from\r\n     * the push message.\r\n     */\r\n    SWController.prototype.setBackgroundMessageHandler = function (callback) {\r\n        if (!callback || typeof callback !== 'function') {\r\n            throw errorFactory.create(ERROR_CODES.BG_HANDLER_FUNCTION_EXPECTED);\r\n        }\r\n        this.bgMessageHandler = callback;\r\n    };\r\n    /**\r\n     * @param url The URL to look for when focusing a client.\r\n     * @return Returns an existing window client or a newly opened WindowClient.\r\n     */\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    SWController.prototype.getWindowClient_ = function (url) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parsedURL, clientList, suitableClient, i, parsedClientUrl;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        parsedURL = new URL(url, self.location.href).href;\r\n                        return [4 /*yield*/, getClientList()];\r\n                    case 1:\r\n                        clientList = _a.sent();\r\n                        suitableClient = null;\r\n                        for (i = 0; i < clientList.length; i++) {\r\n                            parsedClientUrl = new URL(clientList[i].url, self.location.href)\r\n                                .href;\r\n                            if (parsedClientUrl === parsedURL) {\r\n                                suitableClient = clientList[i];\r\n                                break;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, suitableClient];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This message will attempt to send the message to a window client.\r\n     * @param client The WindowClient to send the message to.\r\n     * @param message The message to send to the client.\r\n     * @returns Returns a promise that resolves after sending the message. This\r\n     * does not guarantee that the message was successfully received.\r\n     */\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    SWController.prototype.attemptToMessageClient_ = function (client, message) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                // NOTE: This returns a promise in case this API is abstracted later on to\r\n                // do additional work\r\n                if (!client) {\r\n                    throw errorFactory.create(ERROR_CODES.NO_WINDOW_CLIENT_TO_MSG);\r\n                }\r\n                client.postMessage(message);\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @returns If there is currently a visible WindowClient, this method will\r\n     * resolve to true, otherwise false.\r\n     */\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    SWController.prototype.hasVisibleClients_ = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var clientList;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, getClientList()];\r\n                    case 1:\r\n                        clientList = _a.sent();\r\n                        return [2 /*return*/, clientList.some(function (client) { return client.visibilityState === 'visible'; })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param msgPayload The data from the push event that should be sent to all\r\n     * available pages.\r\n     * @returns Returns a promise that resolves once the message has been sent to\r\n     * all WindowClients.\r\n     */\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    SWController.prototype.sendMessageToWindowClients_ = function (msgPayload) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var clientList, internalMsg;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, getClientList()];\r\n                    case 1:\r\n                        clientList = _a.sent();\r\n                        internalMsg = createNewMsg(MessageType.PUSH_MSG_RECEIVED, msgPayload);\r\n                        return [4 /*yield*/, Promise.all(clientList.map(function (client) {\r\n                                return _this.attemptToMessageClient_(client, internalMsg);\r\n                            }))];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This will register the default service worker and return the registration.\r\n     * @return he service worker registration to be used for the push service.\r\n     */\r\n    SWController.prototype.getSWRegistration_ = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, self.registration];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This will return the default VAPID key or the uint8array version of the\r\n     * public VAPID key provided by the developer.\r\n     */\r\n    SWController.prototype.getPublicVapidKey_ = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var swReg, vapidKeyFromDatabase;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getSWRegistration_()];\r\n                    case 1:\r\n                        swReg = _a.sent();\r\n                        if (!swReg) {\r\n                            throw errorFactory.create(ERROR_CODES.SW_REGISTRATION_EXPECTED);\r\n                        }\r\n                        return [4 /*yield*/, this.getVapidDetailsModel().getVapidFromSWScope(swReg.scope)];\r\n                    case 2:\r\n                        vapidKeyFromDatabase = _a.sent();\r\n                        if (vapidKeyFromDatabase == null) {\r\n                            return [2 /*return*/, DEFAULT_PUBLIC_VAPID_KEY];\r\n                        }\r\n                        return [2 /*return*/, vapidKeyFromDatabase];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return SWController;\r\n}(ControllerInterface));\r\nfunction getClientList() {\r\n    return self.clients.matchAll({\r\n        type: 'window',\r\n        includeUncontrolled: true\r\n        // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\r\n    });\r\n}\r\nfunction createNewMsg(msgType, msgData) {\r\n    return _a = {}, _a[MessageParameter.TYPE_OF_MSG] = msgType, _a[MessageParameter.DATA] = msgData, _a;\r\n    var _a;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\r\nvar DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WindowController = /** @class */ (function (_super) {\r\n    __extends(WindowController, _super);\r\n    /**\r\n     * A service that provides a MessagingService instance.\r\n     */\r\n    function WindowController(app) {\r\n        var _this = _super.call(this, app) || this;\r\n        _this.registrationToUse = null;\r\n        _this.publicVapidKeyToUse = null;\r\n        _this.manifestCheckPromise = null;\r\n        _this.messageObserver = null;\r\n        // @ts-ignore: Unused variable error, this is not implemented yet.\r\n        _this.tokenRefreshObserver = null;\r\n        _this.onMessageInternal = createSubscribe(function (observer) {\r\n            _this.messageObserver = observer;\r\n        });\r\n        _this.onTokenRefreshInternal = createSubscribe(function (observer) {\r\n            _this.tokenRefreshObserver = observer;\r\n        });\r\n        _this.setupSWMessageListener_();\r\n        return _this;\r\n    }\r\n    /**\r\n     * This method returns an FCM token if it can be generated.\r\n     * The return promise will reject if the browser doesn't support\r\n     * FCM, if permission is denied for notifications or it's not\r\n     * possible to generate a token.\r\n     *\r\n     * @return Returns a promise that resolves to an FCM token or null if\r\n     * permission isn't granted.\r\n     */\r\n    WindowController.prototype.getToken = function () {\r\n        var _this = this;\r\n        // Check that the required API's are available\r\n        if (!this.isSupported_()) {\r\n            return Promise.reject(errorFactory.create(ERROR_CODES.UNSUPPORTED_BROWSER));\r\n        }\r\n        return this.manifestCheck_().then(function () {\r\n            return _super.prototype.getToken.call(_this);\r\n        });\r\n    };\r\n    /**\r\n     * The method checks that a manifest is defined and has the correct GCM\r\n     * sender ID.\r\n     * @return Returns a promise that resolves if the manifest matches\r\n     * our required sender ID\r\n     */\r\n    // Visible for testing\r\n    // TODO: make private\r\n    WindowController.prototype.manifestCheck_ = function () {\r\n        if (this.manifestCheckPromise) {\r\n            return this.manifestCheckPromise;\r\n        }\r\n        var manifestTag = document.querySelector('link[rel=\"manifest\"]');\r\n        if (!manifestTag) {\r\n            this.manifestCheckPromise = Promise.resolve();\r\n        }\r\n        else {\r\n            this.manifestCheckPromise = fetch(manifestTag.href)\r\n                .then(function (response) {\r\n                return response.json();\r\n            })\r\n                .catch(function () {\r\n                // If the download or parsing fails allow check.\r\n                // We only want to error if we KNOW that the gcm_sender_id is incorrect.\r\n            })\r\n                .then(function (manifestContent) {\r\n                if (!manifestContent) {\r\n                    return;\r\n                }\r\n                if (!manifestContent['gcm_sender_id']) {\r\n                    return;\r\n                }\r\n                if (manifestContent['gcm_sender_id'] !== '103953800507') {\r\n                    throw errorFactory.create(ERROR_CODES.INCORRECT_GCM_SENDER_ID);\r\n                }\r\n            });\r\n        }\r\n        return this.manifestCheckPromise;\r\n    };\r\n    /**\r\n     * Request permission if it is not currently granted\r\n     *\r\n     * @return Resolves if the permission was granted, otherwise rejects\r\n     */\r\n    WindowController.prototype.requestPermission = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (\r\n                // TODO: Remove the cast when this issue is fixed:\r\n                // https://github.com/Microsoft/TypeScript/issues/14701\r\n                // tslint:disable-next-line no-any\r\n                Notification.permission === 'granted') {\r\n                    return [2 /*return*/];\r\n                }\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        var managePermissionResult = function (result) {\r\n                            if (result === 'granted') {\r\n                                return resolve();\r\n                            }\r\n                            else if (result === 'denied') {\r\n                                return reject(errorFactory.create(ERROR_CODES.PERMISSION_BLOCKED));\r\n                            }\r\n                            else {\r\n                                return reject(errorFactory.create(ERROR_CODES.PERMISSION_DEFAULT));\r\n                            }\r\n                        };\r\n                        // The Notification.requestPermission API was changed to\r\n                        // return a promise so now have to handle both in case\r\n                        // browsers stop support callbacks for promised version\r\n                        var permissionPromise = Notification.requestPermission(managePermissionResult);\r\n                        if (permissionPromise) {\r\n                            // Prefer the promise version as it's the future API.\r\n                            permissionPromise.then(managePermissionResult);\r\n                        }\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This method allows a developer to override the default service worker and\r\n     * instead use a custom service worker.\r\n     *\r\n     * @param registration The service worker registration that should be used to\r\n     * receive the push messages.\r\n     */\r\n    WindowController.prototype.useServiceWorker = function (registration) {\r\n        if (!(registration instanceof ServiceWorkerRegistration)) {\r\n            throw errorFactory.create(ERROR_CODES.SW_REGISTRATION_EXPECTED);\r\n        }\r\n        if (this.registrationToUse != null) {\r\n            throw errorFactory.create(ERROR_CODES.USE_SW_BEFORE_GET_TOKEN);\r\n        }\r\n        this.registrationToUse = registration;\r\n    };\r\n    /**\r\n     * This method allows a developer to override the default vapid key\r\n     * and instead use a custom VAPID public key.\r\n     *\r\n     * @param publicKey A URL safe base64 encoded string.\r\n     */\r\n    WindowController.prototype.usePublicVapidKey = function (publicKey) {\r\n        if (typeof publicKey !== 'string') {\r\n            throw errorFactory.create(ERROR_CODES.INVALID_PUBLIC_VAPID_KEY);\r\n        }\r\n        if (this.publicVapidKeyToUse != null) {\r\n            throw errorFactory.create(ERROR_CODES.USE_PUBLIC_KEY_BEFORE_GET_TOKEN);\r\n        }\r\n        var parsedKey = base64ToArrayBuffer(publicKey);\r\n        if (parsedKey.length !== 65) {\r\n            throw errorFactory.create(ERROR_CODES.PUBLIC_KEY_DECRYPTION_FAILED);\r\n        }\r\n        this.publicVapidKeyToUse = parsedKey;\r\n    };\r\n    /**\r\n     * @export\r\n     * @param nextOrObserver An observer object or a function triggered on\r\n     * message.\r\n     * @param error A function triggered on message error.\r\n     * @param completed function triggered when the observer is removed.\r\n     * @return The unsubscribe function for the observer.\r\n     */\r\n    WindowController.prototype.onMessage = function (nextOrObserver, error, completed) {\r\n        if (typeof nextOrObserver === 'function') {\r\n            return this.onMessageInternal(nextOrObserver, error, completed);\r\n        }\r\n        else {\r\n            return this.onMessageInternal(nextOrObserver);\r\n        }\r\n    };\r\n    /**\r\n     * @param nextOrObserver An observer object or a function triggered on token\r\n     * refresh.\r\n     * @param error A function triggered on token refresh error.\r\n     * @param completed function triggered when the observer is removed.\r\n     * @return The unsubscribe function for the observer.\r\n     */\r\n    WindowController.prototype.onTokenRefresh = function (nextOrObserver, error, completed) {\r\n        if (typeof nextOrObserver === 'function') {\r\n            return this.onTokenRefreshInternal(nextOrObserver, error, completed);\r\n        }\r\n        else {\r\n            return this.onTokenRefreshInternal(nextOrObserver);\r\n        }\r\n    };\r\n    /**\r\n     * Given a registration, wait for the service worker it relates to\r\n     * become activer\r\n     * @param registration Registration to wait for service worker to become active\r\n     * @return Wait for service worker registration to become active\r\n     */\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    WindowController.prototype.waitForRegistrationToActivate_ = function (registration) {\r\n        var serviceWorker = registration.installing || registration.waiting || registration.active;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!serviceWorker) {\r\n                // This is a rare scenario but has occured in firefox\r\n                reject(errorFactory.create(ERROR_CODES.NO_SW_IN_REG));\r\n                return;\r\n            }\r\n            // Because the Promise function is called on next tick there is a\r\n            // small chance that the worker became active or redundant already.\r\n            if (serviceWorker.state === 'activated') {\r\n                resolve(registration);\r\n                return;\r\n            }\r\n            if (serviceWorker.state === 'redundant') {\r\n                reject(errorFactory.create(ERROR_CODES.SW_REG_REDUNDANT));\r\n                return;\r\n            }\r\n            var stateChangeListener = function () {\r\n                if (serviceWorker.state === 'activated') {\r\n                    resolve(registration);\r\n                }\r\n                else if (serviceWorker.state === 'redundant') {\r\n                    reject(errorFactory.create(ERROR_CODES.SW_REG_REDUNDANT));\r\n                }\r\n                else {\r\n                    // Return early and wait to next state change\r\n                    return;\r\n                }\r\n                serviceWorker.removeEventListener('statechange', stateChangeListener);\r\n            };\r\n            serviceWorker.addEventListener('statechange', stateChangeListener);\r\n        });\r\n    };\r\n    /**\r\n     * This will register the default service worker and return the registration\r\n     * @return The service worker registration to be used for the push service.\r\n     */\r\n    WindowController.prototype.getSWRegistration_ = function () {\r\n        var _this = this;\r\n        if (this.registrationToUse) {\r\n            return this.waitForRegistrationToActivate_(this.registrationToUse);\r\n        }\r\n        // Make the registration null so we know useServiceWorker will not\r\n        // use a new service worker as registrationToUse is no longer undefined\r\n        this.registrationToUse = null;\r\n        return navigator.serviceWorker\r\n            .register(DEFAULT_SW_PATH, {\r\n            scope: DEFAULT_SW_SCOPE\r\n        })\r\n            .catch(function (err) {\r\n            throw errorFactory.create(ERROR_CODES.FAILED_DEFAULT_REGISTRATION, {\r\n                browserErrorMessage: err.message\r\n            });\r\n        })\r\n            .then(function (registration) {\r\n            return _this.waitForRegistrationToActivate_(registration).then(function () {\r\n                _this.registrationToUse = registration;\r\n                // We update after activation due to an issue with Firefox v49 where\r\n                // a race condition occassionally causes the service work to not\r\n                // install\r\n                registration.update();\r\n                return registration;\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This will return the default VAPID key or the uint8array version of the public VAPID key\r\n     * provided by the developer.\r\n     */\r\n    WindowController.prototype.getPublicVapidKey_ = function () {\r\n        if (this.publicVapidKeyToUse) {\r\n            return Promise.resolve(this.publicVapidKeyToUse);\r\n        }\r\n        return Promise.resolve(DEFAULT_PUBLIC_VAPID_KEY);\r\n    };\r\n    /**\r\n     * This method will set up a message listener to handle\r\n     * events from the service worker that should trigger\r\n     * events in the page.\r\n     */\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    WindowController.prototype.setupSWMessageListener_ = function () {\r\n        var _this = this;\r\n        if (!('serviceWorker' in navigator)) {\r\n            return;\r\n        }\r\n        navigator.serviceWorker.addEventListener('message', function (event) {\r\n            if (!event.data || !event.data[MessageParameter.TYPE_OF_MSG]) {\r\n                // Not a message from FCM\r\n                return;\r\n            }\r\n            var workerPageMessage = event.data;\r\n            switch (workerPageMessage[MessageParameter.TYPE_OF_MSG]) {\r\n                case MessageType.PUSH_MSG_RECEIVED:\r\n                case MessageType.NOTIFICATION_CLICKED:\r\n                    var pushMessage = workerPageMessage[MessageParameter.DATA];\r\n                    if (_this.messageObserver) {\r\n                        _this.messageObserver.next(pushMessage);\r\n                    }\r\n                    break;\r\n                default:\r\n                    // Noop.\r\n                    break;\r\n            }\r\n        }, false);\r\n    };\r\n    /**\r\n     * Checks to see if the required API's are valid or not.\r\n     * @return Returns true if the desired APIs are available.\r\n     */\r\n    // Visible for testing\r\n    // TODO: Make private\r\n    WindowController.prototype.isSupported_ = function () {\r\n        return ('serviceWorker' in navigator &&\r\n            'PushManager' in window &&\r\n            'Notification' in window &&\r\n            'fetch' in window &&\r\n            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\r\n            PushSubscription.prototype.hasOwnProperty('getKey'));\r\n    };\r\n    return WindowController;\r\n}(ControllerInterface));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerMessaging(instance) {\r\n    var messagingName = 'messaging';\r\n    var factoryMethod = function (app) {\r\n        if (self && 'ServiceWorkerGlobalScope' in self) {\r\n            return new SWController(app);\r\n        }\r\n        // Assume we are in the window context.\r\n        return new WindowController(app);\r\n    };\r\n    var namespaceExports = {\r\n        // no-inline\r\n        Messaging: WindowController\r\n    };\r\n    instance.INTERNAL.registerService(messagingName, factoryMethod, namespaceExports);\r\n}\r\nregisterMessaging(firebase);\n\nexport { registerMessaging };\n"]},"metadata":{},"sourceType":"module"}