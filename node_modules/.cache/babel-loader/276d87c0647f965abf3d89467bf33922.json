{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { primitiveComparator } from '../util/misc';\n\nvar DatabaseInfo =\n/** @class */\nfunction () {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   */\n  function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n    this.databaseId = databaseId;\n    this.persistenceKey = persistenceKey;\n    this.host = host;\n    this.ssl = ssl;\n  }\n\n  return DatabaseInfo;\n}();\n\nexport { DatabaseInfo };\n/** The default database name for a project. */\n\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\n\nvar DatabaseId =\n/** @class */\nfunction () {\n  function DatabaseId(projectId, database) {\n    this.projectId = projectId;\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n    get: function get() {\n      return this.database === DEFAULT_DATABASE_NAME;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DatabaseId.prototype.equals = function (other) {\n    return other instanceof DatabaseId && other.projectId === this.projectId && other.database === this.database;\n  };\n\n  DatabaseId.prototype.compareTo = function (other) {\n    return primitiveComparator(this.projectId, other.projectId) || primitiveComparator(this.database, other.database);\n  };\n\n  return DatabaseId;\n}();\n\nexport { DatabaseId };","map":{"version":3,"sources":["../src/core/database_info.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AAEH,SAAS,mBAAT,QAAoC,cAApC;;AAEA,IAAA,YAAA;AAAA;AAAA,YAAA;AACE;;;;;;;;;AASG;AACH,WAAA,YAAA,CACW,UADX,EAEW,cAFX,EAGW,IAHX,EAIW,GAJX,EAIuB;AAHZ,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,cAAA,GAAA,cAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,GAAA,GAAA,GAAA;AACP;;AACN,SAAA,YAAA;AAAC,CAjBD,EAAA;;;AAmBA;;AACA,IAAM,qBAAqB,GAAG,WAA9B;AAEA;;AACA,IAAA,UAAA;AAAA;AAAA,YAAA;AAEE,WAAA,UAAA,CAAqB,SAArB,EAAwC,QAAxC,EAAyD;AAApC,SAAA,SAAA,GAAA,SAAA;AACnB,SAAK,QAAL,GAAgB,QAAQ,GAAG,QAAH,GAAc,qBAAtC;AACD;;AAED,EAAA,MAAA,CAAA,cAAA,CAAI,UAAA,CAAA,SAAJ,EAAI,mBAAJ,EAAqB;SAArB,eAAA;AACE,aAAO,KAAK,QAAL,KAAkB,qBAAzB;AACD,KAFoB;oBAAA;;AAAA,GAArB;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAAgB;AACd,WACE,KAAK,YAAY,UAAjB,IACA,KAAK,CAAC,SAAN,KAAoB,KAAK,SADzB,IAEA,KAAK,CAAC,QAAN,KAAmB,KAAK,QAH1B;AAKD,GAND;;AAQA,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAA2B;AACzB,WACE,mBAAmB,CAAC,KAAK,SAAN,EAAiB,KAAK,CAAC,SAAvB,CAAnB,IACA,mBAAmB,CAAC,KAAK,QAAN,EAAgB,KAAK,CAAC,QAAtB,CAFrB;AAID,GALD;;AAMF,SAAA,UAAA;AAAC,CAxBD,EAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { primitiveComparator } from '../util/misc';\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  equals(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n\n  compareTo(other: DatabaseId): number {\n    return (\n      primitiveComparator(this.projectId, other.projectId) ||\n      primitiveComparator(this.database, other.database)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}