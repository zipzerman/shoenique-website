{"ast":null,"code":"import { Euler, EventDispatcher, MathUtils, Quaternion, Vector3 } from '../../../build/three.module.js';\n/**\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nvar DeviceOrientationControls = function DeviceOrientationControls(object) {\n  if (window.isSecureContext === false) {\n    console.error('THREE.DeviceOrientationControls: DeviceOrientationEvent is only available in secure contexts (https)');\n  }\n\n  var scope = this;\n  var changeEvent = {\n    type: 'change'\n  };\n  var EPS = 0.000001;\n  this.object = object;\n  this.object.rotation.reorder('YXZ');\n  this.enabled = true;\n  this.deviceOrientation = {};\n  this.screenOrientation = 0;\n  this.alphaOffset = 0; // radians\n\n  var onDeviceOrientationChangeEvent = function onDeviceOrientationChangeEvent(event) {\n    scope.deviceOrientation = event;\n  };\n\n  var onScreenOrientationChangeEvent = function onScreenOrientationChangeEvent() {\n    scope.screenOrientation = window.orientation || 0;\n  }; // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n\n  var setObjectQuaternion = function () {\n    var zee = new Vector3(0, 0, 1);\n    var euler = new Euler();\n    var q0 = new Quaternion();\n    var q1 = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)); // - PI/2 around the x-axis\n\n    return function (quaternion, alpha, beta, gamma, orient) {\n      euler.set(beta, alpha, -gamma, 'YXZ'); // 'ZXY' for the device, but 'YXZ' for us\n\n      quaternion.setFromEuler(euler); // orient the device\n\n      quaternion.multiply(q1); // camera looks out the back of the device, not the top\n\n      quaternion.multiply(q0.setFromAxisAngle(zee, -orient)); // adjust for screen orientation\n    };\n  }();\n\n  this.connect = function () {\n    onScreenOrientationChangeEvent(); // run once on load\n    // iOS 13+\n\n    if (window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function') {\n      window.DeviceOrientationEvent.requestPermission().then(function (response) {\n        if (response == 'granted') {\n          window.addEventListener('orientationchange', onScreenOrientationChangeEvent);\n          window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent);\n        }\n      }).catch(function (error) {\n        console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error);\n      });\n    } else {\n      window.addEventListener('orientationchange', onScreenOrientationChangeEvent);\n      window.addEventListener('deviceorientation', onDeviceOrientationChangeEvent);\n    }\n\n    scope.enabled = true;\n  };\n\n  this.disconnect = function () {\n    window.removeEventListener('orientationchange', onScreenOrientationChangeEvent);\n    window.removeEventListener('deviceorientation', onDeviceOrientationChangeEvent);\n    scope.enabled = false;\n  };\n\n  this.update = function () {\n    var lastQuaternion = new Quaternion();\n    return function () {\n      if (scope.enabled === false) return;\n      var device = scope.deviceOrientation;\n\n      if (device) {\n        var alpha = device.alpha ? MathUtils.degToRad(device.alpha) + scope.alphaOffset : 0; // Z\n\n        var beta = device.beta ? MathUtils.degToRad(device.beta) : 0; // X'\n\n        var gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0; // Y''\n\n        var orient = scope.screenOrientation ? MathUtils.degToRad(scope.screenOrientation) : 0; // O\n\n        setObjectQuaternion(scope.object.quaternion, alpha, beta, gamma, orient);\n\n        if (8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n          lastQuaternion.copy(scope.object.quaternion);\n          scope.dispatchEvent(changeEvent);\n        }\n      }\n    };\n  }();\n\n  this.dispose = function () {\n    scope.disconnect();\n  };\n\n  this.connect();\n};\n\nDeviceOrientationControls.prototype = Object.create(EventDispatcher.prototype);\nDeviceOrientationControls.prototype.constructor = DeviceOrientationControls;\nexport { DeviceOrientationControls };","map":{"version":3,"sources":["C:/Users/junecsnp/Desktop/JuneWeb+Shoe/node_modules/three/examples/jsm/controls/DeviceOrientationControls.js"],"names":["Euler","EventDispatcher","MathUtils","Quaternion","Vector3","DeviceOrientationControls","object","window","isSecureContext","console","error","scope","changeEvent","type","EPS","rotation","reorder","enabled","deviceOrientation","screenOrientation","alphaOffset","onDeviceOrientationChangeEvent","event","onScreenOrientationChangeEvent","orientation","setObjectQuaternion","zee","euler","q0","q1","Math","sqrt","quaternion","alpha","beta","gamma","orient","set","setFromEuler","multiply","setFromAxisAngle","connect","DeviceOrientationEvent","undefined","requestPermission","then","response","addEventListener","catch","disconnect","removeEventListener","update","lastQuaternion","device","degToRad","dot","copy","dispatchEvent","dispose","prototype","Object","create","constructor"],"mappings":"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","sourcesContent":["import {\n\tEuler,\n\tEventDispatcher,\n\tMathUtils,\n\tQuaternion,\n\tVector3\n} from '../../../build/three.module.js';\n\n/**\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nvar DeviceOrientationControls = function ( object ) {\n\n\tif ( window.isSecureContext === false ) {\n\n\t\tconsole.error( 'THREE.DeviceOrientationControls: DeviceOrientationEvent is only available in secure contexts (https)' );\n\n\t}\n\n\tvar scope = this;\n\tvar changeEvent = { type: 'change' };\n\tvar EPS = 0.000001;\n\n\tthis.object = object;\n\tthis.object.rotation.reorder( 'YXZ' );\n\n\tthis.enabled = true;\n\n\tthis.deviceOrientation = {};\n\tthis.screenOrientation = 0;\n\n\tthis.alphaOffset = 0; // radians\n\n\tvar onDeviceOrientationChangeEvent = function ( event ) {\n\n\t\tscope.deviceOrientation = event;\n\n\t};\n\n\tvar onScreenOrientationChangeEvent = function () {\n\n\t\tscope.screenOrientation = window.orientation || 0;\n\n\t};\n\n\t// The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n\tvar setObjectQuaternion = function () {\n\n\t\tvar zee = new Vector3( 0, 0, 1 );\n\n\t\tvar euler = new Euler();\n\n\t\tvar q0 = new Quaternion();\n\n\t\tvar q1 = new Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\n\t\treturn function ( quaternion, alpha, beta, gamma, orient ) {\n\n\t\t\teuler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\n\t\t\tquaternion.setFromEuler( euler ); // orient the device\n\n\t\t\tquaternion.multiply( q1 ); // camera looks out the back of the device, not the top\n\n\t\t\tquaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\n\n\t\t};\n\n\t}();\n\n\tthis.connect = function () {\n\n\t\tonScreenOrientationChangeEvent(); // run once on load\n\n\t\t// iOS 13+\n\n\t\tif ( window.DeviceOrientationEvent !== undefined && typeof window.DeviceOrientationEvent.requestPermission === 'function' ) {\n\n\t\t\twindow.DeviceOrientationEvent.requestPermission().then( function ( response ) {\n\n\t\t\t\tif ( response == 'granted' ) {\n\n\t\t\t\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent );\n\t\t\t\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent );\n\n\t\t\t\t}\n\n\t\t\t} ).catch( function ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error );\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent );\n\t\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent );\n\n\t\t}\n\n\t\tscope.enabled = true;\n\n\t};\n\n\tthis.disconnect = function () {\n\n\t\twindow.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent );\n\t\twindow.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent );\n\n\t\tscope.enabled = false;\n\n\t};\n\n\tthis.update = ( function () {\n\n\t\tvar lastQuaternion = new Quaternion();\n\n\t\treturn function () {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tvar device = scope.deviceOrientation;\n\n\t\t\tif ( device ) {\n\n\t\t\t\tvar alpha = device.alpha ? MathUtils.degToRad( device.alpha ) + scope.alphaOffset : 0; // Z\n\n\t\t\t\tvar beta = device.beta ? MathUtils.degToRad( device.beta ) : 0; // X'\n\n\t\t\t\tvar gamma = device.gamma ? MathUtils.degToRad( device.gamma ) : 0; // Y''\n\n\t\t\t\tvar orient = scope.screenOrientation ? MathUtils.degToRad( scope.screenOrientation ) : 0; // O\n\n\t\t\t\tsetObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\n\t\t\t\tif ( 8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\n\t} )();\n\n\tthis.dispose = function () {\n\n\t\tscope.disconnect();\n\n\t};\n\n\tthis.connect();\n\n};\n\nDeviceOrientationControls.prototype = Object.create( EventDispatcher.prototype );\nDeviceOrientationControls.prototype.constructor = DeviceOrientationControls;\n\nexport { DeviceOrientationControls };\n"]},"metadata":{},"sourceType":"module"}