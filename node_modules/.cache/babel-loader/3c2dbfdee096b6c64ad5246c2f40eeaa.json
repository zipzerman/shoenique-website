{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from './sorted_map';\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\n\nvar SortedSet =\n/** @class */\nfunction () {\n  function SortedSet(comparator) {\n    this.comparator = comparator;\n    this.data = new SortedMap(this.comparator);\n  }\n  /**\n   * Creates a SortedSet from the keys of the map.\n   * This is currently implemented as an O(n) copy.\n   */\n\n\n  SortedSet.fromMapKeys = function (map) {\n    var keys = new SortedSet(map.comparator);\n    map.forEach(function (key) {\n      keys = keys.add(key);\n    });\n    return keys;\n  };\n\n  SortedSet.prototype.has = function (elem) {\n    return this.data.get(elem) !== null;\n  };\n\n  SortedSet.prototype.first = function () {\n    return this.data.minKey();\n  };\n\n  SortedSet.prototype.last = function () {\n    return this.data.maxKey();\n  };\n\n  Object.defineProperty(SortedSet.prototype, \"size\", {\n    get: function get() {\n      return this.data.size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SortedSet.prototype.indexOf = function (elem) {\n    return this.data.indexOf(elem);\n  };\n  /** Iterates elements in order defined by \"comparator\" */\n\n\n  SortedSet.prototype.forEach = function (cb) {\n    this.data.inorderTraversal(function (k, v) {\n      cb(k);\n      return false;\n    });\n  };\n  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n\n\n  SortedSet.prototype.forEachInRange = function (range, cb) {\n    var iter = this.data.getIteratorFrom(range[0]);\n\n    while (iter.hasNext()) {\n      var elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) return;\n      cb(elem.key);\n    }\n  };\n  /**\n   * Iterates over `elem`s such that: start <= elem until false is returned.\n   */\n\n\n  SortedSet.prototype.forEachWhile = function (cb, start) {\n    var iter;\n\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n\n    while (iter.hasNext()) {\n      var elem = iter.getNext();\n      var result = cb(elem.key);\n      if (!result) return;\n    }\n  };\n  /** Finds the least element greater than or equal to `elem`. */\n\n\n  SortedSet.prototype.firstAfterOrEqual = function (elem) {\n    var iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  };\n  /** Inserts or updates an element */\n\n\n  SortedSet.prototype.add = function (elem) {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  };\n  /** Deletes an element */\n\n\n  SortedSet.prototype.delete = function (elem) {\n    if (!this.has(elem)) return this;\n    return this.copy(this.data.remove(elem));\n  };\n\n  SortedSet.prototype.isEmpty = function () {\n    return this.data.isEmpty();\n  };\n\n  SortedSet.prototype.unionWith = function (other) {\n    var result = this;\n    other.forEach(function (elem) {\n      result = result.add(elem);\n    });\n    return result;\n  };\n\n  SortedSet.prototype.equals = function (other) {\n    if (!(other instanceof SortedSet)) return false;\n    if (this.size !== other.size) return false;\n    var thisIt = this.data.getIterator();\n    var otherIt = other.data.getIterator();\n\n    while (thisIt.hasNext()) {\n      var thisElem = thisIt.getNext().key;\n      var otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) return false;\n    }\n\n    return true;\n  };\n\n  SortedSet.prototype.toString = function () {\n    var result = [];\n    this.forEach(function (elem) {\n      return result.push(elem);\n    });\n    return 'SortedSet(' + result.toString() + ')';\n  };\n\n  SortedSet.prototype.copy = function (data) {\n    var result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  };\n\n  return SortedSet;\n}();\n\nexport { SortedSet };","map":{"version":3,"sources":["../src/util/sorted_set.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entry, SortedMap, SortedMapIterator } from './sorted_map';\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nexport class SortedSet<T> {\n  private data: SortedMap<T, boolean>;\n\n  constructor(private comparator: (left: T, right: T) => number) {\n    this.data = new SortedMap<T, boolean>(this.comparator);\n  }\n\n  /**\n   * Creates a SortedSet from the keys of the map.\n   * This is currently implemented as an O(n) copy.\n   */\n  static fromMapKeys<K, V>(map: SortedMap<K, V>): SortedSet<K> {\n    let keys = new SortedSet<K>(map.comparator);\n    map.forEach(key => {\n      keys = keys.add(key);\n    });\n    return keys;\n  }\n\n  has(elem: T): boolean {\n    return this.data.get(elem) !== null;\n  }\n\n  first(): T | null {\n    return this.data.minKey();\n  }\n\n  last(): T | null {\n    return this.data.maxKey();\n  }\n\n  get size(): number {\n    return this.data.size;\n  }\n\n  indexOf(elem: T): number {\n    return this.data.indexOf(elem);\n  }\n\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb: (elem: T) => void): void {\n    this.data.inorderTraversal((k: T, v: boolean) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n  forEachInRange(range: [T, T], cb: (elem: T) => void): void {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) return;\n      cb(elem.key);\n    }\n  }\n\n  /**\n   * Iterates over `elem`s such that: start <= elem until false is returned.\n   */\n  forEachWhile(cb: (elem: T) => boolean, start?: T): void {\n    let iter: SortedMapIterator<T, boolean, Entry<T, boolean>>;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) return;\n    }\n  }\n\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem: T): T | null {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n\n  /** Inserts or updates an element */\n  add(elem: T): SortedSet<T> {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n\n  /** Deletes an element */\n  delete(elem: T): SortedSet<T> {\n    if (!this.has(elem)) return this;\n    return this.copy(this.data.remove(elem));\n  }\n\n  isEmpty(): boolean {\n    return this.data.isEmpty();\n  }\n\n  unionWith(other: SortedSet<T>): SortedSet<T> {\n    let result: SortedSet<T> = this;\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n\n  equals(other: SortedSet<T>): boolean {\n    if (!(other instanceof SortedSet)) return false;\n    if (this.size !== other.size) return false;\n\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    const result: T[] = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n\n  private copy(data: SortedMap<T, boolean>): SortedSet<T> {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}