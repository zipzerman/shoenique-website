'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactThreeFiber = require('react-three-fiber');
var THREE = require('three');
var RGBELoader = require('three/examples/jsm/loaders/RGBELoader');

function getTexture(texture, gen, isCubeMap) {
  if (isCubeMap) {
    gen.compileEquirectangularShader();
    return gen.fromCubemap(texture).texture;
  }

  return gen.fromEquirectangular(texture).texture;
}

function Environment(_ref) {
  var _ref$background = _ref.background,
      background = _ref$background === void 0 ? false : _ref$background,
      _ref$files = _ref.files,
      files = _ref$files === void 0 ? ['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'] : _ref$files,
      _ref$path = _ref.path,
      path = _ref$path === void 0 ? '/' : _ref$path;

  var _useThree = reactThreeFiber.useThree(),
      gl = _useThree.gl,
      scene = _useThree.scene;

  var isCubeMap = Array.isArray(files);
  var loader = isCubeMap ? THREE.CubeTextureLoader : RGBELoader.RGBELoader; // @ts-expect-error

  var loaderResult = reactThreeFiber.useLoader(loader, isCubeMap ? [files] : files, function (loader) {
    return loader.setPath(path);
  });
  var map = isCubeMap ? loaderResult[0] : loaderResult;
  React.useLayoutEffect(function () {
    var gen = new THREE.PMREMGenerator(gl);
    var texture = getTexture(map, gen, isCubeMap);
    if (background) scene.background = texture;
    scene.environment = texture;
    map.dispose();
    gen.dispose();
    return function () {
      scene.environment = scene.background = null;
    };
  }, [gl, map, isCubeMap, background, scene]);
  return null;
}

exports.Environment = Environment;
