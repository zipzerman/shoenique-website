import { useRef, useCallback, useEffect, useReducer, useMemo, useLayoutEffect } from 'react';
import { markToTrack, getUntrackedObject, isDeepChanged, createDeepProxy } from 'proxy-compare';
import { useSubscription } from 'use-subscription';

/*
export {
  unstable_createMutableSource as createMutableSource,
  unstable_useMutableSource as useMutableSource,
} from 'react'
*/
const TARGET = Symbol();
const GET_VERSION = Symbol();
const createMutableSource = (target, getVersion) => ({
  [TARGET]: target,
  [GET_VERSION]: getVersion
});
const useMutableSource = (source, getSnapshot, subscribe) => {
  const lastVersion = useRef(0);
  const versionDiff = source[GET_VERSION](source[TARGET]) - lastVersion.current; // eslint-disable-next-line react-hooks/exhaustive-deps

  const getCurrentValue = useCallback(() => getSnapshot(source[TARGET]), [source, getSnapshot, versionDiff]);
  const sub = useCallback(callback => subscribe(source[TARGET], () => {
    lastVersion.current = source[GET_VERSION](source[TARGET]);
    callback();
  }), [source, subscribe]);
  useEffect(() => {
    lastVersion.current = source[GET_VERSION](source[TARGET]);
  });
  return useSubscription({
    getCurrentValue,
    subscribe: sub
  });
};

const VERSION = Symbol();
const LISTENERS = Symbol();
const SNAPSHOT = Symbol();
const PROMISE_RESULT = Symbol();
const PROMISE_ERROR = Symbol();

const isSupportedObject = x => typeof x === 'object' && x !== null && (Array.isArray(x) || !x[Symbol.iterator]) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer);

const proxyCache = new WeakMap();
let globalVersion = 1;
const snapshotCache = new WeakMap();
const proxy = (initialObject = {}) => {
  if (!isSupportedObject(initialObject)) {
    throw new Error('unsupported object type');
  }

  if (proxyCache.has(initialObject)) {
    return proxyCache.get(initialObject);
  }

  let version = globalVersion;
  const listeners = new Set();

  const notifyUpdate = nextVersion => {
    if (!nextVersion) {
      nextVersion = ++globalVersion;
    }

    if (version !== nextVersion) {
      version = nextVersion;
      listeners.forEach(listener => listener(nextVersion));
    }
  };

  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
  const p = new Proxy(baseObject, {
    get(target, prop, receiver) {
      if (prop === VERSION) {
        return version;
      }

      if (prop === LISTENERS) {
        return listeners;
      }

      if (prop === SNAPSHOT) {
        const cache = snapshotCache.get(receiver);

        if (cache && cache.version === version) {
          return cache.snapshot;
        }

        const snapshot = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
        markToTrack(snapshot);
        snapshotCache.set(receiver, {
          version,
          snapshot
        });
        Reflect.ownKeys(target).forEach(key => {
          const value = target[key];

          if (!isSupportedObject(value)) {
            snapshot[key] = value;
          } else if (value instanceof Promise) {
            if (value[PROMISE_RESULT]) {
              snapshot[key] = value[PROMISE_RESULT];
            } else {
              const errorOrPromise = value[PROMISE_ERROR] || value;
              Object.defineProperty(snapshot, key, {
                get() {
                  throw errorOrPromise;
                }

              });
            }
          } else if (value[VERSION]) {
            snapshot[key] = value[SNAPSHOT];
          } else {
            snapshot[key] = value;
          }
        });

        if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {
          Object.freeze(snapshot);
        }

        return snapshot;
      }

      return target[prop];
    },

    deleteProperty(target, prop) {
      const prevValue = target[prop];
      const childListeners = isSupportedObject(prevValue) && prevValue[LISTENERS];

      if (childListeners) {
        childListeners.delete(notifyUpdate);
      }

      const deleted = Reflect.deleteProperty(target, prop);

      if (deleted) {
        notifyUpdate();
      }

      return deleted;
    },

    set(target, prop, value) {
      const prevValue = target[prop];

      if (Object.is(prevValue, value)) {
        return true;
      }

      const childListeners = isSupportedObject(prevValue) && prevValue[LISTENERS];

      if (childListeners) {
        childListeners.delete(notifyUpdate);
      }

      if (!isSupportedObject(value)) {
        target[prop] = value;
      } else if (value instanceof Promise) {
        target[prop] = value.then(v => {
          target[prop][PROMISE_RESULT] = v;
          notifyUpdate();
        }).catch(e => {
          target[prop][PROMISE_ERROR] = e;
          notifyUpdate();
        });
      } else {
        value = getUntrackedObject(value) || value;

        if (value[LISTENERS]) {
          target[prop] = value;
        } else {
          target[prop] = proxy(value);
        }

        target[prop][LISTENERS].add(notifyUpdate);
      }

      notifyUpdate();
      return true;
    }

  });
  proxyCache.set(initialObject, p);
  Reflect.ownKeys(initialObject).forEach(key => {
    const desc = Object.getOwnPropertyDescriptor(initialObject, key);

    if (desc.get) {
      Object.defineProperty(baseObject, key, desc);
    } else {
      p[key] = initialObject[key];
    }
  });
  return p;
};
const getVersion = p => {
  if (typeof process === 'object' && process.env.NODE_ENV !== 'production' && (!p || !p[VERSION])) {
    throw new Error('Please use proxy object');
  }

  return p[VERSION];
};
const subscribe = (p, callback, notifyInSync) => {
  if (typeof process === 'object' && process.env.NODE_ENV !== 'production' && (!p || !p[LISTENERS])) {
    throw new Error('Please use proxy object');
  }

  let pendingVersion = 0;

  const listener = nextVersion => {
    if (notifyInSync) {
      callback();
      return;
    }

    pendingVersion = nextVersion;
    Promise.resolve().then(() => {
      if (nextVersion === pendingVersion) {
        callback();
      }
    });
  };

  p[LISTENERS].add(listener);
  return () => {
    p[LISTENERS].delete(listener);
  };
};
const snapshot = p => {
  if (typeof process === 'object' && process.env.NODE_ENV !== 'production' && (!p || !p[SNAPSHOT])) {
    throw new Error('Please use proxy object');
  }

  return p[SNAPSHOT];
};

const isSSR = typeof window === 'undefined' || /ServerSideRendering/.test(window.navigator && window.navigator.userAgent);
const useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;
const mutableSourceCache = new WeakMap();

const getMutableSource = p => {
  if (!mutableSourceCache.has(p)) {
    mutableSourceCache.set(p, createMutableSource(p, getVersion));
  }

  return mutableSourceCache.get(p);
};

const useProxy = (p, options) => {
  const [, forceUpdate] = useReducer(c => c + 1, 0);
  const affected = new WeakMap();
  const lastAffected = useRef();
  const prevSnapshot = useRef();
  const lastSnapshot = useRef();
  useIsomorphicLayoutEffect(() => {
    lastAffected.current = affected;

    if (prevSnapshot.current !== lastSnapshot.current && isDeepChanged(prevSnapshot.current, lastSnapshot.current, affected, new WeakMap())) {
      prevSnapshot.current = lastSnapshot.current;
      forceUpdate();
    }
  });
  const getSnapshot = useMemo(() => {
    const deepChangedCache = new WeakMap();
    return p => {
      const nextSnapshot = snapshot(p);
      lastSnapshot.current = nextSnapshot;

      try {
        if (prevSnapshot && lastAffected.current && !isDeepChanged(prevSnapshot.current, nextSnapshot, lastAffected.current, deepChangedCache)) {
          // not changed
          return prevSnapshot.current;
        }
      } catch (e) {// ignore and return nextSnapshot
      }

      return prevSnapshot.current = nextSnapshot;
    };
  }, []);
  const notifyInSync = options == null ? void 0 : options.sync;
  const sub = useCallback((p, cb) => subscribe(p, cb, notifyInSync), [notifyInSync]);
  const currSnapshot = useMutableSource(getMutableSource(p), getSnapshot, sub);
  const proxyCache = useMemo(() => new WeakMap(), []); // per-hook proxyCache

  return createDeepProxy(currSnapshot, affected, proxyCache);
};

export { proxy, snapshot, subscribe, useProxy };
